
testADCTimerDMAInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b404  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013898  0800b5d8  0800b5d8  0001b5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee70  0801ee70  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee70  0801ee70  0002ee70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee78  0801ee78  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ee78  0801ee78  0002ee78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ee7c  0801ee7c  0002ee7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801ee80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000088d8  200001d4  0801f054  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008aac  0801f054  00038aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a7c  00000000  00000000  000302b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335b  00000000  00000000  00046d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0004a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e55  00000000  00000000  0004b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c80  00000000  00000000  0004c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017947  00000000  00000000  0006ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4509  00000000  00000000  000867e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006338  00000000  00000000  0015acf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00161028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  0016109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00163b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5bc 	.word	0x0800b5bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b5bc 	.word	0x0800b5bc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b970 	b.w	8001040 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f001 f8bb 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f991 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 fbd5 	bl	8001800 <MX_GPIO_Init>
  MX_DMA_Init();
 8001056:	f000 fb9d 	bl	8001794 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800105a:	f000 fb41 	bl	80016e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800105e:	f000 fb69 	bl	8001734 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001062:	f000 fa53 	bl	800150c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001066:	f000 f9f1 	bl	800144c <MX_ADC1_Init>
  MX_TIM3_Init();
 800106a:	f000 fac5 	bl	80015f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, 2);
 800106e:	2202      	movs	r2, #2
 8001070:	49ae      	ldr	r1, [pc, #696]	; (800132c <main+0x2e8>)
 8001072:	48af      	ldr	r0, [pc, #700]	; (8001330 <main+0x2ec>)
 8001074:	f001 fa90 	bl	8002598 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <main+0x2f0>)
 800107a:	f003 fd2b 	bl	8004ad4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800107e:	2100      	movs	r1, #0
 8001080:	48ac      	ldr	r0, [pc, #688]	; (8001334 <main+0x2f0>)
 8001082:	f003 ff57 	bl	8004f34 <HAL_TIM_OC_Start_IT>
  arm_rfft_fast_init_f32(&fftHandler, FFT_SIZE);
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	48ab      	ldr	r0, [pc, #684]	; (8001338 <main+0x2f4>)
 800108c:	f006 f9ae 	bl	80073ec <arm_rfft_fast_init_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float peakVal = 0.0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t peakFreq = 0.0;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  float peakVal1 = 0.0;
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t peakFreq1 = 0.0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  float phase = 0.0;
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  float phase1 = 0.0;
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  float phasedif = 0.0;
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	  if(increment == 2048){
 80010b6:	4ba1      	ldr	r3, [pc, #644]	; (800133c <main+0x2f8>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010be:	d1fa      	bne.n	80010b6 <main+0x72>
		  timeFFT = HAL_GetTick();
 80010c0:	f001 f8e6 	bl	8002290 <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a9e      	ldr	r2, [pc, #632]	; (8001340 <main+0x2fc>)
 80010c8:	6013      	str	r3, [r2, #0]
		  arm_rfft_fast_f32(&fftHandler, &fftin, &fftout, 0);
 80010ca:	2300      	movs	r3, #0
 80010cc:	4a9d      	ldr	r2, [pc, #628]	; (8001344 <main+0x300>)
 80010ce:	499e      	ldr	r1, [pc, #632]	; (8001348 <main+0x304>)
 80010d0:	4899      	ldr	r0, [pc, #612]	; (8001338 <main+0x2f4>)
 80010d2:	f006 fa0d 	bl	80074f0 <arm_rfft_fast_f32>
		  arm_rfft_fast_f32(&fftHandler, &fftin1, &fftout1, 0);
 80010d6:	2300      	movs	r3, #0
 80010d8:	4a9c      	ldr	r2, [pc, #624]	; (800134c <main+0x308>)
 80010da:	499d      	ldr	r1, [pc, #628]	; (8001350 <main+0x30c>)
 80010dc:	4896      	ldr	r0, [pc, #600]	; (8001338 <main+0x2f4>)
 80010de:	f006 fa07 	bl	80074f0 <arm_rfft_fast_f32>
		  increment = 0;
 80010e2:	4b96      	ldr	r3, [pc, #600]	; (800133c <main+0x2f8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
		  uint16_t freqincrement = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	81fb      	strh	r3, [r7, #14]
		  for(uint16_t increment = 0; increment < FFT_SIZE; increment+=2){
 80010ec:	2300      	movs	r3, #0
 80010ee:	81bb      	strh	r3, [r7, #12]
 80010f0:	e0cf      	b.n	8001292 <main+0x24e>
			  float curVal = sqrtf((fftout[increment] * fftout[increment]) + (fftout[increment+1]*fftout[increment+1]));
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	4a93      	ldr	r2, [pc, #588]	; (8001344 <main+0x300>)
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	4a90      	ldr	r2, [pc, #576]	; (8001344 <main+0x300>)
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	4a8c      	ldr	r2, [pc, #560]	; (8001344 <main+0x300>)
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	89bb      	ldrh	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	4a88      	ldr	r2, [pc, #544]	; (8001344 <main+0x300>)
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	f009 ffad 	bl	800b094 <sqrtf>
 800113a:	ed87 0a01 	vstr	s0, [r7, #4]
			  float curVal1 = sqrtf((fftout1[increment] * fftout1[increment]) + (fftout1[increment+1]*fftout1[increment+1]));
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	4a82      	ldr	r2, [pc, #520]	; (800134c <main+0x308>)
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	89bb      	ldrh	r3, [r7, #12]
 800114c:	4a7f      	ldr	r2, [pc, #508]	; (800134c <main+0x308>)
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115a:	89bb      	ldrh	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	4a7b      	ldr	r2, [pc, #492]	; (800134c <main+0x308>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edd3 6a00 	vldr	s13, [r3]
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	4a77      	ldr	r2, [pc, #476]	; (800134c <main+0x308>)
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	f009 ff87 	bl	800b094 <sqrtf>
 8001186:	ed87 0a00 	vstr	s0, [r7]
			  if(curVal > peakVal){
 800118a:	ed97 7a01 	vldr	s14, [r7, #4]
 800118e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	dd35      	ble.n	8001208 <main+0x1c4>
				  peakVal = curVal;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
				  peakFreq = (uint32_t) (freqincrement * 96153)/((float) FFT_SIZE);
 80011a0:	89fb      	ldrh	r3, [r7, #14]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	; (8001354 <main+0x310>)
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001358 <main+0x314>
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	623b      	str	r3, [r7, #32]
				  phase = atan2(fftout[increment+1], fftout[increment]);
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <main+0x300>)
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fa3a 	bl	8000648 <__aeabi_f2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	89bb      	ldrh	r3, [r7, #12]
 80011da:	4a5a      	ldr	r2, [pc, #360]	; (8001344 <main+0x300>)
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fa30 	bl	8000648 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	ec43 2b11 	vmov	d1, r2, r3
 80011f0:	ec45 4b10 	vmov	d0, r4, r5
 80011f4:	f009 ff4c 	bl	800b090 <atan2>
 80011f8:	ec53 2b10 	vmov	r2, r3, d0
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fd52 	bl	8000ca8 <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	617b      	str	r3, [r7, #20]
			  }
			  if(curVal1 > peakVal1){
 8001208:	ed97 7a00 	vldr	s14, [r7]
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	dd35      	ble.n	8001286 <main+0x242>
				  peakVal1 = curVal1;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	61fb      	str	r3, [r7, #28]
				  peakFreq1 = (uint32_t) (freqincrement * 96153)/((float) FFT_SIZE);
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <main+0x310>)
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001358 <main+0x314>
 8001232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	61bb      	str	r3, [r7, #24]
				  phase1 = atan2(fftout1[increment+1], fftout1[increment]);
 8001240:	89bb      	ldrh	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	4a41      	ldr	r2, [pc, #260]	; (800134c <main+0x308>)
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	89bb      	ldrh	r3, [r7, #12]
 8001258:	4a3c      	ldr	r2, [pc, #240]	; (800134c <main+0x308>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f9f1 	bl	8000648 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	ec43 2b11 	vmov	d1, r2, r3
 800126e:	ec45 4b10 	vmov	d0, r4, r5
 8001272:	f009 ff0d 	bl	800b090 <atan2>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fd13 	bl	8000ca8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	613b      	str	r3, [r7, #16]
			  }
			  freqincrement++;
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	3301      	adds	r3, #1
 800128a:	81fb      	strh	r3, [r7, #14]
		  for(uint16_t increment = 0; increment < FFT_SIZE; increment+=2){
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	3302      	adds	r3, #2
 8001290:	81bb      	strh	r3, [r7, #12]
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001298:	f4ff af2b 	bcc.w	80010f2 <main+0xae>
		  }
		  phasedif = phase1 - phase;
 800129c:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc7 7a02 	vstr	s15, [r7, #8]
		  timeFFT = HAL_GetTick() - timeFFT;
 80012ac:	f000 fff0 	bl	8002290 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <main+0x2fc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <main+0x2fc>)
 80012ba:	6013      	str	r3, [r2, #0]
		  if(!transmitting){
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <main+0x318>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d123      	bne.n	800130c <main+0x2c8>
			  sprintf(msg, "FFT Time: %d UART Time: %d Missed: %d F1: %d F2: %d\r\n", timeFFT, timeUART, missedTransmit, peakFreq, peakFreq1);
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <main+0x2fc>)
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <main+0x31c>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <main+0x320>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	9202      	str	r2, [sp, #8]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	4922      	ldr	r1, [pc, #136]	; (8001368 <main+0x324>)
 80012e0:	4822      	ldr	r0, [pc, #136]	; (800136c <main+0x328>)
 80012e2:	f007 fd79 	bl	8008dd8 <siprintf>
			  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 80012e6:	4821      	ldr	r0, [pc, #132]	; (800136c <main+0x328>)
 80012e8:	f7ff f842 	bl	8000370 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	491e      	ldr	r1, [pc, #120]	; (800136c <main+0x328>)
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <main+0x32c>)
 80012f6:	f004 fd6b 	bl	8005dd0 <HAL_UART_Transmit_DMA>
			  transmitting = 1;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <main+0x318>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
			  timeUART = HAL_GetTick();
 8001300:	f000 ffc6 	bl	8002290 <HAL_GetTick>
 8001304:	4603      	mov	r3, r0
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <main+0x31c>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e004      	b.n	8001316 <main+0x2d2>
		  } else {
			  missedTransmit++;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <main+0x320>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <main+0x320>)
 8001314:	6013      	str	r3, [r2, #0]
		  }
		  peakVal = 0.0;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
		  peakFreq = 0.0;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
		  peakVal1 = 0.0;
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
		  peakFreq1 = 0.0;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
	  if(increment == 2048){
 800132a:	e6c4      	b.n	80010b6 <main+0x72>
 800132c:	200008d8 	.word	0x200008d8
 8001330:	200001f0 	.word	0x200001f0
 8001334:	200002e0 	.word	0x200002e0
 8001338:	20008934 	.word	0x20008934
 800133c:	20008930 	.word	0x20008930
 8001340:	20008954 	.word	0x20008954
 8001344:	20002930 	.word	0x20002930
 8001348:	20000930 	.word	0x20000930
 800134c:	20006930 	.word	0x20006930
 8001350:	20004930 	.word	0x20004930
 8001354:	00017799 	.word	0x00017799
 8001358:	45000000 	.word	0x45000000
 800135c:	2000092c 	.word	0x2000092c
 8001360:	20008950 	.word	0x20008950
 8001364:	2000894c 	.word	0x2000894c
 8001368:	0800b5d8 	.word	0x0800b5d8
 800136c:	200008dc 	.word	0x200008dc
 8001370:	20000328 	.word	0x20000328

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2234      	movs	r2, #52	; 0x34
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 fd8b 	bl	8008e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <SystemClock_Config+0xd0>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <SystemClock_Config+0xd0>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <SystemClock_Config+0xd0>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <SystemClock_Config+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a22      	ldr	r2, [pc, #136]	; (8001448 <SystemClock_Config+0xd4>)
 80013be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <SystemClock_Config+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e4:	2308      	movs	r3, #8
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80013e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ee:	2304      	movs	r3, #4
 80013f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013f2:	2308      	movs	r3, #8
 80013f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 f894 	bl	800452c <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800140a:	f000 fb6b 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2302      	movs	r3, #2
 8001414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	2103      	movs	r1, #3
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fc90 	bl	8003d50 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001436:	f000 fb55 	bl	8001ae4 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	; 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <MX_ADC1_Init+0xbc>)
 8001462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <MX_ADC1_Init+0xb8>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001474:	2201      	movs	r2, #1
 8001476:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_ADC1_Init+0xb8>)
 800147a:	2200      	movs	r2, #0
 800147c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001488:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001490:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_ADC1_Init+0xb8>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_ADC1_Init+0xb8>)
 800149e:	2202      	movs	r2, #2
 80014a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_ADC1_Init+0xb8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_ADC1_Init+0xb8>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <MX_ADC1_Init+0xb8>)
 80014b2:	f000 ff1d 	bl	80022f0 <HAL_ADC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80014bc:	f000 fb12 	bl	8001ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_ADC1_Init+0xb8>)
 80014d2:	f001 f96f 	bl	80027b4 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014dc:	f000 fb02 	bl	8001ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_ADC1_Init+0xb8>)
 80014ee:	f001 f961 	bl	80027b4 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80014f8:	f000 faf4 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200001f0 	.word	0x200001f0
 8001508:	40012000 	.word	0x40012000

0800150c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_TIM2_Init+0xe8>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_TIM2_Init+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_TIM2_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001564:	4823      	ldr	r0, [pc, #140]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001566:	f003 fa65 	bl	8004a34 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001570:	f000 fab8 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4619      	mov	r1, r3
 8001580:	481c      	ldr	r0, [pc, #112]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001582:	f003 ff51 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800158c:	f000 faaa 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001590:	4818      	ldr	r0, [pc, #96]	; (80015f4 <MX_TIM2_Init+0xe8>)
 8001592:	f003 fb3e 	bl	8004c12 <HAL_TIM_OC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800159c:	f000 faa2 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015a0:	2320      	movs	r3, #32
 80015a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	4619      	mov	r1, r3
 80015ae:	4811      	ldr	r0, [pc, #68]	; (80015f4 <MX_TIM2_Init+0xe8>)
 80015b0:	f004 fb30 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015ba:	f000 fa93 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015be:	2330      	movs	r3, #48	; 0x30
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM2_Init+0xe8>)
 80015d6:	f003 fecb 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015e0:	f000 fa80 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM2_Init+0xe8>)
 80015e6:	f000 fb67 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80015ea:	bf00      	nop
 80015ec:	3738      	adds	r7, #56	; 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000298 	.word	0x20000298

080015f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <MX_TIM3_Init+0xe4>)
 800162c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_TIM3_Init+0xe0>)
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_TIM3_Init+0xe0>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800163c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_TIM3_Init+0xe0>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164e:	4822      	ldr	r0, [pc, #136]	; (80016d8 <MX_TIM3_Init+0xe0>)
 8001650:	f003 f9f0 	bl	8004a34 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800165a:	f000 fa43 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001668:	4619      	mov	r1, r3
 800166a:	481b      	ldr	r0, [pc, #108]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800166c:	f003 fedc 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001676:	f000 fa35 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800167c:	f003 fac9 	bl	8004c12 <HAL_TIM_OC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001686:	f000 fa2d 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	4619      	mov	r1, r3
 8001698:	480f      	ldr	r0, [pc, #60]	; (80016d8 <MX_TIM3_Init+0xe0>)
 800169a:	f004 fabb 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016a4:	f000 fa1e 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80016ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_TIM3_Init+0xe0>)
 80016c2:	f003 fe55 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 fa0a 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	; 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002e0 	.word	0x200002e0
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART3_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART3_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART3_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART3_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART3_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART3_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART3_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART3_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART3_UART_Init+0x4c>)
 8001718:	f004 fb0c 	bl	8005d34 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f9df 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000328 	.word	0x20000328
 8001730:	40004800 	.word	0x40004800

08001734 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800173a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800173e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001742:	2206      	movs	r2, #6
 8001744:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001748:	2202      	movs	r2, #2
 800174a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001754:	2202      	movs	r2, #2
 8001756:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800175a:	2201      	movs	r2, #1
 800175c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800176c:	2201      	movs	r2, #1
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001772:	2201      	movs	r2, #1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800177e:	f002 f99e 	bl	8003abe <HAL_PCD_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001788:	f000 f9ac 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200003cc 	.word	0x200003cc

08001794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_DMA_Init+0x68>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <MX_DMA_Init+0x68>)
 80017a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_DMA_Init+0x68>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_DMA_Init+0x68>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <MX_DMA_Init+0x68>)
 80017c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <MX_DMA_Init+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	200e      	movs	r0, #14
 80017d8:	f001 fb71 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017dc:	200e      	movs	r0, #14
 80017de:	f001 fb8a 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2038      	movs	r0, #56	; 0x38
 80017e8:	f001 fb69 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017ec:	2038      	movs	r0, #56	; 0x38
 80017ee:	f001 fb82 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <MX_GPIO_Init+0x14c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a4b      	ldr	r2, [pc, #300]	; (800194c <MX_GPIO_Init+0x14c>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <MX_GPIO_Init+0x14c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <MX_GPIO_Init+0x14c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <MX_GPIO_Init+0x14c>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b42      	ldr	r3, [pc, #264]	; (800194c <MX_GPIO_Init+0x14c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <MX_GPIO_Init+0x14c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a3d      	ldr	r2, [pc, #244]	; (800194c <MX_GPIO_Init+0x14c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <MX_GPIO_Init+0x14c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <MX_GPIO_Init+0x14c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <MX_GPIO_Init+0x14c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_GPIO_Init+0x14c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <MX_GPIO_Init+0x14c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <MX_GPIO_Init+0x14c>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <MX_GPIO_Init+0x14c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_GPIO_Init+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <MX_GPIO_Init+0x14c>)
 80018ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_GPIO_Init+0x14c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f244 1181 	movw	r1, #16769	; 0x4181
 80018c4:	4822      	ldr	r0, [pc, #136]	; (8001950 <MX_GPIO_Init+0x150>)
 80018c6:	f002 f8c7 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	4821      	ldr	r0, [pc, #132]	; (8001954 <MX_GPIO_Init+0x154>)
 80018d0:	f002 f8c2 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	481b      	ldr	r0, [pc, #108]	; (8001958 <MX_GPIO_Init+0x158>)
 80018ec:	f001 ff20 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8;
 80018f0:	f244 1381 	movw	r3, #16769	; 0x4181
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_GPIO_Init+0x150>)
 800190a:	f001 ff11 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <MX_GPIO_Init+0x154>)
 8001926:	f001 ff03 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_GPIO_Init+0x154>)
 800193e:	f001 fef7 	bl	8003730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020400 	.word	0x40020400
 8001954:	40021800 	.word	0x40021800
 8001958:	40020800 	.word	0x40020800

0800195c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef * htim){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d109      	bne.n	8001980 <HAL_TIM_OC_DelayElapsedCallback+0x24>
		HAL_TIM_Base_Start_IT(&htim2);
 800196c:	4807      	ldr	r0, [pc, #28]	; (800198c <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 800196e:	f003 f8b1 	bl	8004ad4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001972:	2100      	movs	r1, #0
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8001976:	f003 f9a5 	bl	8004cc4 <HAL_TIM_OC_Start>
		freshCycle = 1;
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
	}
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002e0 	.word	0x200002e0
 800198c:	20000298 	.word	0x20000298
 8001990:	20008932 	.word	0x20008932

08001994 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d106      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_TIM_Base_Stop_IT(&htim2);
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019a6:	f003 f905 	bl	8004bb4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_1);
 80019aa:	2100      	movs	r1, #0
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019ae:	f003 fa51 	bl	8004e54 <HAL_TIM_OC_Stop>
	}
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002e0 	.word	0x200002e0
 80019c0:	20000298 	.word	0x20000298

080019c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80019cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d0:	482f      	ldr	r0, [pc, #188]	; (8001a90 <HAL_ADC_ConvCpltCallback+0xcc>)
 80019d2:	f002 f85a 	bl	8003a8a <HAL_GPIO_TogglePin>
	if(increment == 0 && freshCycle == 1){
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_ConvCpltCallback+0x28>
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_ADC_ConvCpltCallback+0xd4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_ADC_ConvCpltCallback+0x28>
		fillBuffer = 1;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_ADC_ConvCpltCallback+0xd8>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
	}
	freshCycle = 0;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_ADC_ConvCpltCallback+0xd4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
	if(increment < 2048 && fillBuffer){
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fa:	d240      	bcs.n	8001a7e <HAL_ADC_ConvCpltCallback+0xba>
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_ADC_ConvCpltCallback+0xd8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_ADC_ConvCpltCallback+0xba>
		float in1 = raw[0];
 8001a04:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a10:	edc7 7a03 	vstr	s15, [r7, #12]
		in1 = (in1-2048)/1000;
 8001a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a18:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001aa4 <HAL_ADC_ConvCpltCallback+0xe0>
 8001a1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a20:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001aa8 <HAL_ADC_ConvCpltCallback+0xe4>
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc7 7a03 	vstr	s15, [r7, #12]
		float in2 = raw[1];
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a2e:	885b      	ldrh	r3, [r3, #2]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a38:	edc7 7a02 	vstr	s15, [r7, #8]
		in2 = (in2-2048)/1000;
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001aa4 <HAL_ADC_ConvCpltCallback+0xe0>
 8001a44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a48:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001aa8 <HAL_ADC_ConvCpltCallback+0xe4>
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	edc7 7a02 	vstr	s15, [r7, #8]
		fftin[increment] = in1;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_ADC_ConvCpltCallback+0xe8>)
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	601a      	str	r2, [r3, #0]
		fftin1[increment] = in2;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	601a      	str	r2, [r3, #0]
		increment++;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a7a:	801a      	strh	r2, [r3, #0]
	if(increment < 2048 && fillBuffer){
 8001a7c:	e003      	b.n	8001a86 <HAL_ADC_ConvCpltCallback+0xc2>
	} else {
		fillBuffer = 0;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	if(transmitting == 0){
		sprintf(msg, "Potentiometer: %d Waveform: %d\r\n", raw[0], raw[1]);
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
		transmitting = 1;
	}*/
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40020400 	.word	0x40020400
 8001a94:	20008930 	.word	0x20008930
 8001a98:	20008932 	.word	0x20008932
 8001a9c:	20008933 	.word	0x20008933
 8001aa0:	200008d8 	.word	0x200008d8
 8001aa4:	45000000 	.word	0x45000000
 8001aa8:	447a0000 	.word	0x447a0000
 8001aac:	20000930 	.word	0x20000930
 8001ab0:	20004930 	.word	0x20004930

08001ab4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	transmitting = 0;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_UART_TxCpltCallback+0x28>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	timeUART = HAL_GetTick() - timeUART;
 8001ac2:	f000 fbe5 	bl	8002290 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_UART_TxCpltCallback+0x2c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_UART_TxCpltCallback+0x2c>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000092c 	.word	0x2000092c
 8001ae0:	20008950 	.word	0x20008950

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	e7fe      	b.n	8001aec <Error_Handler+0x8>
	...

08001af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_ADC_MspInit+0xec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d15f      	bne.n	8001c22 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_ADC_MspInit+0xf0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4821      	ldr	r0, [pc, #132]	; (8001c34 <HAL_ADC_MspInit+0xf4>)
 8001bae:	f001 fdbf 	bl	8003730 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_ADC_MspInit+0xfc>)
 8001bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001bf8:	f001 f998 	bl	8002f2c <HAL_DMA_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c02:	f7ff ff6f 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_ADC_MspInit+0xf8>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2012      	movs	r0, #18
 8001c18:	f001 f951 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c1c:	2012      	movs	r0, #18
 8001c1e:	f001 f96a 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012000 	.word	0x40012000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	20000238 	.word	0x20000238
 8001c3c:	40026410 	.word	0x40026410

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c6e:	e01a      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_TIM_Base_MspInit+0x74>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_TIM_Base_MspInit+0x70>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201d      	movs	r0, #29
 8001c9c:	f001 f90f 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca0:	201d      	movs	r0, #29
 8001ca2:	f001 f928 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d11d      	bne.n	8001d16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <HAL_TIM_MspPostInit+0x6c>)
 8001d12:	f001 fd0d 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a34      	ldr	r2, [pc, #208]	; (8001e18 <HAL_UART_MspInit+0xf0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d162      	bne.n	8001e10 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_UART_MspInit+0xf4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d94:	2307      	movs	r3, #7
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4820      	ldr	r0, [pc, #128]	; (8001e20 <HAL_UART_MspInit+0xf8>)
 8001da0:	f001 fcc6 	bl	8003730 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_UART_MspInit+0x100>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001de6:	f001 f8a1 	bl	8002f2c <HAL_DMA_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001df0:	f7ff fe78 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_UART_MspInit+0xfc>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	2027      	movs	r0, #39	; 0x27
 8001e06:	f001 f85a 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e0a:	2027      	movs	r0, #39	; 0x27
 8001e0c:	f001 f873 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	2000036c 	.word	0x2000036c
 8001e28:	40026058 	.word	0x40026058

08001e2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b098      	sub	sp, #96	; 0x60
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	223c      	movs	r2, #60	; 0x3c
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f007 f826 	bl	8008e9e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e5a:	d14d      	bne.n	8001ef8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 f991 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001e74:	f7ff fe36 	bl	8001ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e98:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <HAL_PCD_MspInit+0xd8>)
 8001eb2:	f001 fc3d 	bl	8003730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480e      	ldr	r0, [pc, #56]	; (8001f04 <HAL_PCD_MspInit+0xd8>)
 8001ecc:	f001 fc30 	bl	8003730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eda:	6353      	str	r3, [r2, #52]	; 0x34
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eea:	6453      	str	r3, [r2, #68]	; 0x44
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_PCD_MspInit+0xd4>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3760      	adds	r7, #96	; 0x60
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <NMI_Handler+0x4>

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 f988 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DMA1_Stream3_IRQHandler+0x10>)
 8001f62:	f001 f97b 	bl	800325c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000036c 	.word	0x2000036c

08001f70 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <ADC_IRQHandler+0x10>)
 8001f76:	f000 f9fe 	bl	8002376 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200001f0 	.word	0x200001f0

08001f84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM3_IRQHandler+0x10>)
 8001f8a:	f003 f8e9 	bl	8005160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200002e0 	.word	0x200002e0

08001f98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <USART3_IRQHandler+0x10>)
 8001f9e:	f003 ff95 	bl	8005ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000328 	.word	0x20000328

08001fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA2_Stream0_IRQHandler+0x10>)
 8001fb2:	f001 f953 	bl	800325c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000238 	.word	0x20000238

08001fc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return 1;
 8001fc4:	2301      	movs	r3, #1
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_kill>:

int _kill(int pid, int sig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fda:	f006 ffb3 	bl	8008f44 <__errno>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2216      	movs	r2, #22
 8001fe2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_exit>:

void _exit (int status)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ffe7 	bl	8001fd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002002:	e7fe      	b.n	8002002 <_exit+0x12>

08002004 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e00a      	b.n	800202c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002016:	f3af 8000 	nop.w
 800201a:	4601      	mov	r1, r0
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	60ba      	str	r2, [r7, #8]
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	dbf0      	blt.n	8002016 <_read+0x12>
  }

  return len;
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e009      	b.n	8002064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbf1      	blt.n	8002050 <_write+0x12>
  }
  return len;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_close>:

int _close(int file)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209e:	605a      	str	r2, [r3, #4]
  return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_isatty>:

int _isatty(int file)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f006 ff18 	bl	8008f44 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20040000 	.word	0x20040000
 8002140:	00000400 	.word	0x00000400
 8002144:	20008958 	.word	0x20008958
 8002148:	20008ab0 	.word	0x20008ab0

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480d      	ldr	r0, [pc, #52]	; (80021ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002176:	490e      	ldr	r1, [pc, #56]	; (80021b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800218c:	4c0b      	ldr	r4, [pc, #44]	; (80021bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219a:	f7ff ffd7 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f006 fed7 	bl	8008f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7fe ff4f 	bl	8001044 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021a8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021b4:	0801ee80 	.word	0x0801ee80
  ldr r2, =_sbss
 80021b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021bc:	20008aac 	.word	0x20008aac

080021c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <CAN1_RX0_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_Init+0x40>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_Init+0x40>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_Init+0x40>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fe5b 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f808 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fc7a 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fe73 	bl	8002f12 <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 fe3b 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	2000895c 	.word	0x2000895c

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	2000895c 	.word	0x2000895c

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e033      	b.n	800236e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fc16 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	f043 0202 	orr.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb58 	bl	80029f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
 800235e:	e001      	b.n	8002364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d049      	beq.n	8002440 <HAL_ADC_IRQHandler+0xca>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d046      	beq.n	8002440 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12b      	bne.n	8002430 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d127      	bne.n	8002430 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d119      	bne.n	8002430 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0220 	bic.w	r2, r2, #32
 800240a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fac7 	bl	80019c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f06f 0212 	mvn.w	r2, #18
 800243e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d057      	beq.n	8002506 <HAL_ADC_IRQHandler+0x190>
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d054      	beq.n	8002506 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d139      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800249a:	2b00      	cmp	r3, #0
 800249c:	d12b      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d124      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11d      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fbfc 	bl	8002cf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 020c 	mvn.w	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_ADC_IRQHandler+0x1d6>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10d      	bne.n	800254c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f925 	bl	800278c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0201 	mvn.w	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_ADC_IRQHandler+0x218>
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d012      	beq.n	800258e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0220 	mvn.w	r2, #32
 800257c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f90e 	bl	80027a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0220 	mvn.w	r2, #32
 800258c:	601a      	str	r2, [r3, #0]
  }
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Start_DMA+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0ce      	b.n	8002754 <HAL_ADC_Start_DMA+0x1bc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d018      	beq.n	80025fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025dc:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_ADC_Start_DMA+0x1c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_ADC_Start_DMA+0x1c8>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9a      	lsrs	r2, r3, #18
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d107      	bne.n	800261e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 8086 	bne.w	800273a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d106      	bne.n	800267c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f023 0206 	bic.w	r2, r3, #6
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
 800267a:	e002      	b.n	8002682 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_ADC_Start_DMA+0x1cc>)
 800268c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4a35      	ldr	r2, [pc, #212]	; (8002768 <HAL_ADC_Start_DMA+0x1d0>)
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_ADC_Start_DMA+0x1d4>)
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_ADC_Start_DMA+0x1d8>)
 80026a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	334c      	adds	r3, #76	; 0x4c
 80026da:	4619      	mov	r1, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f000 fcd2 	bl	8003088 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d129      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e020      	b.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_ADC_Start_DMA+0x1dc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11b      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d114      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00b      	b.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000000 	.word	0x20000000
 8002760:	431bde83 	.word	0x431bde83
 8002764:	40012300 	.word	0x40012300
 8002768:	08002bf1 	.word	0x08002bf1
 800276c:	08002cab 	.word	0x08002cab
 8002770:	08002cc7 	.word	0x08002cc7
 8002774:	40012000 	.word	0x40012000

08002778 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e105      	b.n	80029dc <HAL_ADC_ConfigChannel+0x228>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d925      	bls.n	800282c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43da      	mvns	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	4603      	mov	r3, r0
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4403      	add	r3, r0
 800281e:	3b1e      	subs	r3, #30
 8002820:	409a      	lsls	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e022      	b.n	8002872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	2207      	movs	r2, #7
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	4603      	mov	r3, r0
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	409a      	lsls	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d824      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b05      	subs	r3, #5
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	e04c      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b23      	subs	r3, #35	; 0x23
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43da      	mvns	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	400a      	ands	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	; 0x23
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
 8002914:	e023      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b41      	subs	r3, #65	; 0x41
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_ADC_ConfigChannel+0x234>)
 8002960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b12      	cmp	r3, #18
 8002972:	d105      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d123      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d003      	beq.n	800299a <HAL_ADC_ConfigChannel+0x1e6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b11      	cmp	r3, #17
 8002998:	d11b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_ADC_ConfigChannel+0x23c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_ADC_ConfigChannel+0x240>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9a      	lsrs	r2, r3, #18
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029c4:	e002      	b.n	80029cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	40012000 	.word	0x40012000
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a00:	4b79      	ldr	r3, [pc, #484]	; (8002be8 <ADC_Init+0x1f0>)
 8002a02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	4a58      	ldr	r2, [pc, #352]	; (8002bec <ADC_Init+0x1f4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e00f      	b.n	8002af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0202 	bic.w	r2, r2, #2
 8002b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6899      	ldr	r1, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	005a      	lsls	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	035a      	lsls	r2, r3, #13
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e007      	b.n	8002b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	051a      	lsls	r2, r3, #20
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bae:	025a      	lsls	r2, r3, #9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	029a      	lsls	r2, r3, #10
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40012300 	.word	0x40012300
 8002bec:	0f000001 	.word	0x0f000001

08002bf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d13c      	bne.n	8002c84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d127      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0220 	bic.w	r2, r2, #32
 8002c56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7fe fea1 	bl	80019c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c82:	e00e      	b.n	8002ca2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff fd85 	bl	80027a0 <HAL_ADC_ErrorCallback>
}
 8002c96:	e004      	b.n	8002ca2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fd5d 	bl	8002778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff fd5a 	bl	80027a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff3e 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff31 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa2 	bl	8002e64 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff f9aa 	bl	8002290 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e099      	b.n	800307c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f68:	e00f      	b.n	8002f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6a:	f7ff f991 	bl	8002290 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d908      	bls.n	8002f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e078      	b.n	800307c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e8      	bne.n	8002f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4b38      	ldr	r3, [pc, #224]	; (8003084 <HAL_DMA_Init+0x158>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d107      	bne.n	8002ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4313      	orrs	r3, r2
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0307 	bic.w	r3, r3, #7
 800300a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b04      	cmp	r3, #4
 800301c:	d117      	bne.n	800304e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb01 	bl	8003638 <DMA_CheckFifoParam>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800304a:	2301      	movs	r3, #1
 800304c:	e016      	b.n	800307c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fab8 	bl	80035cc <DMA_CalcBaseAndBitshift>
 800305c:	4603      	mov	r3, r0
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	223f      	movs	r2, #63	; 0x3f
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	f010803f 	.word	0xf010803f

08003088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Start_IT+0x26>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e040      	b.n	8003130 <HAL_DMA_Start_IT+0xa8>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d12f      	bne.n	8003122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa4a 	bl	8003570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	223f      	movs	r2, #63	; 0x3f
 80030e2:	409a      	lsls	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0216 	orr.w	r2, r2, #22
 80030f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0208 	orr.w	r2, r2, #8
 800310e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e005      	b.n	800312e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800312a:	2302      	movs	r3, #2
 800312c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003146:	f7ff f8a3 	bl	8002290 <HAL_GetTick>
 800314a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d008      	beq.n	800316a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e052      	b.n	8003210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0216 	bic.w	r2, r2, #22
 8003178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_DMA_Abort+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0208 	bic.w	r2, r2, #8
 80031a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ba:	e013      	b.n	80031e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031bc:	f7ff f868 	bl	8002290 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d90c      	bls.n	80031e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2203      	movs	r2, #3
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e015      	b.n	8003210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e4      	bne.n	80031bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	223f      	movs	r2, #63	; 0x3f
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d004      	beq.n	8003236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00c      	b.n	8003250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2205      	movs	r2, #5
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003268:	4b8e      	ldr	r3, [pc, #568]	; (80034a4 <HAL_DMA_IRQHandler+0x248>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a8e      	ldr	r2, [pc, #568]	; (80034a8 <HAL_DMA_IRQHandler+0x24c>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2208      	movs	r2, #8
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01a      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2208      	movs	r2, #8
 80032b6:	409a      	lsls	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2201      	movs	r2, #1
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2204      	movs	r2, #4
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2210      	movs	r2, #16
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d043      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03c      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2210      	movs	r2, #16
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d018      	beq.n	800339e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d024      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
 800338a:	e01f      	b.n	80033cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e016      	b.n	80033cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0208 	bic.w	r2, r2, #8
 80033ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2220      	movs	r2, #32
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 808f 	beq.w	80034fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8087 	beq.w	80034fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	2220      	movs	r2, #32
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b05      	cmp	r3, #5
 8003404:	d136      	bne.n	8003474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0216 	bic.w	r2, r2, #22
 8003414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_DMA_IRQHandler+0x1da>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0208 	bic.w	r2, r2, #8
 8003444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	223f      	movs	r2, #63	; 0x3f
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	2b00      	cmp	r3, #0
 8003468:	d07e      	beq.n	8003568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
        }
        return;
 8003472:	e079      	b.n	8003568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01d      	beq.n	80034be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	2b00      	cmp	r3, #0
 8003496:	d031      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e02c      	b.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000
 80034a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d023      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e01e      	b.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0210 	bic.w	r2, r2, #16
 80034da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	2b00      	cmp	r3, #0
 8003502:	d032      	beq.n	800356a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d022      	beq.n	8003556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2205      	movs	r2, #5
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d307      	bcc.n	8003544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_DMA_IRQHandler+0x2cc>
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003568:	bf00      	nop
    }
  }
}
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800358c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d108      	bne.n	80035b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ae:	e007      	b.n	80035c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3b10      	subs	r3, #16
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <DMA_CalcBaseAndBitshift+0x64>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <DMA_CalcBaseAndBitshift+0x68>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d909      	bls.n	800360e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	; 0x58
 800360c:	e007      	b.n	800361e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	aaaaaaab 	.word	0xaaaaaaab
 8003634:	0800b628 	.word	0x0800b628

08003638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11f      	bne.n	8003692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d856      	bhi.n	8003706 <DMA_CheckFifoParam+0xce>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <DMA_CheckFifoParam+0x28>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003683 	.word	0x08003683
 8003668:	08003671 	.word	0x08003671
 800366c:	08003707 	.word	0x08003707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d046      	beq.n	800370a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e043      	b.n	800370a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368a:	d140      	bne.n	800370e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003690:	e03d      	b.n	800370e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	d121      	bne.n	80036e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d837      	bhi.n	8003712 <DMA_CheckFifoParam+0xda>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <DMA_CheckFifoParam+0x70>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036bf 	.word	0x080036bf
 80036b0:	080036b9 	.word	0x080036b9
 80036b4:	080036d1 	.word	0x080036d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e030      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ce:	e022      	b.n	8003716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036d8:	d11f      	bne.n	800371a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036de:	e01c      	b.n	800371a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d903      	bls.n	80036ee <DMA_CheckFifoParam+0xb6>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d003      	beq.n	80036f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ec:	e018      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      break;
 80036f2:	e015      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e00b      	b.n	800371e <DMA_CheckFifoParam+0xe6>
      break;
 8003706:	bf00      	nop
 8003708:	e00a      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
 800370c:	e008      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e006      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e004      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e002      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;   
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
    }
  } 
  
  return status; 
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e165      	b.n	8003a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	429a      	cmp	r2, r3
 8003766:	f040 8154 	bne.w	8003a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d005      	beq.n	8003782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377e:	2b02      	cmp	r3, #2
 8003780:	d130      	bne.n	80037e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0201 	and.w	r2, r3, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d017      	beq.n	8003820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d123      	bne.n	8003874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	08da      	lsrs	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3208      	adds	r2, #8
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	08da      	lsrs	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3208      	adds	r2, #8
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80ae 	beq.w	8003a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d2:	4a58      	ldr	r2, [pc, #352]	; (8003a34 <HAL_GPIO_Init+0x304>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4f      	ldr	r2, [pc, #316]	; (8003a38 <HAL_GPIO_Init+0x308>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d025      	beq.n	800394a <HAL_GPIO_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <HAL_GPIO_Init+0x30c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01f      	beq.n	8003946 <HAL_GPIO_Init+0x216>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_GPIO_Init+0x310>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d019      	beq.n	8003942 <HAL_GPIO_Init+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <HAL_GPIO_Init+0x314>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_GPIO_Init+0x20e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_GPIO_Init+0x318>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_GPIO_Init+0x20a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <HAL_GPIO_Init+0x31c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <HAL_GPIO_Init+0x206>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <HAL_GPIO_Init+0x320>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_GPIO_Init+0x202>
 800392e:	2306      	movs	r3, #6
 8003930:	e00c      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003932:	2307      	movs	r3, #7
 8003934:	e00a      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003936:	2305      	movs	r3, #5
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393a:	2304      	movs	r3, #4
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x21c>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x21c>
 800394a:	2300      	movs	r3, #0
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f002 0203 	and.w	r2, r2, #3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	; (8003a34 <HAL_GPIO_Init+0x304>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396a:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <HAL_GPIO_Init+0x324>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398e:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e2:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_GPIO_Init+0x324>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	f67f ae96 	bls.w	800374c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021800 	.word	0x40021800
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	041a      	lsls	r2, r3, #16
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	400b      	ands	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac0:	b08f      	sub	sp, #60	; 0x3c
 8003ac2:	af0a      	add	r7, sp, #40	; 0x28
 8003ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e116      	b.n	8003cfe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe f99e 	bl	8001e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 f9d1 	bl	8006eb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	687e      	ldr	r6, [r7, #4]
 8003b1c:	466d      	mov	r5, sp
 8003b1e:	f106 0410 	add.w	r4, r6, #16
 8003b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b32:	1d33      	adds	r3, r6, #4
 8003b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f003 f95c 	bl	8006df4 <USB_CoreInit>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0d7      	b.n	8003cfe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 f9bf 	bl	8006ed8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e04a      	b.n	8003bf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333d      	adds	r3, #61	; 0x3d
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	333c      	adds	r3, #60	; 0x3c
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	b298      	uxth	r0, r3
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3344      	adds	r3, #68	; 0x44
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3340      	adds	r3, #64	; 0x40
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3348      	adds	r3, #72	; 0x48
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	334c      	adds	r3, #76	; 0x4c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3354      	adds	r3, #84	; 0x54
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3af      	bcc.n	8003b60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e044      	b.n	8003c90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3b5      	bcc.n	8003c06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	687e      	ldr	r6, [r7, #4]
 8003ca2:	466d      	mov	r5, sp
 8003ca4:	f106 0410 	add.w	r4, r6, #16
 8003ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb8:	1d33      	adds	r3, r6, #4
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	f003 f957 	bl	8006f70 <USB_DevInit>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e014      	b.n	8003cfe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d102      	bne.n	8003cf2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f80a 	bl	8003d06 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fb15 	bl	8007326 <USB_DevDisconnect>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	f043 0303 	orr.w	r3, r3, #3
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0cc      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d90c      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b65      	ldr	r3, [pc, #404]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b8      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	494d      	ldr	r1, [pc, #308]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d044      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d119      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e067      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4934      	ldr	r1, [pc, #208]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e40:	f7fe fa26 	bl	8002290 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fe fa22 	bl	8002290 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e04f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20c      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e032      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4916      	ldr	r1, [pc, #88]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed6:	f000 f821 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490a      	ldr	r1, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe f986 	bl	8002208 <HAL_InitTick>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023c00 	.word	0x40023c00
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	0800b610 	.word	0x0800b610
 8003f14:	20000000 	.word	0x20000000
 8003f18:	20000004 	.word	0x20000004

08003f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b094      	sub	sp, #80	; 0x50
 8003f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
 8003f28:	2300      	movs	r3, #0
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f34:	4b79      	ldr	r3, [pc, #484]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d00d      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x40>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	f200 80e1 	bhi.w	8004108 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x34>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4e:	e0db      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b73      	ldr	r3, [pc, #460]	; (8004120 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f54:	e0db      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f5a:	e0d8      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f5c:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f66:	4b6d      	ldr	r3, [pc, #436]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d063      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	2200      	movs	r2, #0
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
 8003f86:	2300      	movs	r3, #0
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	1a51      	subs	r1, r2, r1
 8003faa:	6139      	str	r1, [r7, #16]
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	018b      	lsls	r3, r1, #6
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fca:	4651      	mov	r1, sl
 8003fcc:	018a      	lsls	r2, r1, #6
 8003fce:	4651      	mov	r1, sl
 8003fd0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fee:	4690      	mov	r8, r2
 8003ff0:	4699      	mov	r9, r3
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	eb18 0303 	adds.w	r3, r8, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	eb49 0303 	adc.w	r3, r9, r3
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800400e:	4629      	mov	r1, r5
 8004010:	024b      	lsls	r3, r1, #9
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004018:	4621      	mov	r1, r4
 800401a:	024a      	lsls	r2, r1, #9
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	2200      	movs	r2, #0
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402c:	f7fc fe8c 	bl	8000d48 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	e058      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	2200      	movs	r2, #0
 8004042:	4618      	mov	r0, r3
 8004044:	4611      	mov	r1, r2
 8004046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	f04f 0000 	mov.w	r0, #0
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	0159      	lsls	r1, r3, #5
 8004062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004066:	0150      	lsls	r0, r2, #5
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4641      	mov	r1, r8
 800406e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb63 0b01 	sbc.w	fp, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800408c:	ebb2 040a 	subs.w	r4, r2, sl
 8004090:	eb63 050b 	sbc.w	r5, r3, fp
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	00eb      	lsls	r3, r5, #3
 800409e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a2:	00e2      	lsls	r2, r4, #3
 80040a4:	4614      	mov	r4, r2
 80040a6:	461d      	mov	r5, r3
 80040a8:	4643      	mov	r3, r8
 80040aa:	18e3      	adds	r3, r4, r3
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	464b      	mov	r3, r9
 80040b0:	eb45 0303 	adc.w	r3, r5, r3
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040c2:	4629      	mov	r1, r5
 80040c4:	028b      	lsls	r3, r1, #10
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040cc:	4621      	mov	r1, r4
 80040ce:	028a      	lsls	r2, r1, #10
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d6:	2200      	movs	r2, #0
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	61fa      	str	r2, [r7, #28]
 80040dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e0:	f7fc fe32 	bl	8000d48 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4613      	mov	r3, r2
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	3301      	adds	r3, #1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004106:	e002      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetSysClockFreq+0x204>)
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004110:	4618      	mov	r0, r3
 8004112:	3750      	adds	r7, #80	; 0x50
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400
 8004124:	007a1200 	.word	0x007a1200

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff0 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	0800b620 	.word	0x0800b620

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800416c:	f7ff ffdc 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0b5b      	lsrs	r3, r3, #13
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	0800b620 	.word	0x0800b620

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80041b0:	4b87      	ldr	r3, [pc, #540]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4984      	ldr	r1, [pc, #528]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	4978      	ldr	r1, [pc, #480]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8083 	beq.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800422a:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a69      	ldr	r2, [pc, #420]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004236:	f7fe f82b 	bl	8002290 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fe f827 	bl	8002290 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e162      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004250:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800425c:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02f      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	429a      	cmp	r2, r3
 8004278:	d028      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427a:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004284:	4b54      	ldr	r3, [pc, #336]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004290:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004296:	4b4e      	ldr	r3, [pc, #312]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d114      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fd fff5 	bl	8002290 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd fff1 	bl	8002290 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e12a      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ee      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d8:	d10d      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ee:	4938      	ldr	r1, [pc, #224]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
 80042f4:	e005      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004300:	6093      	str	r3, [r2, #8]
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430e:	4930      	ldr	r1, [pc, #192]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004310:	4313      	orrs	r3, r2
 8004312:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004328:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4922      	ldr	r1, [pc, #136]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d011      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	491a      	ldr	r1, [pc, #104]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004376:	d101      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	490e      	ldr	r1, [pc, #56]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d004      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	f040 8091 	bne.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fd ff6c 	bl	8002290 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ba:	e013      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043bc:	f7fd ff68 	bl	8002290 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d90c      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0a3      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42470e40 	.word	0x42470e40
 80043dc:	424711e0 	.word	0x424711e0
 80043e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e4:	4b4e      	ldr	r3, [pc, #312]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80043f0:	4a4c      	ldr	r2, [pc, #304]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d023      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d019      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d115      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004452:	d110      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	071b      	lsls	r3, r3, #28
 800446e:	492c      	ldr	r1, [pc, #176]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	019b      	lsls	r3, r3, #6
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	4920      	ldr	r1, [pc, #128]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044aa:	f7fd fef1 	bl	8002290 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044b2:	f7fd feed 	bl	8002290 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e028      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044c4:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80044de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004504:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4904      	ldr	r1, [pc, #16]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	424710d8 	.word	0x424710d8
 8004528:	42470068 	.word	0x42470068

0800452c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e273      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d075      	beq.n	8004636 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCC_OscConfig+0x240>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b04      	cmp	r3, #4
 8004554:	d00c      	beq.n	8004570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004556:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800455e:	2b08      	cmp	r3, #8
 8004560:	d112      	bne.n	8004588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	4b82      	ldr	r3, [pc, #520]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456e:	d10b      	bne.n	8004588 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	4b7e      	ldr	r3, [pc, #504]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05b      	beq.n	8004634 <HAL_RCC_OscConfig+0x108>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d157      	bne.n	8004634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e24e      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x74>
 8004592:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a75      	ldr	r2, [pc, #468]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e01d      	b.n	80045dc <HAL_RCC_OscConfig+0xb0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x98>
 80045aa:	4b70      	ldr	r3, [pc, #448]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6f      	ldr	r2, [pc, #444]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b6d      	ldr	r3, [pc, #436]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6c      	ldr	r2, [pc, #432]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0xb0>
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a68      	ldr	r2, [pc, #416]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b66      	ldr	r3, [pc, #408]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a65      	ldr	r2, [pc, #404]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fe54 	bl	8002290 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd fe50 	bl	8002290 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e213      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b5b      	ldr	r3, [pc, #364]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0xc0>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fe40 	bl	8002290 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fe3c 	bl	8002290 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1ff      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004626:	4b51      	ldr	r3, [pc, #324]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0xe8>
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004642:	4b4a      	ldr	r3, [pc, #296]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004656:	2b08      	cmp	r3, #8
 8004658:	d11c      	bne.n	8004694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b44      	ldr	r3, [pc, #272]	; (800476c <HAL_RCC_OscConfig+0x240>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_RCC_OscConfig+0x152>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e1d3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4937      	ldr	r1, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x240>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	e03a      	b.n	800470a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x244>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fd fdf5 	bl	8002290 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046aa:	f7fd fdf1 	bl	8002290 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1b4      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4925      	ldr	r1, [pc, #148]	; (800476c <HAL_RCC_OscConfig+0x240>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_OscConfig+0x244>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fdd4 	bl	8002290 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ec:	f7fd fdd0 	bl	8002290 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e193      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d036      	beq.n	8004784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_RCC_OscConfig+0x248>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd fdb4 	bl	8002290 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd fdb0 	bl	8002290 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e173      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_OscConfig+0x240>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x200>
 800474a:	e01b      	b.n	8004784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_RCC_OscConfig+0x248>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004752:	f7fd fd9d 	bl	8002290 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	e00e      	b.n	8004778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475a:	f7fd fd99 	bl	8002290 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d907      	bls.n	8004778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e15c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
 800476c:	40023800 	.word	0x40023800
 8004770:	42470000 	.word	0x42470000
 8004774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	4b8a      	ldr	r3, [pc, #552]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ea      	bne.n	800475a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8097 	beq.w	80048c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4b83      	ldr	r3, [pc, #524]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b79      	ldr	r3, [pc, #484]	; (80049a8 <HAL_RCC_OscConfig+0x47c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ce:	4b76      	ldr	r3, [pc, #472]	; (80049a8 <HAL_RCC_OscConfig+0x47c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a75      	ldr	r2, [pc, #468]	; (80049a8 <HAL_RCC_OscConfig+0x47c>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fd fd59 	bl	8002290 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fd fd55 	bl	8002290 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e118      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	4b6c      	ldr	r3, [pc, #432]	; (80049a8 <HAL_RCC_OscConfig+0x47c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x2ea>
 8004808:	4b66      	ldr	r3, [pc, #408]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	4a65      	ldr	r2, [pc, #404]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	; 0x70
 8004814:	e01c      	b.n	8004850 <HAL_RCC_OscConfig+0x324>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x30c>
 800481e:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a60      	ldr	r2, [pc, #384]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
 800482a:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5d      	ldr	r2, [pc, #372]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x324>
 8004838:	4b5a      	ldr	r3, [pc, #360]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a59      	ldr	r2, [pc, #356]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd fd1a 	bl	8002290 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd fd16 	bl	8002290 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0d7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ee      	beq.n	8004860 <HAL_RCC_OscConfig+0x334>
 8004882:	e014      	b.n	80048ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd fd04 	bl	8002290 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fd fd00 	bl	8002290 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0c1      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ee      	bne.n	800488c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4a3a      	ldr	r2, [pc, #232]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80048ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80ad 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d060      	beq.n	8004998 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d145      	bne.n	800496a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b33      	ldr	r3, [pc, #204]	; (80049ac <HAL_RCC_OscConfig+0x480>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fcd4 	bl	8002290 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fcd0 	bl	8002290 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e093      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	491b      	ldr	r1, [pc, #108]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x480>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fd fca5 	bl	8002290 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494a:	f7fd fca1 	bl	8002290 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e064      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x41e>
 8004968:	e05c      	b.n	8004a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <HAL_RCC_OscConfig+0x480>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fc8e 	bl	8002290 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fc8a 	bl	8002290 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e04d      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_OscConfig+0x478>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x44c>
 8004996:	e045      	b.n	8004a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e040      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000
 80049ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_RCC_OscConfig+0x504>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d030      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d129      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d122      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d119      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d10f      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e041      	b.n	8004aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd f8f0 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 fdbe 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e04e      	b.n	8004b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d01d      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a19      	ldr	r2, [pc, #100]	; (8004bac <HAL_TIM_Base_Start_IT+0xd8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d010      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	e007      	b.n	8004b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40001800 	.word	0x40001800

08004bb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <HAL_TIM_Base_Stop_IT+0x48>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	f240 4344 	movw	r3, #1092	; 0x444
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_Base_Stop_IT+0x48>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e041      	b.n	8004ca8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f839 	bl	8004cb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f000 fccf 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_TIM_OC_Start+0x24>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e022      	b.n	8004d2e <HAL_TIM_OC_Start+0x6a>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d109      	bne.n	8004d02 <HAL_TIM_OC_Start+0x3e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	e015      	b.n	8004d2e <HAL_TIM_OC_Start+0x6a>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d109      	bne.n	8004d1c <HAL_TIM_OC_Start+0x58>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e008      	b.n	8004d2e <HAL_TIM_OC_Start+0x6a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e07c      	b.n	8004e30 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_OC_Start+0x82>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	e013      	b.n	8004d6e <HAL_TIM_OC_Start+0xaa>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_OC_Start+0x92>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	e00b      	b.n	8004d6e <HAL_TIM_OC_Start+0xaa>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_OC_Start+0xa2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	e003      	b.n	8004d6e <HAL_TIM_OC_Start+0xaa>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 ff26 	bl	8005bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_TIM_OC_Start+0x174>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_OC_Start+0xcc>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <HAL_TIM_OC_Start+0x178>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_OC_Start+0xd0>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_TIM_OC_Start+0xd2>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <HAL_TIM_OC_Start+0x174>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d01d      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_TIM_OC_Start+0x17c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_TIM_OC_Start+0x180>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_TIM_OC_Start+0x184>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_TIM_OC_Start+0x178>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_TIM_OC_Start+0x188>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_OC_Start+0x136>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <HAL_TIM_OC_Start+0x18c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b06      	cmp	r3, #6
 8004e0a:	d010      	beq.n	8004e2e <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	e007      	b.n	8004e2e <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40001800 	.word	0x40001800

08004e54 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 feae 	bl	8005bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2e      	ldr	r2, [pc, #184]	; (8004f2c <HAL_TIM_OC_Stop+0xd8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_OC_Stop+0x2c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2d      	ldr	r2, [pc, #180]	; (8004f30 <HAL_TIM_OC_Stop+0xdc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIM_OC_Stop+0x30>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_TIM_OC_Stop+0x32>
 8004e84:	2300      	movs	r3, #0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_TIM_OC_Stop+0x66>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_OC_Stop+0x66>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <HAL_TIM_OC_Stop+0x96>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_OC_Stop+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_OC_Stop+0xa6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef8:	e013      	b.n	8004f22 <HAL_TIM_OC_Stop+0xce>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_OC_Stop+0xb6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f08:	e00b      	b.n	8004f22 <HAL_TIM_OC_Stop+0xce>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_OC_Stop+0xc6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_OC_Stop+0xce>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_TIM_OC_Start_IT+0x28>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e022      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0x6e>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d109      	bne.n	8004f76 <HAL_TIM_OC_Start_IT+0x42>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e015      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0x6e>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d109      	bne.n	8004f90 <HAL_TIM_OC_Start_IT+0x5c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e008      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0x6e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0c7      	b.n	800513a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_OC_Start_IT+0x86>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb8:	e013      	b.n	8004fe2 <HAL_TIM_OC_Start_IT+0xae>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_OC_Start_IT+0x96>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_OC_Start_IT+0xae>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_OC_Start_IT+0xa6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_OC_Start_IT+0xae>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	d841      	bhi.n	800506c <HAL_TIM_OC_Start_IT+0x138>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <HAL_TIM_OC_Start_IT+0xbc>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	0800506d 	.word	0x0800506d
 8004ff8:	0800506d 	.word	0x0800506d
 8004ffc:	0800506d 	.word	0x0800506d
 8005000:	08005037 	.word	0x08005037
 8005004:	0800506d 	.word	0x0800506d
 8005008:	0800506d 	.word	0x0800506d
 800500c:	0800506d 	.word	0x0800506d
 8005010:	08005049 	.word	0x08005049
 8005014:	0800506d 	.word	0x0800506d
 8005018:	0800506d 	.word	0x0800506d
 800501c:	0800506d 	.word	0x0800506d
 8005020:	0800505b 	.word	0x0800505b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0202 	orr.w	r2, r2, #2
 8005032:	60da      	str	r2, [r3, #12]
      break;
 8005034:	e01d      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0204 	orr.w	r2, r2, #4
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e014      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	60da      	str	r2, [r3, #12]
      break;
 8005058:	e00b      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0210 	orr.w	r2, r2, #16
 8005068:	60da      	str	r2, [r3, #12]
      break;
 800506a:	e002      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	bf00      	nop
  }

  if (status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d15f      	bne.n	8005138 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2201      	movs	r2, #1
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fda1 	bl	8005bc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2e      	ldr	r2, [pc, #184]	; (8005144 <HAL_TIM_OC_Start_IT+0x210>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIM_OC_Start_IT+0x166>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <HAL_TIM_OC_Start_IT+0x214>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_TIM_OC_Start_IT+0x16a>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_TIM_OC_Start_IT+0x16c>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_TIM_OC_Start_IT+0x210>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d01d      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_TIM_OC_Start_IT+0x218>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_TIM_OC_Start_IT+0x21c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIM_OC_Start_IT+0x220>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <HAL_TIM_OC_Start_IT+0x214>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_TIM_OC_Start_IT+0x224>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0x1d0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a17      	ldr	r2, [pc, #92]	; (800515c <HAL_TIM_OC_Start_IT+0x228>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d111      	bne.n	8005128 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b06      	cmp	r3, #6
 8005114:	d010      	beq.n	8005138 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	e007      	b.n	8005138 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40010400 	.word	0x40010400
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800

08005160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0202 	mvn.w	r2, #2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa07 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc fbd6 	bl	800195c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa0a 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0204 	mvn.w	r2, #4
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f9dd 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc fbac 	bl	800195c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9e0 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9b3 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fb82 	bl	800195c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9b6 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0210 	mvn.w	r2, #16
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2208      	movs	r2, #8
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f989 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fc fb58 	bl	800195c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f98c 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0201 	mvn.w	r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fb58 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd08 	bl	8005d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d10e      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d107      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f951 	bl	80055de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b20      	cmp	r3, #32
 8005356:	d107      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0220 	mvn.w	r2, #32
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fcd2 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_TIM_OC_ConfigChannel+0x1e>
 800538a:	2302      	movs	r3, #2
 800538c:	e048      	b.n	8005420 <HAL_TIM_OC_ConfigChannel+0xb0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d839      	bhi.n	8005410 <HAL_TIM_OC_ConfigChannel+0xa0>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	08005411 	.word	0x08005411
 80053ac:	08005411 	.word	0x08005411
 80053b0:	08005411 	.word	0x08005411
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005411 	.word	0x08005411
 80053c0:	08005411 	.word	0x08005411
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005411 	.word	0x08005411
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005403 	.word	0x08005403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f9a8 	bl	8005734 <TIM_OC1_SetConfig>
      break;
 80053e4:	e017      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa11 	bl	8005814 <TIM_OC2_SetConfig>
      break;
 80053f2:	e010      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa80 	bl	8005900 <TIM_OC3_SetConfig>
      break;
 8005400:	e009      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 faed 	bl	80059e8 <TIM_OC4_SetConfig>
      break;
 800540e:	e002      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b4      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x186>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547c:	d03e      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0xd4>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	f200 8087 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	f000 8086 	beq.w	800559a <HAL_TIM_ConfigClockSource+0x172>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d87f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b70      	cmp	r3, #112	; 0x70
 8005496:	d01a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0xa6>
 8005498:	2b70      	cmp	r3, #112	; 0x70
 800549a:	d87b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d050      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x11a>
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d877      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b50      	cmp	r3, #80	; 0x50
 80054a6:	d03c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0xfa>
 80054a8:	2b50      	cmp	r3, #80	; 0x50
 80054aa:	d873      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d058      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x13a>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d86f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d064      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d86b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d060      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d867      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d05a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	e062      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f000 fb53 	bl	8005b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      break;
 80054fa:	e04f      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f000 fb3c 	bl	8005b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e03c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fab0 	bl	8005a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2150      	movs	r1, #80	; 0x50
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb09 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005540:	e02c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	461a      	mov	r2, r3
 8005550:	f000 facf 	bl	8005af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2160      	movs	r1, #96	; 0x60
 800555a:	4618      	mov	r0, r3
 800555c:	f000 faf9 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005560:	e01c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fa90 	bl	8005a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fae9 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005580:	e00c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fae0 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005592:	e003      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800559a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a40      	ldr	r2, [pc, #256]	; (8005708 <TIM_Base_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d00f      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a3d      	ldr	r2, [pc, #244]	; (800570c <TIM_Base_SetConfig+0x118>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a3c      	ldr	r2, [pc, #240]	; (8005710 <TIM_Base_SetConfig+0x11c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a3b      	ldr	r2, [pc, #236]	; (8005714 <TIM_Base_SetConfig+0x120>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a3a      	ldr	r2, [pc, #232]	; (8005718 <TIM_Base_SetConfig+0x124>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d108      	bne.n	8005646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <TIM_Base_SetConfig+0x114>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d027      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <TIM_Base_SetConfig+0x118>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d023      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a2b      	ldr	r2, [pc, #172]	; (8005710 <TIM_Base_SetConfig+0x11c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01f      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <TIM_Base_SetConfig+0x120>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a29      	ldr	r2, [pc, #164]	; (8005718 <TIM_Base_SetConfig+0x124>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d017      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a28      	ldr	r2, [pc, #160]	; (800571c <TIM_Base_SetConfig+0x128>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a27      	ldr	r2, [pc, #156]	; (8005720 <TIM_Base_SetConfig+0x12c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a26      	ldr	r2, [pc, #152]	; (8005724 <TIM_Base_SetConfig+0x130>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a25      	ldr	r2, [pc, #148]	; (8005728 <TIM_Base_SetConfig+0x134>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a24      	ldr	r2, [pc, #144]	; (800572c <TIM_Base_SetConfig+0x138>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a23      	ldr	r2, [pc, #140]	; (8005730 <TIM_Base_SetConfig+0x13c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <TIM_Base_SetConfig+0x114>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <TIM_Base_SetConfig+0x124>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d103      	bne.n	80056f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	615a      	str	r2, [r3, #20]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40010400 	.word	0x40010400
 800571c:	40014000 	.word	0x40014000
 8005720:	40014400 	.word	0x40014400
 8005724:	40014800 	.word	0x40014800
 8005728:	40001800 	.word	0x40001800
 800572c:	40001c00 	.word	0x40001c00
 8005730:	40002000 	.word	0x40002000

08005734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 0302 	bic.w	r3, r3, #2
 800577c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a20      	ldr	r2, [pc, #128]	; (800580c <TIM_OC1_SetConfig+0xd8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC1_SetConfig+0x64>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <TIM_OC1_SetConfig+0xdc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10c      	bne.n	80057b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0308 	bic.w	r3, r3, #8
 800579e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC1_SetConfig+0xd8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <TIM_OC1_SetConfig+0x8e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <TIM_OC1_SetConfig+0xdc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d111      	bne.n	80057e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40010000 	.word	0x40010000
 8005810:	40010400 	.word	0x40010400

08005814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0210 	bic.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 0320 	bic.w	r3, r3, #32
 800585e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a22      	ldr	r2, [pc, #136]	; (80058f8 <TIM_OC2_SetConfig+0xe4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_OC2_SetConfig+0x68>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a21      	ldr	r2, [pc, #132]	; (80058fc <TIM_OC2_SetConfig+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d10d      	bne.n	8005898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <TIM_OC2_SetConfig+0xe4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC2_SetConfig+0x94>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a16      	ldr	r2, [pc, #88]	; (80058fc <TIM_OC2_SetConfig+0xe8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d113      	bne.n	80058d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400

08005900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <TIM_OC3_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC3_SetConfig+0x66>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <TIM_OC3_SetConfig+0xe4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10d      	bne.n	8005982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800596c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <TIM_OC3_SetConfig+0xe0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC3_SetConfig+0x92>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <TIM_OC3_SetConfig+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40010400 	.word	0x40010400

080059e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <TIM_OC4_SetConfig+0xa4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC4_SetConfig+0x68>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <TIM_OC4_SetConfig+0xa8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d109      	bne.n	8005a64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	019b      	lsls	r3, r3, #6
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40010400 	.word	0x40010400

08005a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 030a 	bic.w	r3, r3, #10
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0210 	bic.w	r2, r3, #16
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	031b      	lsls	r3, r3, #12
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f043 0307 	orr.w	r3, r3, #7
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	021a      	lsls	r2, r3, #8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2201      	movs	r2, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	401a      	ands	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e05a      	b.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d01d      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1b      	ldr	r2, [pc, #108]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40001800 	.word	0x40001800

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e03f      	b.n	8005dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb ffe4 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2224      	movs	r2, #36	; 0x24
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fdc7 	bl	800690c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d165      	bne.n	8005eb6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_Transmit_DMA+0x26>
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e05e      	b.n	8005eb8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Transmit_DMA+0x38>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e057      	b.n	8005eb8 <HAL_UART_Transmit_DMA+0xe8>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2221      	movs	r2, #33	; 0x21
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <HAL_UART_Transmit_DMA+0xf0>)
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_UART_Transmit_DMA+0xf4>)
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <HAL_UART_Transmit_DMA+0xf8>)
 8005e46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3304      	adds	r3, #4
 8005e64:	461a      	mov	r2, r3
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	f7fd f90e 	bl	8003088 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ea0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6a39      	ldr	r1, [r7, #32]
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e5      	bne.n	8005e7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3730      	adds	r7, #48	; 0x30
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	0800643d 	.word	0x0800643d
 8005ec4:	080064d7 	.word	0x080064d7
 8005ec8:	080064f3 	.word	0x080064f3

08005ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0ba      	sub	sp, #232	; 0xe8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc32 	bl	8006794 <UART_Receive_IT>
      return;
 8005f30:	e256      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80de 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80d1 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0208 	orr.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 81ed 	beq.w	80063d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fbbd 	bl	8006794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <HAL_UART_IRQHandler+0x17a>
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04f      	beq.n	80060e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fac5 	bl	80065d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d141      	bne.n	80060de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800609e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1d9      	bne.n	800605a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	4a7d      	ldr	r2, [pc, #500]	; (80062a8 <HAL_UART_IRQHandler+0x3dc>)
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd f8ac 	bl	8003218 <HAL_DMA_Abort_IT>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e00e      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f99a 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e00a      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f996 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e006      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f992 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060f2:	e170      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	bf00      	nop
    return;
 80060f6:	e16e      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 814a 	bne.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8143 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 813c 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	f040 80b4 	bne.w	80062ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8140 	beq.w	80063da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800615e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006162:	429a      	cmp	r2, r3
 8006164:	f080 8139 	bcs.w	80063da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	f000 8088 	beq.w	800628e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1d9      	bne.n	800617e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e1      	bne.n	80061ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800625c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006270:	65ba      	str	r2, [r7, #88]	; 0x58
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e3      	bne.n	800624c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	4618      	mov	r0, r3
 800628a:	f7fc ff55 	bl	8003138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006296:	b29b      	uxth	r3, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8c0 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a4:	e099      	b.n	80063da <HAL_UART_IRQHandler+0x50e>
 80062a6:	bf00      	nop
 80062a8:	0800669d 	.word	0x0800669d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 808b 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8086 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062f6:	647a      	str	r2, [r7, #68]	; 0x44
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	623b      	str	r3, [r7, #32]
   return(result);
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800632e:	633a      	str	r2, [r7, #48]	; 0x30
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	617b      	str	r3, [r7, #20]
   return(result);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f848 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006394:	e023      	b.n	80063de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
 80063a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f988 	bl	80066c4 <UART_Transmit_IT>
    return;
 80063b4:	e014      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9c8 	bl	8006764 <UART_EndTransmit_IT>
    return;
 80063d4:	e004      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    return;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063de:	bf00      	nop
  }
}
 80063e0:	37e8      	adds	r7, #232	; 0xe8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b090      	sub	sp, #64	; 0x40
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d137      	bne.n	80064c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	2200      	movs	r2, #0
 800645c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3314      	adds	r3, #20
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	623b      	str	r3, [r7, #32]
   return(result);
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006474:	63bb      	str	r3, [r7, #56]	; 0x38
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3314      	adds	r3, #20
 800647c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647e:	633a      	str	r2, [r7, #48]	; 0x30
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b2:	61fa      	str	r2, [r7, #28]
 80064b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	69b9      	ldr	r1, [r7, #24]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	617b      	str	r3, [r7, #20]
   return(result);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e5      	bne.n	8006492 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064c6:	e002      	b.n	80064ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064ca:	f7fb faf3 	bl	8001ab4 <HAL_UART_TxCpltCallback>
}
 80064ce:	bf00      	nop
 80064d0:	3740      	adds	r7, #64	; 0x40
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff ff7f 	bl	80063e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b21      	cmp	r3, #33	; 0x21
 8006524:	d108      	bne.n	8006538 <UART_DMAError+0x46>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006532:	68b8      	ldr	r0, [r7, #8]
 8006534:	f000 f827 	bl	8006586 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b22      	cmp	r3, #34	; 0x22
 8006558:	d108      	bne.n	800656c <UART_DMAError+0x7a>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f000 f835 	bl	80065d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006578:	68b8      	ldr	r0, [r7, #8]
 800657a:	f7ff ff49 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b089      	sub	sp, #36	; 0x24
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60bb      	str	r3, [r7, #8]
   return(result);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	61ba      	str	r2, [r7, #24]
 80065b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b095      	sub	sp, #84	; 0x54
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fe:	643a      	str	r2, [r7, #64]	; 0x40
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	61fb      	str	r3, [r7, #28]
   return(result);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	64bb      	str	r3, [r7, #72]	; 0x48
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e5      	bne.n	8006612 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	2b01      	cmp	r3, #1
 800664c:	d119      	bne.n	8006682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	60bb      	str	r3, [r7, #8]
   return(result);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f023 0310 	bic.w	r3, r3, #16
 8006664:	647b      	str	r3, [r7, #68]	; 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666e:	61ba      	str	r2, [r7, #24]
 8006670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006690:	bf00      	nop
 8006692:	3754      	adds	r7, #84	; 0x54
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff feaa 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b21      	cmp	r3, #33	; 0x21
 80066d6:	d13e      	bne.n	8006756 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e0:	d114      	bne.n	800670c <UART_Transmit_IT+0x48>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d110      	bne.n	800670c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	1c9a      	adds	r2, r3, #2
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]
 800670a:	e008      	b.n	800671e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6211      	str	r1, [r2, #32]
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4619      	mov	r1, r3
 800672c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006740:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006750:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fb f995 	bl	8001ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b22      	cmp	r3, #34	; 0x22
 80067a6:	f040 80ab 	bne.w	8006900 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b2:	d117      	bne.n	80067e4 <UART_Receive_IT+0x50>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d113      	bne.n	80067e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	1c9a      	adds	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28
 80067e2:	e026      	b.n	8006832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d007      	beq.n	8006808 <UART_Receive_IT+0x74>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <UART_Receive_IT+0x82>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e008      	b.n	8006828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006822:	b2da      	uxtb	r2, r3
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4619      	mov	r1, r3
 8006840:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006842:	2b00      	cmp	r3, #0
 8006844:	d15a      	bne.n	80068fc <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0220 	bic.w	r2, r2, #32
 8006854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695a      	ldr	r2, [r3, #20]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	2b01      	cmp	r3, #1
 8006884:	d135      	bne.n	80068f2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	623a      	str	r2, [r7, #32]
 80068ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e5      	bne.n	800688c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d10a      	bne.n	80068e4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd9a 	bl	8006424 <HAL_UARTEx_RxEventCallback>
 80068f0:	e002      	b.n	80068f8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fd82 	bl	80063fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e002      	b.n	8006902 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3730      	adds	r7, #48	; 0x30
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b0c0      	sub	sp, #256	; 0x100
 8006912:	af00      	add	r7, sp, #0
 8006914:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	68d9      	ldr	r1, [r3, #12]
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	ea40 0301 	orr.w	r3, r0, r1
 8006934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	431a      	orrs	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006964:	f021 010c 	bic.w	r1, r1, #12
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006972:	430b      	orrs	r3, r1
 8006974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006986:	6999      	ldr	r1, [r3, #24]
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	ea40 0301 	orr.w	r3, r0, r1
 8006992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <UART_SetConfig+0x2cc>)
 800699c:	429a      	cmp	r2, r3
 800699e:	d005      	beq.n	80069ac <UART_SetConfig+0xa0>
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b8d      	ldr	r3, [pc, #564]	; (8006bdc <UART_SetConfig+0x2d0>)
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d104      	bne.n	80069b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fd fbdc 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 80069b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069b4:	e003      	b.n	80069be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069b6:	f7fd fbc3 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 80069ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c8:	f040 810c 	bne.w	8006be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	1891      	adds	r1, r2, r2
 80069e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80069e6:	415b      	adcs	r3, r3
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069ee:	4621      	mov	r1, r4
 80069f0:	eb12 0801 	adds.w	r8, r2, r1
 80069f4:	4629      	mov	r1, r5
 80069f6:	eb43 0901 	adc.w	r9, r3, r1
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0e:	4690      	mov	r8, r2
 8006a10:	4699      	mov	r9, r3
 8006a12:	4623      	mov	r3, r4
 8006a14:	eb18 0303 	adds.w	r3, r8, r3
 8006a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	eb49 0303 	adc.w	r3, r9, r3
 8006a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	18db      	adds	r3, r3, r3
 8006a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a40:	4613      	mov	r3, r2
 8006a42:	eb42 0303 	adc.w	r3, r2, r3
 8006a46:	657b      	str	r3, [r7, #84]	; 0x54
 8006a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a50:	f7fa f97a 	bl	8000d48 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4b61      	ldr	r3, [pc, #388]	; (8006be0 <UART_SetConfig+0x2d4>)
 8006a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	011c      	lsls	r4, r3, #4
 8006a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a74:	4642      	mov	r2, r8
 8006a76:	464b      	mov	r3, r9
 8006a78:	1891      	adds	r1, r2, r2
 8006a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a7c:	415b      	adcs	r3, r3
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a84:	4641      	mov	r1, r8
 8006a86:	eb12 0a01 	adds.w	sl, r2, r1
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa4:	4692      	mov	sl, r2
 8006aa6:	469b      	mov	fp, r3
 8006aa8:	4643      	mov	r3, r8
 8006aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8006aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	18db      	adds	r3, r3, r3
 8006ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ae6:	f7fa f92f 	bl	8000d48 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <UART_SetConfig+0x2d4>)
 8006af2:	fba3 2301 	umull	r2, r3, r3, r1
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2264      	movs	r2, #100	; 0x64
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b06:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <UART_SetConfig+0x2d4>)
 8006b08:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b14:	441c      	add	r4, r3
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b30:	415b      	adcs	r3, r3
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	18db      	adds	r3, r3, r3
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b92:	4613      	mov	r3, r2
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ba2:	f7fa f8d1 	bl	8000d48 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <UART_SetConfig+0x2d4>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <UART_SetConfig+0x2d4>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 0207 	and.w	r2, r3, #7
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4422      	add	r2, r4
 8006bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bd4:	e106      	b.n	8006de4 <UART_SetConfig+0x4d8>
 8006bd6:	bf00      	nop
 8006bd8:	40011000 	.word	0x40011000
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	1891      	adds	r1, r2, r2
 8006bfc:	6239      	str	r1, [r7, #32]
 8006bfe:	415b      	adcs	r3, r3
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c06:	4641      	mov	r1, r8
 8006c08:	1854      	adds	r4, r2, r1
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	eb43 0501 	adc.w	r5, r3, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	00eb      	lsls	r3, r5, #3
 8006c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1e:	00e2      	lsls	r2, r4, #3
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	18e3      	adds	r3, r4, r3
 8006c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	eb45 0303 	adc.w	r3, r5, r3
 8006c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c52:	4629      	mov	r1, r5
 8006c54:	008b      	lsls	r3, r1, #2
 8006c56:	4621      	mov	r1, r4
 8006c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	008a      	lsls	r2, r1, #2
 8006c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c64:	f7fa f870 	bl	8000d48 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b60      	ldr	r3, [pc, #384]	; (8006df0 <UART_SetConfig+0x4e4>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011c      	lsls	r4, r3, #4
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	61b9      	str	r1, [r7, #24]
 8006c90:	415b      	adcs	r3, r3
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c98:	4641      	mov	r1, r8
 8006c9a:	1851      	adds	r1, r2, r1
 8006c9c:	6139      	str	r1, [r7, #16]
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	414b      	adcs	r3, r1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	00cb      	lsls	r3, r1, #3
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cba:	4651      	mov	r1, sl
 8006cbc:	00ca      	lsls	r2, r1, #3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ccc:	464b      	mov	r3, r9
 8006cce:	460a      	mov	r2, r1
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	008b      	lsls	r3, r1, #2
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	008a      	lsls	r2, r1, #2
 8006cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d02:	f7fa f821 	bl	8000d48 <__aeabi_uldivmod>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2264      	movs	r2, #100	; 0x64
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	1acb      	subs	r3, r1, r3
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	3332      	adds	r3, #50	; 0x32
 8006d20:	4a33      	ldr	r2, [pc, #204]	; (8006df0 <UART_SetConfig+0x4e4>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2c:	441c      	add	r4, r3
 8006d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d32:	2200      	movs	r2, #0
 8006d34:	673b      	str	r3, [r7, #112]	; 0x70
 8006d36:	677a      	str	r2, [r7, #116]	; 0x74
 8006d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d7e:	464b      	mov	r3, r9
 8006d80:	460a      	mov	r2, r1
 8006d82:	eb42 0303 	adc.w	r3, r2, r3
 8006d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	663b      	str	r3, [r7, #96]	; 0x60
 8006d92:	667a      	str	r2, [r7, #100]	; 0x64
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006da0:	4649      	mov	r1, r9
 8006da2:	008b      	lsls	r3, r1, #2
 8006da4:	4641      	mov	r1, r8
 8006da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006daa:	4641      	mov	r1, r8
 8006dac:	008a      	lsls	r2, r1, #2
 8006dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006db2:	f7f9 ffc9 	bl	8000d48 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <UART_SetConfig+0x4e4>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	; 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	3332      	adds	r3, #50	; 0x32
 8006dce:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <UART_SetConfig+0x4e4>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4422      	add	r2, r4
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dea:	46bd      	mov	sp, r7
 8006dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006df0:	51eb851f 	.word	0x51eb851f

08006df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df4:	b084      	sub	sp, #16
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	f107 001c 	add.w	r0, r7, #28
 8006e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d122      	bne.n	8006e52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa9c 	bl	8007384 <USB_CoreReset>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e01a      	b.n	8006e88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa90 	bl	8007384 <USB_CoreReset>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
 8006e7a:	e005      	b.n	8006e88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10b      	bne.n	8006ea6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f043 0206 	orr.w	r2, r3, #6
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f043 0220 	orr.w	r2, r3, #32
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb2:	b004      	add	sp, #16
 8006eb4:	4770      	bx	lr

08006eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d115      	bne.n	8006f26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f06:	2001      	movs	r0, #1
 8006f08:	f7fb f9ce 	bl	80022a8 <HAL_Delay>
      ms++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa28 	bl	8007368 <USB_GetMode>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d01e      	beq.n	8006f5c <USB_SetCurrentMode+0x84>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b31      	cmp	r3, #49	; 0x31
 8006f22:	d9f0      	bls.n	8006f06 <USB_SetCurrentMode+0x2e>
 8006f24:	e01a      	b.n	8006f5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d115      	bne.n	8006f58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f7fb f9b5 	bl	80022a8 <HAL_Delay>
      ms++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa0f 	bl	8007368 <USB_GetMode>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <USB_SetCurrentMode+0x84>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b31      	cmp	r3, #49	; 0x31
 8006f54:	d9f0      	bls.n	8006f38 <USB_SetCurrentMode+0x60>
 8006f56:	e001      	b.n	8006f5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e005      	b.n	8006f68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b32      	cmp	r3, #50	; 0x32
 8006f60:	d101      	bne.n	8006f66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f70:	b084      	sub	sp, #16
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	e009      	b.n	8006fa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3340      	adds	r3, #64	; 0x40
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b0e      	cmp	r3, #14
 8006fa8:	d9f2      	bls.n	8006f90 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d11c      	bne.n	8006fea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fbe:	f043 0302 	orr.w	r3, r3, #2
 8006fc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e005      	b.n	8006ff6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	4619      	mov	r1, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	461a      	mov	r2, r3
 8007012:	680b      	ldr	r3, [r1, #0]
 8007014:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	2b01      	cmp	r3, #1
 800701a:	d10c      	bne.n	8007036 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007022:	2100      	movs	r1, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f965 	bl	80072f4 <USB_SetDevSpeed>
 800702a:	e008      	b.n	800703e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f960 	bl	80072f4 <USB_SetDevSpeed>
 8007034:	e003      	b.n	800703e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007036:	2103      	movs	r1, #3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f95b 	bl	80072f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800703e:	2110      	movs	r1, #16
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8f3 	bl	800722c <USB_FlushTxFifo>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f91f 	bl	8007294 <USB_FlushRxFifo>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	461a      	mov	r2, r3
 8007068:	2300      	movs	r3, #0
 800706a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	461a      	mov	r2, r3
 8007080:	2300      	movs	r3, #0
 8007082:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	e043      	b.n	8007112 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a0:	d118      	bne.n	80070d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	461a      	mov	r2, r3
 80070b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	e013      	b.n	80070e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e008      	b.n	80070e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f2:	461a      	mov	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	461a      	mov	r2, r3
 8007106:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800710a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	3301      	adds	r3, #1
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d3b7      	bcc.n	800708a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800711a:	2300      	movs	r3, #0
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	e043      	b.n	80071a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007136:	d118      	bne.n	800716a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714a:	461a      	mov	r2, r3
 800714c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	e013      	b.n	800717c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e008      	b.n	800717c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	461a      	mov	r2, r3
 800718a:	2300      	movs	r3, #0
 800718c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719a:	461a      	mov	r2, r3
 800719c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3301      	adds	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d3b7      	bcc.n	8007120 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f043 0210 	orr.w	r2, r3, #16
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <USB_DevInit+0x2b8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	f043 0208 	orr.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007204:	2b01      	cmp	r3, #1
 8007206:	d107      	bne.n	8007218 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007210:	f043 0304 	orr.w	r3, r3, #4
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007224:	b004      	add	sp, #16
 8007226:	4770      	bx	lr
 8007228:	803c3800 	.word	0x803c3800

0800722c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <USB_FlushTxFifo+0x64>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d901      	bls.n	800724c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e01b      	b.n	8007284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	daf2      	bge.n	800723a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	019b      	lsls	r3, r3, #6
 800725c:	f043 0220 	orr.w	r2, r3, #32
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a08      	ldr	r2, [pc, #32]	; (8007290 <USB_FlushTxFifo+0x64>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b20      	cmp	r3, #32
 8007280:	d0f0      	beq.n	8007264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	00030d40 	.word	0x00030d40

08007294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a11      	ldr	r2, [pc, #68]	; (80072f0 <USB_FlushRxFifo+0x5c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e018      	b.n	80072e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	daf2      	bge.n	80072a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2210      	movs	r2, #16
 80072c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <USB_FlushRxFifo+0x5c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d901      	bls.n	80072d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e006      	b.n	80072e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d0f0      	beq.n	80072c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	00030d40 	.word	0x00030d40

080072f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0301 	and.w	r3, r3, #1
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <USB_CoreReset+0x64>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e01b      	b.n	80073da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	daf2      	bge.n	8007390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f043 0201 	orr.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <USB_CoreReset+0x64>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d901      	bls.n	80073cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e006      	b.n	80073da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d0f0      	beq.n	80073ba <USB_CoreReset+0x36>

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	00030d40 	.word	0x00030d40

080073ec <arm_rfft_fast_init_f32>:
 80073ec:	084b      	lsrs	r3, r1, #1
 80073ee:	2b80      	cmp	r3, #128	; 0x80
 80073f0:	b410      	push	{r4}
 80073f2:	8201      	strh	r1, [r0, #16]
 80073f4:	8003      	strh	r3, [r0, #0]
 80073f6:	d046      	beq.n	8007486 <arm_rfft_fast_init_f32+0x9a>
 80073f8:	d916      	bls.n	8007428 <arm_rfft_fast_init_f32+0x3c>
 80073fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fe:	d03c      	beq.n	800747a <arm_rfft_fast_init_f32+0x8e>
 8007400:	d928      	bls.n	8007454 <arm_rfft_fast_init_f32+0x68>
 8007402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007406:	d01f      	beq.n	8007448 <arm_rfft_fast_init_f32+0x5c>
 8007408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740c:	d112      	bne.n	8007434 <arm_rfft_fast_init_f32+0x48>
 800740e:	4920      	ldr	r1, [pc, #128]	; (8007490 <arm_rfft_fast_init_f32+0xa4>)
 8007410:	4a20      	ldr	r2, [pc, #128]	; (8007494 <arm_rfft_fast_init_f32+0xa8>)
 8007412:	4b21      	ldr	r3, [pc, #132]	; (8007498 <arm_rfft_fast_init_f32+0xac>)
 8007414:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8007418:	8184      	strh	r4, [r0, #12]
 800741a:	6081      	str	r1, [r0, #8]
 800741c:	6042      	str	r2, [r0, #4]
 800741e:	6143      	str	r3, [r0, #20]
 8007420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007424:	2000      	movs	r0, #0
 8007426:	4770      	bx	lr
 8007428:	2b20      	cmp	r3, #32
 800742a:	d01c      	beq.n	8007466 <arm_rfft_fast_init_f32+0x7a>
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d006      	beq.n	800743e <arm_rfft_fast_init_f32+0x52>
 8007430:	2b10      	cmp	r3, #16
 8007432:	d01d      	beq.n	8007470 <arm_rfft_fast_init_f32+0x84>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	2438      	movs	r4, #56	; 0x38
 8007440:	4916      	ldr	r1, [pc, #88]	; (800749c <arm_rfft_fast_init_f32+0xb0>)
 8007442:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <arm_rfft_fast_init_f32+0xb4>)
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <arm_rfft_fast_init_f32+0xb8>)
 8007446:	e7e7      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007448:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800744c:	4916      	ldr	r1, [pc, #88]	; (80074a8 <arm_rfft_fast_init_f32+0xbc>)
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <arm_rfft_fast_init_f32+0xc0>)
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <arm_rfft_fast_init_f32+0xc4>)
 8007452:	e7e1      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007458:	d1ec      	bne.n	8007434 <arm_rfft_fast_init_f32+0x48>
 800745a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800745e:	4915      	ldr	r1, [pc, #84]	; (80074b4 <arm_rfft_fast_init_f32+0xc8>)
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <arm_rfft_fast_init_f32+0xcc>)
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <arm_rfft_fast_init_f32+0xd0>)
 8007464:	e7d8      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007466:	2430      	movs	r4, #48	; 0x30
 8007468:	4915      	ldr	r1, [pc, #84]	; (80074c0 <arm_rfft_fast_init_f32+0xd4>)
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <arm_rfft_fast_init_f32+0xd8>)
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <arm_rfft_fast_init_f32+0xdc>)
 800746e:	e7d3      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007470:	2414      	movs	r4, #20
 8007472:	4916      	ldr	r1, [pc, #88]	; (80074cc <arm_rfft_fast_init_f32+0xe0>)
 8007474:	4a16      	ldr	r2, [pc, #88]	; (80074d0 <arm_rfft_fast_init_f32+0xe4>)
 8007476:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <arm_rfft_fast_init_f32+0xe8>)
 8007478:	e7ce      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 800747a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800747e:	4916      	ldr	r1, [pc, #88]	; (80074d8 <arm_rfft_fast_init_f32+0xec>)
 8007480:	4a16      	ldr	r2, [pc, #88]	; (80074dc <arm_rfft_fast_init_f32+0xf0>)
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <arm_rfft_fast_init_f32+0xf4>)
 8007484:	e7c8      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007486:	24d0      	movs	r4, #208	; 0xd0
 8007488:	4916      	ldr	r1, [pc, #88]	; (80074e4 <arm_rfft_fast_init_f32+0xf8>)
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <arm_rfft_fast_init_f32+0xfc>)
 800748c:	4b17      	ldr	r3, [pc, #92]	; (80074ec <arm_rfft_fast_init_f32+0x100>)
 800748e:	e7c3      	b.n	8007418 <arm_rfft_fast_init_f32+0x2c>
 8007490:	0801a438 	.word	0x0801a438
 8007494:	0800b630 	.word	0x0800b630
 8007498:	080117a0 	.word	0x080117a0
 800749c:	0800f730 	.word	0x0800f730
 80074a0:	0801c1f8 	.word	0x0801c1f8
 80074a4:	0801e6e8 	.word	0x0801e6e8
 80074a8:	08018120 	.word	0x08018120
 80074ac:	08016020 	.word	0x08016020
 80074b0:	0800f7a0 	.word	0x0800f7a0
 80074b4:	0801e378 	.word	0x0801e378
 80074b8:	080157a0 	.word	0x080157a0
 80074bc:	0801c3f8 	.word	0x0801c3f8
 80074c0:	08018fd8 	.word	0x08018fd8
 80074c4:	08018020 	.word	0x08018020
 80074c8:	0800f630 	.word	0x0800f630
 80074cc:	08018f30 	.word	0x08018f30
 80074d0:	08015fa0 	.word	0x08015fa0
 80074d4:	08018f58 	.word	0x08018f58
 80074d8:	0801cbf8 	.word	0x0801cbf8
 80074dc:	08019438 	.word	0x08019438
 80074e0:	0801cf78 	.word	0x0801cf78
 80074e4:	0801e8e8 	.word	0x0801e8e8
 80074e8:	08019038 	.word	0x08019038
 80074ec:	0801df78 	.word	0x0801df78

080074f0 <arm_rfft_fast_f32>:
 80074f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f4:	8a06      	ldrh	r6, [r0, #16]
 80074f6:	0876      	lsrs	r6, r6, #1
 80074f8:	4607      	mov	r7, r0
 80074fa:	4615      	mov	r5, r2
 80074fc:	8006      	strh	r6, [r0, #0]
 80074fe:	460c      	mov	r4, r1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d15c      	bne.n	80075be <arm_rfft_fast_f32+0xce>
 8007504:	461a      	mov	r2, r3
 8007506:	2301      	movs	r3, #1
 8007508:	f000 fbe4 	bl	8007cd4 <arm_cfft_f32>
 800750c:	edd4 7a00 	vldr	s15, [r4]
 8007510:	ed94 7a01 	vldr	s14, [r4, #4]
 8007514:	883e      	ldrh	r6, [r7, #0]
 8007516:	6978      	ldr	r0, [r7, #20]
 8007518:	ee37 7a07 	vadd.f32	s14, s14, s14
 800751c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007520:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8007524:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800752c:	3e01      	subs	r6, #1
 800752e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8007532:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007536:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800753a:	ed85 7a00 	vstr	s14, [r5]
 800753e:	edc5 7a01 	vstr	s15, [r5, #4]
 8007542:	3010      	adds	r0, #16
 8007544:	f105 0210 	add.w	r2, r5, #16
 8007548:	3b08      	subs	r3, #8
 800754a:	f104 0110 	add.w	r1, r4, #16
 800754e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007552:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007556:	ed10 6a02 	vldr	s12, [r0, #-8]
 800755a:	edd3 3a03 	vldr	s7, [r3, #12]
 800755e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007562:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007566:	ee77 7a66 	vsub.f32	s15, s14, s13
 800756a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800756e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8007572:	ee66 6a27 	vmul.f32	s13, s12, s15
 8007576:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800757a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800757e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007582:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007586:	ee26 6a04 	vmul.f32	s12, s12, s8
 800758a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800758e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007592:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007596:	ee67 7a83 	vmul.f32	s15, s15, s6
 800759a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800759e:	3e01      	subs	r6, #1
 80075a0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80075a4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80075a8:	f1a3 0308 	sub.w	r3, r3, #8
 80075ac:	f101 0108 	add.w	r1, r1, #8
 80075b0:	f100 0008 	add.w	r0, r0, #8
 80075b4:	f102 0208 	add.w	r2, r2, #8
 80075b8:	d1c9      	bne.n	800754e <arm_rfft_fast_f32+0x5e>
 80075ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075be:	edd1 7a00 	vldr	s15, [r1]
 80075c2:	edd1 6a01 	vldr	s13, [r1, #4]
 80075c6:	6941      	ldr	r1, [r0, #20]
 80075c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80075cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075d0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80075d4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80075d8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80075dc:	3e01      	subs	r6, #1
 80075de:	ed82 7a00 	vstr	s14, [r2]
 80075e2:	edc2 7a01 	vstr	s15, [r2, #4]
 80075e6:	00f0      	lsls	r0, r6, #3
 80075e8:	b3ee      	cbz	r6, 8007666 <arm_rfft_fast_f32+0x176>
 80075ea:	3808      	subs	r0, #8
 80075ec:	f101 0e10 	add.w	lr, r1, #16
 80075f0:	4420      	add	r0, r4
 80075f2:	f104 0110 	add.w	r1, r4, #16
 80075f6:	f102 0c10 	add.w	ip, r2, #16
 80075fa:	ed90 7a02 	vldr	s14, [r0, #8]
 80075fe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007602:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8007606:	ed90 4a03 	vldr	s8, [r0, #12]
 800760a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800760e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8007612:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8007616:	ee74 4a05 	vadd.f32	s9, s8, s10
 800761a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800761e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007622:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007626:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800762a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800762e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007632:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007636:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800763a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800763e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007642:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007646:	ee27 7a23 	vmul.f32	s14, s14, s7
 800764a:	3e01      	subs	r6, #1
 800764c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007650:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007654:	f1a0 0008 	sub.w	r0, r0, #8
 8007658:	f101 0108 	add.w	r1, r1, #8
 800765c:	f10e 0e08 	add.w	lr, lr, #8
 8007660:	f10c 0c08 	add.w	ip, ip, #8
 8007664:	d1c9      	bne.n	80075fa <arm_rfft_fast_f32+0x10a>
 8007666:	461a      	mov	r2, r3
 8007668:	4629      	mov	r1, r5
 800766a:	4638      	mov	r0, r7
 800766c:	2301      	movs	r3, #1
 800766e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007672:	f000 bb2f 	b.w	8007cd4 <arm_cfft_f32>
 8007676:	bf00      	nop

08007678 <arm_cfft_radix8by2_f32>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	ed2d 8b08 	vpush	{d8-d11}
 8007680:	4607      	mov	r7, r0
 8007682:	4608      	mov	r0, r1
 8007684:	f8b7 e000 	ldrh.w	lr, [r7]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800768e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007692:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007696:	f000 80b0 	beq.w	80077fa <arm_cfft_radix8by2_f32+0x182>
 800769a:	008b      	lsls	r3, r1, #2
 800769c:	3310      	adds	r3, #16
 800769e:	18c6      	adds	r6, r0, r3
 80076a0:	3210      	adds	r2, #16
 80076a2:	4443      	add	r3, r8
 80076a4:	f100 0510 	add.w	r5, r0, #16
 80076a8:	f108 0410 	add.w	r4, r8, #16
 80076ac:	ed54 1a04 	vldr	s3, [r4, #-16]
 80076b0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80076b4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80076b8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80076bc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80076c0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80076c4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80076c8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80076cc:	ed16 2a04 	vldr	s4, [r6, #-16]
 80076d0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80076d4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80076d8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80076dc:	ed15 3a04 	vldr	s6, [r5, #-16]
 80076e0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80076e4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80076e8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80076ec:	ee73 ba21 	vadd.f32	s23, s6, s3
 80076f0:	ee36 ba26 	vadd.f32	s22, s12, s13
 80076f4:	ee37 aa27 	vadd.f32	s20, s14, s15
 80076f8:	ee72 9a04 	vadd.f32	s19, s4, s8
 80076fc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007700:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007704:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007708:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800770c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007710:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007714:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007718:	ed05 aa01 	vstr	s20, [r5, #-4]
 800771c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007720:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007724:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007728:	ed46 8a02 	vstr	s17, [r6, #-8]
 800772c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007730:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007734:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007738:	ed52 2a04 	vldr	s5, [r2, #-16]
 800773c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007740:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007744:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007748:	ee24 2a06 	vmul.f32	s4, s8, s12
 800774c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007750:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007754:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007758:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800775c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007760:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007764:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007768:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800776c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007770:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007774:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007778:	ed44 2a04 	vstr	s5, [r4, #-16]
 800777c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007780:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007788:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800778c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007790:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007794:	ee35 6a41 	vsub.f32	s12, s10, s2
 8007798:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800779c:	ee67 3a87 	vmul.f32	s7, s15, s14
 80077a0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80077a4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80077a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80077ac:	ee64 4a87 	vmul.f32	s9, s9, s14
 80077b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80077b4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80077b8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80077bc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80077c0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80077c4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80077c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80077cc:	f1be 0e01 	subs.w	lr, lr, #1
 80077d0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80077d4:	f105 0510 	add.w	r5, r5, #16
 80077d8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80077dc:	f106 0610 	add.w	r6, r6, #16
 80077e0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80077e4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80077e8:	f102 0210 	add.w	r2, r2, #16
 80077ec:	f104 0410 	add.w	r4, r4, #16
 80077f0:	f103 0310 	add.w	r3, r3, #16
 80077f4:	f47f af5a 	bne.w	80076ac <arm_cfft_radix8by2_f32+0x34>
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	b28c      	uxth	r4, r1
 80077fc:	4621      	mov	r1, r4
 80077fe:	2302      	movs	r3, #2
 8007800:	f000 fae2 	bl	8007dc8 <arm_radix8_butterfly_f32>
 8007804:	ecbd 8b08 	vpop	{d8-d11}
 8007808:	4621      	mov	r1, r4
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4640      	mov	r0, r8
 800780e:	2302      	movs	r3, #2
 8007810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	f000 bad8 	b.w	8007dc8 <arm_radix8_butterfly_f32>

08007818 <arm_cfft_radix8by4_f32>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	ed2d 8b0a 	vpush	{d8-d12}
 8007820:	8802      	ldrh	r2, [r0, #0]
 8007822:	ed91 6a00 	vldr	s12, [r1]
 8007826:	b08f      	sub	sp, #60	; 0x3c
 8007828:	460f      	mov	r7, r1
 800782a:	0852      	lsrs	r2, r2, #1
 800782c:	6841      	ldr	r1, [r0, #4]
 800782e:	900c      	str	r0, [sp, #48]	; 0x30
 8007830:	0093      	lsls	r3, r2, #2
 8007832:	4638      	mov	r0, r7
 8007834:	4418      	add	r0, r3
 8007836:	4606      	mov	r6, r0
 8007838:	9009      	str	r0, [sp, #36]	; 0x24
 800783a:	4418      	add	r0, r3
 800783c:	edd0 6a00 	vldr	s13, [r0]
 8007840:	ed96 4a00 	vldr	s8, [r6]
 8007844:	edd6 2a01 	vldr	s5, [r6, #4]
 8007848:	edd0 7a01 	vldr	s15, [r0, #4]
 800784c:	900a      	str	r0, [sp, #40]	; 0x28
 800784e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007852:	4604      	mov	r4, r0
 8007854:	4625      	mov	r5, r4
 8007856:	441c      	add	r4, r3
 8007858:	edd4 4a00 	vldr	s9, [r4]
 800785c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007860:	ed94 3a01 	vldr	s6, [r4, #4]
 8007864:	9401      	str	r4, [sp, #4]
 8007866:	ee35 5a84 	vadd.f32	s10, s11, s8
 800786a:	4630      	mov	r0, r6
 800786c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007870:	463e      	mov	r6, r7
 8007872:	ee15 ea10 	vmov	lr, s10
 8007876:	ee76 6a66 	vsub.f32	s13, s12, s13
 800787a:	f846 eb08 	str.w	lr, [r6], #8
 800787e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007882:	ed90 5a01 	vldr	s10, [r0, #4]
 8007886:	9605      	str	r6, [sp, #20]
 8007888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800788c:	9e01      	ldr	r6, [sp, #4]
 800788e:	9707      	str	r7, [sp, #28]
 8007890:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8007894:	ed96 2a01 	vldr	s4, [r6, #4]
 8007898:	ee36 7a05 	vadd.f32	s14, s12, s10
 800789c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80078a0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80078a4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80078a8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80078ac:	4604      	mov	r4, r0
 80078ae:	46a3      	mov	fp, r4
 80078b0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80078b4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80078b8:	ee14 8a10 	vmov	r8, s8
 80078bc:	46a4      	mov	ip, r4
 80078be:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80078c2:	ed87 7a01 	vstr	s14, [r7, #4]
 80078c6:	f84b 8b08 	str.w	r8, [fp], #8
 80078ca:	f1ac 0704 	sub.w	r7, ip, #4
 80078ce:	ed8c 5a01 	vstr	s10, [ip, #4]
 80078d2:	f101 0c08 	add.w	ip, r1, #8
 80078d6:	462c      	mov	r4, r5
 80078d8:	f8cd c010 	str.w	ip, [sp, #16]
 80078dc:	ee15 ca90 	vmov	ip, s11
 80078e0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80078e4:	f844 cb08 	str.w	ip, [r4], #8
 80078e8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80078ec:	ee36 6a43 	vsub.f32	s12, s12, s6
 80078f0:	9406      	str	r4, [sp, #24]
 80078f2:	ee76 6a83 	vadd.f32	s13, s13, s6
 80078f6:	f101 0410 	add.w	r4, r1, #16
 80078fa:	0852      	lsrs	r2, r2, #1
 80078fc:	9402      	str	r4, [sp, #8]
 80078fe:	ed85 6a01 	vstr	s12, [r5, #4]
 8007902:	462c      	mov	r4, r5
 8007904:	f101 0518 	add.w	r5, r1, #24
 8007908:	920b      	str	r2, [sp, #44]	; 0x2c
 800790a:	46b2      	mov	sl, r6
 800790c:	9503      	str	r5, [sp, #12]
 800790e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007912:	3a02      	subs	r2, #2
 8007914:	ee16 5a90 	vmov	r5, s13
 8007918:	46b6      	mov	lr, r6
 800791a:	4630      	mov	r0, r6
 800791c:	0852      	lsrs	r2, r2, #1
 800791e:	f84a 5b08 	str.w	r5, [sl], #8
 8007922:	f1a0 0604 	sub.w	r6, r0, #4
 8007926:	edce 7a01 	vstr	s15, [lr, #4]
 800792a:	9208      	str	r2, [sp, #32]
 800792c:	f000 8130 	beq.w	8007b90 <arm_cfft_radix8by4_f32+0x378>
 8007930:	4691      	mov	r9, r2
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007938:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800793c:	3b08      	subs	r3, #8
 800793e:	f102 0510 	add.w	r5, r2, #16
 8007942:	f101 0c20 	add.w	ip, r1, #32
 8007946:	f1a4 020c 	sub.w	r2, r4, #12
 800794a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800794e:	4433      	add	r3, r6
 8007950:	3410      	adds	r4, #16
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	ed55 3a02 	vldr	s7, [r5, #-8]
 800795a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800795e:	ed91 7a00 	vldr	s14, [r1]
 8007962:	edd0 7a00 	vldr	s15, [r0]
 8007966:	ed54 5a01 	vldr	s11, [r4, #-4]
 800796a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800796e:	edd0 6a01 	vldr	s13, [r0, #4]
 8007972:	ed91 6a01 	vldr	s12, [r1, #4]
 8007976:	ee33 8a85 	vadd.f32	s16, s7, s10
 800797a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800797e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007982:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007986:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800798a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800798e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007992:	edd1 4a01 	vldr	s9, [r1, #4]
 8007996:	ed90 4a01 	vldr	s8, [r0, #4]
 800799a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800799e:	ee75 aa06 	vadd.f32	s21, s10, s12
 80079a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80079a6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80079aa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80079ae:	edd6 1a00 	vldr	s3, [r6]
 80079b2:	edd7 0a00 	vldr	s1, [r7]
 80079b6:	ed92 4a02 	vldr	s8, [r2, #8]
 80079ba:	edd3 3a02 	vldr	s7, [r3, #8]
 80079be:	ed93 2a01 	vldr	s4, [r3, #4]
 80079c2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80079c6:	edd2 2a01 	vldr	s5, [r2, #4]
 80079ca:	ed57 9a01 	vldr	s19, [r7, #-4]
 80079ce:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80079d2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80079d6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80079da:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80079de:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80079e2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80079e6:	ee18 aa90 	vmov	sl, s17
 80079ea:	f847 a908 	str.w	sl, [r7], #-8
 80079ee:	edd2 8a01 	vldr	s17, [r2, #4]
 80079f2:	ed93 9a01 	vldr	s18, [r3, #4]
 80079f6:	ee73 8a28 	vadd.f32	s17, s6, s17
 80079fa:	ee3a aa27 	vadd.f32	s20, s20, s15
 80079fe:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007a02:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007a06:	edc7 8a01 	vstr	s17, [r7, #4]
 8007a0a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007a0e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007a12:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007a16:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007a1a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007a1e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007a22:	ee31 9a20 	vadd.f32	s18, s2, s1
 8007a26:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007a2a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007a2e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007a32:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007a36:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007a3a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007a3e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007a42:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007a46:	ee1c aa10 	vmov	sl, s24
 8007a4a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007a4e:	f841 ab08 	str.w	sl, [r1], #8
 8007a52:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007a56:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007a5a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007a5e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007a62:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007a66:	edc2 8a01 	vstr	s17, [r2, #4]
 8007a6a:	ed82 ba02 	vstr	s22, [r2, #8]
 8007a6e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007a72:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007a76:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007a7a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007a7e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007a82:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007a86:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007a8a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007a8e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007a92:	ee63 8a04 	vmul.f32	s17, s6, s8
 8007a96:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007a9a:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007a9e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007aa2:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007aa6:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007aaa:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007aae:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007ab2:	ee14 aa10 	vmov	sl, s8
 8007ab6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007aba:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007abe:	ed44 9a02 	vstr	s19, [r4, #-8]
 8007ac2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007ac6:	ed04 0a01 	vstr	s0, [r4, #-4]
 8007aca:	f846 a908 	str.w	sl, [r6], #-8
 8007ace:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007ad2:	ee35 7a87 	vadd.f32	s14, s11, s14
 8007ad6:	edc6 3a01 	vstr	s7, [r6, #4]
 8007ada:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ae2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8007ae6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8007aea:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007aee:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007af2:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007af6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007afa:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007afe:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007b02:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007b06:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b0e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007b12:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007b16:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007b1a:	ee15 aa90 	vmov	sl, s11
 8007b1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b22:	f840 ab08 	str.w	sl, [r0], #8
 8007b26:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007b2a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b32:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007b36:	f105 0508 	add.w	r5, r5, #8
 8007b3a:	ed83 1a02 	vstr	s2, [r3, #8]
 8007b3e:	edc3 2a01 	vstr	s5, [r3, #4]
 8007b42:	f108 0808 	add.w	r8, r8, #8
 8007b46:	f1a2 0208 	sub.w	r2, r2, #8
 8007b4a:	f10c 0c10 	add.w	ip, ip, #16
 8007b4e:	f104 0408 	add.w	r4, r4, #8
 8007b52:	f10e 0e18 	add.w	lr, lr, #24
 8007b56:	f1a3 0308 	sub.w	r3, r3, #8
 8007b5a:	f47f aefc 	bne.w	8007956 <arm_cfft_radix8by4_f32+0x13e>
 8007b5e:	9908      	ldr	r1, [sp, #32]
 8007b60:	9802      	ldr	r0, [sp, #8]
 8007b62:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007b66:	00cb      	lsls	r3, r1, #3
 8007b68:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007b6c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007b70:	9102      	str	r1, [sp, #8]
 8007b72:	9905      	ldr	r1, [sp, #20]
 8007b74:	4419      	add	r1, r3
 8007b76:	9105      	str	r1, [sp, #20]
 8007b78:	9904      	ldr	r1, [sp, #16]
 8007b7a:	4419      	add	r1, r3
 8007b7c:	9104      	str	r1, [sp, #16]
 8007b7e:	9906      	ldr	r1, [sp, #24]
 8007b80:	449b      	add	fp, r3
 8007b82:	4419      	add	r1, r3
 8007b84:	449a      	add	sl, r3
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	9106      	str	r1, [sp, #24]
 8007b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	9a05      	ldr	r2, [sp, #20]
 8007b92:	9806      	ldr	r0, [sp, #24]
 8007b94:	ed92 4a00 	vldr	s8, [r2]
 8007b98:	ed90 7a00 	vldr	s14, [r0]
 8007b9c:	ed9b 3a00 	vldr	s6, [fp]
 8007ba0:	edda 3a00 	vldr	s7, [sl]
 8007ba4:	edd2 4a01 	vldr	s9, [r2, #4]
 8007ba8:	edd0 6a01 	vldr	s13, [r0, #4]
 8007bac:	ed9a 2a01 	vldr	s4, [sl, #4]
 8007bb0:	eddb 7a01 	vldr	s15, [fp, #4]
 8007bb4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007bb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007bba:	ee34 6a07 	vadd.f32	s12, s8, s14
 8007bbe:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8007bc2:	ee36 5a03 	vadd.f32	s10, s12, s6
 8007bc6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007bca:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007bce:	ee34 7a47 	vsub.f32	s14, s8, s14
 8007bd2:	ed82 5a00 	vstr	s10, [r2]
 8007bd6:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007bda:	edda 4a01 	vldr	s9, [sl, #4]
 8007bde:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007be2:	ee37 4a27 	vadd.f32	s8, s14, s15
 8007be6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007bea:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007bee:	ed82 5a01 	vstr	s10, [r2, #4]
 8007bf2:	9a04      	ldr	r2, [sp, #16]
 8007bf4:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8007bf8:	edd2 1a00 	vldr	s3, [r2]
 8007bfc:	edd2 2a01 	vldr	s5, [r2, #4]
 8007c00:	9a02      	ldr	r2, [sp, #8]
 8007c02:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007c06:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007c0a:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007c0e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007c12:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007c16:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007c1a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007c1e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007c22:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8007c26:	edcb 2a00 	vstr	s5, [fp]
 8007c2a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007c2e:	ed92 4a01 	vldr	s8, [r2, #4]
 8007c32:	ed92 5a00 	vldr	s10, [r2]
 8007c36:	9a03      	ldr	r2, [sp, #12]
 8007c38:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007c3c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007c40:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007c44:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007c48:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007c4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007c50:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007c54:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007c58:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c60:	ed80 6a01 	vstr	s12, [r0, #4]
 8007c64:	edc0 5a00 	vstr	s11, [r0]
 8007c68:	edd2 5a01 	vldr	s11, [r2, #4]
 8007c6c:	9807      	ldr	r0, [sp, #28]
 8007c6e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007c72:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8007c76:	edd2 6a00 	vldr	s13, [r2]
 8007c7a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007c7e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007c82:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c86:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007c8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c8e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007c92:	edca 7a01 	vstr	s15, [sl, #4]
 8007c96:	ed8a 7a00 	vstr	s14, [sl]
 8007c9a:	6872      	ldr	r2, [r6, #4]
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	f000 f892 	bl	8007dc8 <arm_radix8_butterfly_f32>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	6872      	ldr	r2, [r6, #4]
 8007ca8:	4621      	mov	r1, r4
 8007caa:	2304      	movs	r3, #4
 8007cac:	f000 f88c 	bl	8007dc8 <arm_radix8_butterfly_f32>
 8007cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007cb2:	6872      	ldr	r2, [r6, #4]
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	f000 f886 	bl	8007dc8 <arm_radix8_butterfly_f32>
 8007cbc:	6872      	ldr	r2, [r6, #4]
 8007cbe:	9801      	ldr	r0, [sp, #4]
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	b00f      	add	sp, #60	; 0x3c
 8007cc6:	ecbd 8b0a 	vpop	{d8-d12}
 8007cca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cce:	f000 b87b 	b.w	8007dc8 <arm_radix8_butterfly_f32>
 8007cd2:	bf00      	nop

08007cd4 <arm_cfft_f32>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	2a01      	cmp	r2, #1
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4617      	mov	r7, r2
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4698      	mov	r8, r3
 8007ce2:	8805      	ldrh	r5, [r0, #0]
 8007ce4:	d054      	beq.n	8007d90 <arm_cfft_f32+0xbc>
 8007ce6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007cea:	d04c      	beq.n	8007d86 <arm_cfft_f32+0xb2>
 8007cec:	d916      	bls.n	8007d1c <arm_cfft_f32+0x48>
 8007cee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007cf2:	d01a      	beq.n	8007d2a <arm_cfft_f32+0x56>
 8007cf4:	d95c      	bls.n	8007db0 <arm_cfft_f32+0xdc>
 8007cf6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007cfa:	d044      	beq.n	8007d86 <arm_cfft_f32+0xb2>
 8007cfc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007d00:	d105      	bne.n	8007d0e <arm_cfft_f32+0x3a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	6872      	ldr	r2, [r6, #4]
 8007d06:	4629      	mov	r1, r5
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 f85d 	bl	8007dc8 <arm_radix8_butterfly_f32>
 8007d0e:	f1b8 0f00 	cmp.w	r8, #0
 8007d12:	d111      	bne.n	8007d38 <arm_cfft_f32+0x64>
 8007d14:	2f01      	cmp	r7, #1
 8007d16:	d016      	beq.n	8007d46 <arm_cfft_f32+0x72>
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	2d20      	cmp	r5, #32
 8007d1e:	d032      	beq.n	8007d86 <arm_cfft_f32+0xb2>
 8007d20:	d94a      	bls.n	8007db8 <arm_cfft_f32+0xe4>
 8007d22:	2d40      	cmp	r5, #64	; 0x40
 8007d24:	d0ed      	beq.n	8007d02 <arm_cfft_f32+0x2e>
 8007d26:	2d80      	cmp	r5, #128	; 0x80
 8007d28:	d1f1      	bne.n	8007d0e <arm_cfft_f32+0x3a>
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff fca3 	bl	8007678 <arm_cfft_radix8by2_f32>
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	d0ed      	beq.n	8007d14 <arm_cfft_f32+0x40>
 8007d38:	68b2      	ldr	r2, [r6, #8]
 8007d3a:	89b1      	ldrh	r1, [r6, #12]
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7f8 fa67 	bl	8000210 <arm_bitreversal_32>
 8007d42:	2f01      	cmp	r7, #1
 8007d44:	d1e8      	bne.n	8007d18 <arm_cfft_f32+0x44>
 8007d46:	ee07 5a90 	vmov	s15, r5
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	d0de      	beq.n	8007d18 <arm_cfft_f32+0x44>
 8007d5a:	f104 0108 	add.w	r1, r4, #8
 8007d5e:	2300      	movs	r3, #0
 8007d60:	3301      	adds	r3, #1
 8007d62:	429d      	cmp	r5, r3
 8007d64:	f101 0108 	add.w	r1, r1, #8
 8007d68:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007d6c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007d70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007d78:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007d7c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007d80:	d1ee      	bne.n	8007d60 <arm_cfft_f32+0x8c>
 8007d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d86:	4621      	mov	r1, r4
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff fd45 	bl	8007818 <arm_cfft_radix8by4_f32>
 8007d8e:	e7be      	b.n	8007d0e <arm_cfft_f32+0x3a>
 8007d90:	b1ad      	cbz	r5, 8007dbe <arm_cfft_f32+0xea>
 8007d92:	f101 030c 	add.w	r3, r1, #12
 8007d96:	2200      	movs	r2, #0
 8007d98:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007d9c:	3201      	adds	r2, #1
 8007d9e:	eef1 7a67 	vneg.f32	s15, s15
 8007da2:	4295      	cmp	r5, r2
 8007da4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007da8:	f103 0308 	add.w	r3, r3, #8
 8007dac:	d1f4      	bne.n	8007d98 <arm_cfft_f32+0xc4>
 8007dae:	e79a      	b.n	8007ce6 <arm_cfft_f32+0x12>
 8007db0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007db4:	d0a5      	beq.n	8007d02 <arm_cfft_f32+0x2e>
 8007db6:	e7aa      	b.n	8007d0e <arm_cfft_f32+0x3a>
 8007db8:	2d10      	cmp	r5, #16
 8007dba:	d0b6      	beq.n	8007d2a <arm_cfft_f32+0x56>
 8007dbc:	e7a7      	b.n	8007d0e <arm_cfft_f32+0x3a>
 8007dbe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007dc2:	d894      	bhi.n	8007cee <arm_cfft_f32+0x1a>
 8007dc4:	e7aa      	b.n	8007d1c <arm_cfft_f32+0x48>
 8007dc6:	bf00      	nop

08007dc8 <arm_radix8_butterfly_f32>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	ed2d 8b10 	vpush	{d8-d15}
 8007dd0:	461c      	mov	r4, r3
 8007dd2:	b09d      	sub	sp, #116	; 0x74
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	ed9f bac4 	vldr	s22, [pc, #784]	; 80080ec <arm_radix8_butterfly_f32+0x324>
 8007ddc:	9019      	str	r0, [sp, #100]	; 0x64
 8007dde:	921a      	str	r2, [sp, #104]	; 0x68
 8007de0:	468b      	mov	fp, r1
 8007de2:	931b      	str	r3, [sp, #108]	; 0x6c
 8007de4:	468a      	mov	sl, r1
 8007de6:	46a1      	mov	r9, r4
 8007de8:	4607      	mov	r7, r0
 8007dea:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007dee:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007df2:	eb03 0508 	add.w	r5, r3, r8
 8007df6:	195c      	adds	r4, r3, r5
 8007df8:	00de      	lsls	r6, r3, #3
 8007dfa:	191a      	adds	r2, r3, r4
 8007dfc:	9600      	str	r6, [sp, #0]
 8007dfe:	1898      	adds	r0, r3, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	9e00      	ldr	r6, [sp, #0]
 8007e04:	9311      	str	r3, [sp, #68]	; 0x44
 8007e06:	4401      	add	r1, r0
 8007e08:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007e0c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007e10:	19be      	adds	r6, r7, r6
 8007e12:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8007e16:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8007e1a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8007e1e:	9f00      	ldr	r7, [sp, #0]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	eb06 0e07 	add.w	lr, r6, r7
 8007e26:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	3204      	adds	r2, #4
 8007e2c:	3104      	adds	r1, #4
 8007e2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e32:	f04f 0c00 	mov.w	ip, #0
 8007e36:	edde 7a00 	vldr	s15, [lr]
 8007e3a:	edd6 6a00 	vldr	s13, [r6]
 8007e3e:	ed95 2a00 	vldr	s4, [r5]
 8007e42:	ed17 aa01 	vldr	s20, [r7, #-4]
 8007e46:	edd4 4a00 	vldr	s9, [r4]
 8007e4a:	ed90 5a00 	vldr	s10, [r0]
 8007e4e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007e52:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007e56:	ee77 8a85 	vadd.f32	s17, s15, s10
 8007e5a:	ee76 3a87 	vadd.f32	s7, s13, s14
 8007e5e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8007e62:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8007e66:	ee33 6a84 	vadd.f32	s12, s7, s8
 8007e6a:	ee73 5a28 	vadd.f32	s11, s6, s17
 8007e6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e72:	ee75 6a86 	vadd.f32	s13, s11, s12
 8007e76:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8007e7a:	ed47 6a01 	vstr	s13, [r7, #-4]
 8007e7e:	edc4 5a00 	vstr	s11, [r4]
 8007e82:	ed92 9a00 	vldr	s18, [r2]
 8007e86:	ed95 1a01 	vldr	s2, [r5, #4]
 8007e8a:	edd6 5a01 	vldr	s11, [r6, #4]
 8007e8e:	ed91 6a00 	vldr	s12, [r1]
 8007e92:	edd7 2a00 	vldr	s5, [r7]
 8007e96:	edd4 1a01 	vldr	s3, [r4, #4]
 8007e9a:	edde 6a01 	vldr	s13, [lr, #4]
 8007e9e:	edd0 9a01 	vldr	s19, [r0, #4]
 8007ea2:	ee72 0a60 	vsub.f32	s1, s4, s1
 8007ea6:	ee71 aa46 	vsub.f32	s21, s2, s12
 8007eaa:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8007eae:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007eb2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8007eb6:	ee37 7a20 	vadd.f32	s14, s14, s1
 8007eba:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8007ebe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8007ec2:	ee75 5a89 	vadd.f32	s11, s11, s18
 8007ec6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8007eca:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8007ece:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007ed2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8007ed6:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8007eda:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007ede:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8007ee2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8007ee6:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8007eea:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007eee:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007ef2:	ee36 0a88 	vadd.f32	s0, s13, s16
 8007ef6:	ee75 8a86 	vadd.f32	s17, s11, s12
 8007efa:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007efe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007f02:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8007f06:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8007f0a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007f0e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8007f12:	ee71 5a49 	vsub.f32	s11, s2, s18
 8007f16:	ee31 2a09 	vadd.f32	s4, s2, s18
 8007f1a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8007f1e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8007f22:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8007f26:	ee73 0a06 	vadd.f32	s1, s6, s12
 8007f2a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8007f2e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007f32:	ee32 8a28 	vadd.f32	s16, s4, s17
 8007f36:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007f3a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8007f3e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007f42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007f46:	ee71 5a64 	vsub.f32	s11, s2, s9
 8007f4a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8007f4e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8007f52:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8007f56:	ee74 4a81 	vadd.f32	s9, s9, s2
 8007f5a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8007f5e:	44dc      	add	ip, fp
 8007f60:	45e2      	cmp	sl, ip
 8007f62:	ed87 8a00 	vstr	s16, [r7]
 8007f66:	ed84 2a01 	vstr	s4, [r4, #4]
 8007f6a:	441f      	add	r7, r3
 8007f6c:	edce 0a00 	vstr	s1, [lr]
 8007f70:	441c      	add	r4, r3
 8007f72:	ed80 6a00 	vstr	s12, [r0]
 8007f76:	edce 1a01 	vstr	s3, [lr, #4]
 8007f7a:	ed80 4a01 	vstr	s8, [r0, #4]
 8007f7e:	449e      	add	lr, r3
 8007f80:	ed86 3a00 	vstr	s6, [r6]
 8007f84:	4418      	add	r0, r3
 8007f86:	ed41 3a01 	vstr	s7, [r1, #-4]
 8007f8a:	ed02 5a01 	vstr	s10, [r2, #-4]
 8007f8e:	ed85 7a00 	vstr	s14, [r5]
 8007f92:	edc6 5a01 	vstr	s11, [r6, #4]
 8007f96:	edc1 4a00 	vstr	s9, [r1]
 8007f9a:	441e      	add	r6, r3
 8007f9c:	edc2 6a00 	vstr	s13, [r2]
 8007fa0:	4419      	add	r1, r3
 8007fa2:	edc5 7a01 	vstr	s15, [r5, #4]
 8007fa6:	441a      	add	r2, r3
 8007fa8:	441d      	add	r5, r3
 8007faa:	f63f af44 	bhi.w	8007e36 <arm_radix8_butterfly_f32+0x6e>
 8007fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007fb0:	2a07      	cmp	r2, #7
 8007fb2:	f240 81f5 	bls.w	80083a0 <arm_radix8_butterfly_f32+0x5d8>
 8007fb6:	f108 0101 	add.w	r1, r8, #1
 8007fba:	188f      	adds	r7, r1, r2
 8007fbc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8007fc0:	19d6      	adds	r6, r2, r7
 8007fc2:	eb08 0c09 	add.w	ip, r8, r9
 8007fc6:	1994      	adds	r4, r2, r6
 8007fc8:	eb0c 0e09 	add.w	lr, ip, r9
 8007fcc:	4610      	mov	r0, r2
 8007fce:	9701      	str	r7, [sp, #4]
 8007fd0:	4420      	add	r0, r4
 8007fd2:	eb0e 0709 	add.w	r7, lr, r9
 8007fd6:	1815      	adds	r5, r2, r0
 8007fd8:	eb07 0209 	add.w	r2, r7, r9
 8007fdc:	9203      	str	r2, [sp, #12]
 8007fde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fe4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fe6:	440a      	add	r2, r1
 8007fe8:	9900      	ldr	r1, [sp, #0]
 8007fea:	3108      	adds	r1, #8
 8007fec:	9100      	str	r1, [sp, #0]
 8007fee:	9902      	ldr	r1, [sp, #8]
 8007ff0:	3108      	adds	r1, #8
 8007ff2:	9102      	str	r1, [sp, #8]
 8007ff4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007ff6:	00ff      	lsls	r7, r7, #3
 8007ff8:	9715      	str	r7, [sp, #84]	; 0x54
 8007ffa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8007ffe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008002:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008006:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008008:	9903      	ldr	r1, [sp, #12]
 800800a:	19d7      	adds	r7, r2, r7
 800800c:	00c9      	lsls	r1, r1, #3
 800800e:	9114      	str	r1, [sp, #80]	; 0x50
 8008010:	9710      	str	r7, [sp, #64]	; 0x40
 8008012:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008014:	9f00      	ldr	r7, [sp, #0]
 8008016:	19cf      	adds	r7, r1, r7
 8008018:	970d      	str	r7, [sp, #52]	; 0x34
 800801a:	9f02      	ldr	r7, [sp, #8]
 800801c:	19cf      	adds	r7, r1, r7
 800801e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008022:	970c      	str	r7, [sp, #48]	; 0x30
 8008024:	9f01      	ldr	r7, [sp, #4]
 8008026:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800802a:	3504      	adds	r5, #4
 800802c:	3004      	adds	r0, #4
 800802e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8008032:	9508      	str	r5, [sp, #32]
 8008034:	9009      	str	r0, [sp, #36]	; 0x24
 8008036:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008038:	981a      	ldr	r0, [sp, #104]	; 0x68
 800803a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800803e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008042:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8008046:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008048:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800804c:	1945      	adds	r5, r0, r5
 800804e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008052:	460f      	mov	r7, r1
 8008054:	3404      	adds	r4, #4
 8008056:	4641      	mov	r1, r8
 8008058:	1841      	adds	r1, r0, r1
 800805a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800805e:	940a      	str	r4, [sp, #40]	; 0x28
 8008060:	eb00 0c06 	add.w	ip, r0, r6
 8008064:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008068:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800806a:	9506      	str	r5, [sp, #24]
 800806c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800806e:	9105      	str	r1, [sp, #20]
 8008070:	4639      	mov	r1, r7
 8008072:	1905      	adds	r5, r0, r4
 8008074:	3108      	adds	r1, #8
 8008076:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008078:	9507      	str	r5, [sp, #28]
 800807a:	910f      	str	r1, [sp, #60]	; 0x3c
 800807c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008080:	2101      	movs	r1, #1
 8008082:	eb00 0e06 	add.w	lr, r0, r6
 8008086:	9518      	str	r5, [sp, #96]	; 0x60
 8008088:	9404      	str	r4, [sp, #16]
 800808a:	9103      	str	r1, [sp, #12]
 800808c:	4620      	mov	r0, r4
 800808e:	4689      	mov	r9, r1
 8008090:	9e06      	ldr	r6, [sp, #24]
 8008092:	ed90 fa00 	vldr	s30, [r0]
 8008096:	edd6 7a01 	vldr	s15, [r6, #4]
 800809a:	edd0 ba01 	vldr	s23, [r0, #4]
 800809e:	edcd 7a00 	vstr	s15, [sp]
 80080a2:	a80d      	add	r0, sp, #52	; 0x34
 80080a4:	edde 7a01 	vldr	s15, [lr, #4]
 80080a8:	9c05      	ldr	r4, [sp, #20]
 80080aa:	9d07      	ldr	r5, [sp, #28]
 80080ac:	edd2 fa00 	vldr	s31, [r2]
 80080b0:	ed92 ca01 	vldr	s24, [r2, #4]
 80080b4:	edcd 7a01 	vstr	s15, [sp, #4]
 80080b8:	c807      	ldmia	r0, {r0, r1, r2}
 80080ba:	eddc 7a01 	vldr	s15, [ip, #4]
 80080be:	edd4 ea00 	vldr	s29, [r4]
 80080c2:	ed95 ea00 	vldr	s28, [r5]
 80080c6:	edd6 da00 	vldr	s27, [r6]
 80080ca:	edd4 aa01 	vldr	s21, [r4, #4]
 80080ce:	ed95 aa01 	vldr	s20, [r5, #4]
 80080d2:	ed9e da00 	vldr	s26, [lr]
 80080d6:	eddc ca00 	vldr	s25, [ip]
 80080da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80080e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80080e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80080e6:	edcd 7a02 	vstr	s15, [sp, #8]
 80080ea:	e001      	b.n	80080f0 <arm_radix8_butterfly_f32+0x328>
 80080ec:	3f3504f3 	.word	0x3f3504f3
 80080f0:	ed16 6a01 	vldr	s12, [r6, #-4]
 80080f4:	ed91 5a00 	vldr	s10, [r1]
 80080f8:	ed57 9a01 	vldr	s19, [r7, #-4]
 80080fc:	edd5 7a00 	vldr	s15, [r5]
 8008100:	ed18 7a01 	vldr	s14, [r8, #-4]
 8008104:	edd2 3a00 	vldr	s7, [r2]
 8008108:	ed94 3a00 	vldr	s6, [r4]
 800810c:	ed90 2a00 	vldr	s4, [r0]
 8008110:	ed92 0a01 	vldr	s0, [r2, #4]
 8008114:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008118:	ee32 1a06 	vadd.f32	s2, s4, s12
 800811c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008120:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008124:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008128:	ee71 6a24 	vadd.f32	s13, s2, s9
 800812c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008130:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008138:	ed82 6a00 	vstr	s12, [r2]
 800813c:	edd5 8a01 	vldr	s17, [r5, #4]
 8008140:	ed90 9a01 	vldr	s18, [r0, #4]
 8008144:	edd6 2a00 	vldr	s5, [r6]
 8008148:	ed98 7a00 	vldr	s14, [r8]
 800814c:	edd4 0a01 	vldr	s1, [r4, #4]
 8008150:	ed91 6a01 	vldr	s12, [r1, #4]
 8008154:	edd7 5a00 	vldr	s11, [r7]
 8008158:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800815c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008160:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008164:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008168:	ee38 4a44 	vsub.f32	s8, s16, s8
 800816c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008170:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008174:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008178:	ee75 8a69 	vsub.f32	s17, s10, s19
 800817c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008180:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008184:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008188:	ee30 2a06 	vadd.f32	s4, s0, s12
 800818c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008190:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008194:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008198:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800819c:	ee32 2a48 	vsub.f32	s4, s4, s16
 80081a0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80081a4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80081a8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80081ac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80081b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80081b4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80081b8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80081bc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80081c0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80081c4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80081c8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80081cc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80081d0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80081d4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80081d8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80081dc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80081e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80081e4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80081e8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80081ec:	ee76 5a43 	vsub.f32	s11, s12, s6
 80081f0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80081f4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80081f8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80081fc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008200:	ee30 0a80 	vadd.f32	s0, s1, s0
 8008204:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008208:	ee33 6a06 	vadd.f32	s12, s6, s12
 800820c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008210:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008214:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008218:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800821c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008220:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008224:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008228:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800822c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008230:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008234:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008238:	ee35 3a03 	vadd.f32	s6, s10, s6
 800823c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008240:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008244:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008248:	ed9d 4a02 	vldr	s8, [sp, #8]
 800824c:	ed82 1a01 	vstr	s2, [r2, #4]
 8008250:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008254:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008258:	ed9d 7a01 	vldr	s14, [sp, #4]
 800825c:	ed81 3a00 	vstr	s6, [r1]
 8008260:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008264:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008268:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800826c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008270:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008274:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008278:	ee27 7a24 	vmul.f32	s14, s14, s9
 800827c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008280:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008284:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008288:	ed9d 4a00 	vldr	s8, [sp]
 800828c:	edc1 6a01 	vstr	s13, [r1, #4]
 8008290:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008294:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008298:	ee64 9a29 	vmul.f32	s19, s8, s19
 800829c:	ee24 4a25 	vmul.f32	s8, s8, s11
 80082a0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80082a4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80082a8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80082ac:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80082b0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80082b4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80082b8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80082bc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80082c0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80082c4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80082c8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80082cc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80082d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80082d4:	44d9      	add	r9, fp
 80082d6:	45ca      	cmp	sl, r9
 80082d8:	ed84 9a00 	vstr	s18, [r4]
 80082dc:	edc4 3a01 	vstr	s7, [r4, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	ed07 7a01 	vstr	s14, [r7, #-4]
 80082e6:	edc7 2a00 	vstr	s5, [r7]
 80082ea:	4419      	add	r1, r3
 80082ec:	ed80 2a00 	vstr	s4, [r0]
 80082f0:	ed80 8a01 	vstr	s16, [r0, #4]
 80082f4:	441c      	add	r4, r3
 80082f6:	ed48 1a01 	vstr	s3, [r8, #-4]
 80082fa:	ed88 0a00 	vstr	s0, [r8]
 80082fe:	441f      	add	r7, r3
 8008300:	ed46 4a01 	vstr	s9, [r6, #-4]
 8008304:	4418      	add	r0, r3
 8008306:	edc6 9a00 	vstr	s19, [r6]
 800830a:	4498      	add	r8, r3
 800830c:	edc5 0a00 	vstr	s1, [r5]
 8008310:	ed85 6a01 	vstr	s12, [r5, #4]
 8008314:	441e      	add	r6, r3
 8008316:	441d      	add	r5, r3
 8008318:	f63f aeea 	bhi.w	80080f0 <arm_radix8_butterfly_f32+0x328>
 800831c:	9a03      	ldr	r2, [sp, #12]
 800831e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008320:	3201      	adds	r2, #1
 8008322:	4611      	mov	r1, r2
 8008324:	9203      	str	r2, [sp, #12]
 8008326:	9a04      	ldr	r2, [sp, #16]
 8008328:	4402      	add	r2, r0
 800832a:	9204      	str	r2, [sp, #16]
 800832c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800832e:	9a05      	ldr	r2, [sp, #20]
 8008330:	4402      	add	r2, r0
 8008332:	9205      	str	r2, [sp, #20]
 8008334:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008336:	9a07      	ldr	r2, [sp, #28]
 8008338:	4402      	add	r2, r0
 800833a:	9207      	str	r2, [sp, #28]
 800833c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800833e:	9a06      	ldr	r2, [sp, #24]
 8008340:	4402      	add	r2, r0
 8008342:	9206      	str	r2, [sp, #24]
 8008344:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008346:	4496      	add	lr, r2
 8008348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800834a:	4494      	add	ip, r2
 800834c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800834e:	3208      	adds	r2, #8
 8008350:	920f      	str	r2, [sp, #60]	; 0x3c
 8008352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008354:	3208      	adds	r2, #8
 8008356:	920e      	str	r2, [sp, #56]	; 0x38
 8008358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800835a:	3208      	adds	r2, #8
 800835c:	920d      	str	r2, [sp, #52]	; 0x34
 800835e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008360:	3208      	adds	r2, #8
 8008362:	920c      	str	r2, [sp, #48]	; 0x30
 8008364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008366:	3208      	adds	r2, #8
 8008368:	920b      	str	r2, [sp, #44]	; 0x2c
 800836a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800836c:	3208      	adds	r2, #8
 800836e:	920a      	str	r2, [sp, #40]	; 0x28
 8008370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008372:	3208      	adds	r2, #8
 8008374:	9209      	str	r2, [sp, #36]	; 0x24
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	3208      	adds	r2, #8
 800837a:	9208      	str	r2, [sp, #32]
 800837c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800837e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008380:	4288      	cmp	r0, r1
 8008382:	4622      	mov	r2, r4
 8008384:	d007      	beq.n	8008396 <arm_radix8_butterfly_f32+0x5ce>
 8008386:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008388:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800838c:	4621      	mov	r1, r4
 800838e:	4401      	add	r1, r0
 8008390:	9110      	str	r1, [sp, #64]	; 0x40
 8008392:	9804      	ldr	r0, [sp, #16]
 8008394:	e67c      	b.n	8008090 <arm_radix8_butterfly_f32+0x2c8>
 8008396:	4683      	mov	fp, r0
 8008398:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800839c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800839e:	e524      	b.n	8007dea <arm_radix8_butterfly_f32+0x22>
 80083a0:	b01d      	add	sp, #116	; 0x74
 80083a2:	ecbd 8b10 	vpop	{d8-d15}
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	bf00      	nop

080083ac <__cvt>:
 80083ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	ec55 4b10 	vmov	r4, r5, d0
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	460e      	mov	r6, r1
 80083b8:	4619      	mov	r1, r3
 80083ba:	462b      	mov	r3, r5
 80083bc:	bfbb      	ittet	lt
 80083be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083c2:	461d      	movlt	r5, r3
 80083c4:	2300      	movge	r3, #0
 80083c6:	232d      	movlt	r3, #45	; 0x2d
 80083c8:	700b      	strb	r3, [r1, #0]
 80083ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083d0:	4691      	mov	r9, r2
 80083d2:	f023 0820 	bic.w	r8, r3, #32
 80083d6:	bfbc      	itt	lt
 80083d8:	4622      	movlt	r2, r4
 80083da:	4614      	movlt	r4, r2
 80083dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083e0:	d005      	beq.n	80083ee <__cvt+0x42>
 80083e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083e6:	d100      	bne.n	80083ea <__cvt+0x3e>
 80083e8:	3601      	adds	r6, #1
 80083ea:	2102      	movs	r1, #2
 80083ec:	e000      	b.n	80083f0 <__cvt+0x44>
 80083ee:	2103      	movs	r1, #3
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	ab02      	add	r3, sp, #8
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	ec45 4b10 	vmov	d0, r4, r5
 80083fc:	4653      	mov	r3, sl
 80083fe:	4632      	mov	r2, r6
 8008400:	f000 fe56 	bl	80090b0 <_dtoa_r>
 8008404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008408:	4607      	mov	r7, r0
 800840a:	d102      	bne.n	8008412 <__cvt+0x66>
 800840c:	f019 0f01 	tst.w	r9, #1
 8008410:	d022      	beq.n	8008458 <__cvt+0xac>
 8008412:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008416:	eb07 0906 	add.w	r9, r7, r6
 800841a:	d110      	bne.n	800843e <__cvt+0x92>
 800841c:	783b      	ldrb	r3, [r7, #0]
 800841e:	2b30      	cmp	r3, #48	; 0x30
 8008420:	d10a      	bne.n	8008438 <__cvt+0x8c>
 8008422:	2200      	movs	r2, #0
 8008424:	2300      	movs	r3, #0
 8008426:	4620      	mov	r0, r4
 8008428:	4629      	mov	r1, r5
 800842a:	f7f8 fbcd 	bl	8000bc8 <__aeabi_dcmpeq>
 800842e:	b918      	cbnz	r0, 8008438 <__cvt+0x8c>
 8008430:	f1c6 0601 	rsb	r6, r6, #1
 8008434:	f8ca 6000 	str.w	r6, [sl]
 8008438:	f8da 3000 	ldr.w	r3, [sl]
 800843c:	4499      	add	r9, r3
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 fbbf 	bl	8000bc8 <__aeabi_dcmpeq>
 800844a:	b108      	cbz	r0, 8008450 <__cvt+0xa4>
 800844c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008450:	2230      	movs	r2, #48	; 0x30
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	454b      	cmp	r3, r9
 8008456:	d307      	bcc.n	8008468 <__cvt+0xbc>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800845c:	1bdb      	subs	r3, r3, r7
 800845e:	4638      	mov	r0, r7
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	b004      	add	sp, #16
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	1c59      	adds	r1, r3, #1
 800846a:	9103      	str	r1, [sp, #12]
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e7f0      	b.n	8008452 <__cvt+0xa6>

08008470 <__exponent>:
 8008470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008472:	4603      	mov	r3, r0
 8008474:	2900      	cmp	r1, #0
 8008476:	bfb8      	it	lt
 8008478:	4249      	neglt	r1, r1
 800847a:	f803 2b02 	strb.w	r2, [r3], #2
 800847e:	bfb4      	ite	lt
 8008480:	222d      	movlt	r2, #45	; 0x2d
 8008482:	222b      	movge	r2, #43	; 0x2b
 8008484:	2909      	cmp	r1, #9
 8008486:	7042      	strb	r2, [r0, #1]
 8008488:	dd2a      	ble.n	80084e0 <__exponent+0x70>
 800848a:	f10d 0207 	add.w	r2, sp, #7
 800848e:	4617      	mov	r7, r2
 8008490:	260a      	movs	r6, #10
 8008492:	4694      	mov	ip, r2
 8008494:	fb91 f5f6 	sdiv	r5, r1, r6
 8008498:	fb06 1415 	mls	r4, r6, r5, r1
 800849c:	3430      	adds	r4, #48	; 0x30
 800849e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80084a2:	460c      	mov	r4, r1
 80084a4:	2c63      	cmp	r4, #99	; 0x63
 80084a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80084aa:	4629      	mov	r1, r5
 80084ac:	dcf1      	bgt.n	8008492 <__exponent+0x22>
 80084ae:	3130      	adds	r1, #48	; 0x30
 80084b0:	f1ac 0402 	sub.w	r4, ip, #2
 80084b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80084b8:	1c41      	adds	r1, r0, #1
 80084ba:	4622      	mov	r2, r4
 80084bc:	42ba      	cmp	r2, r7
 80084be:	d30a      	bcc.n	80084d6 <__exponent+0x66>
 80084c0:	f10d 0209 	add.w	r2, sp, #9
 80084c4:	eba2 020c 	sub.w	r2, r2, ip
 80084c8:	42bc      	cmp	r4, r7
 80084ca:	bf88      	it	hi
 80084cc:	2200      	movhi	r2, #0
 80084ce:	4413      	add	r3, r2
 80084d0:	1a18      	subs	r0, r3, r0
 80084d2:	b003      	add	sp, #12
 80084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80084da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80084de:	e7ed      	b.n	80084bc <__exponent+0x4c>
 80084e0:	2330      	movs	r3, #48	; 0x30
 80084e2:	3130      	adds	r1, #48	; 0x30
 80084e4:	7083      	strb	r3, [r0, #2]
 80084e6:	70c1      	strb	r1, [r0, #3]
 80084e8:	1d03      	adds	r3, r0, #4
 80084ea:	e7f1      	b.n	80084d0 <__exponent+0x60>

080084ec <_printf_float>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	ed2d 8b02 	vpush	{d8}
 80084f4:	b08d      	sub	sp, #52	; 0x34
 80084f6:	460c      	mov	r4, r1
 80084f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084fc:	4616      	mov	r6, r2
 80084fe:	461f      	mov	r7, r3
 8008500:	4605      	mov	r5, r0
 8008502:	f000 fcd5 	bl	8008eb0 <_localeconv_r>
 8008506:	f8d0 a000 	ldr.w	sl, [r0]
 800850a:	4650      	mov	r0, sl
 800850c:	f7f7 ff30 	bl	8000370 <strlen>
 8008510:	2300      	movs	r3, #0
 8008512:	930a      	str	r3, [sp, #40]	; 0x28
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	f8d8 3000 	ldr.w	r3, [r8]
 800851c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008520:	3307      	adds	r3, #7
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	f103 0208 	add.w	r2, r3, #8
 800852a:	f8c8 2000 	str.w	r2, [r8]
 800852e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	f8cd 8018 	str.w	r8, [sp, #24]
 800853c:	ee08 0a10 	vmov	s16, r0
 8008540:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008548:	4b9e      	ldr	r3, [pc, #632]	; (80087c4 <_printf_float+0x2d8>)
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	f7f8 fb6d 	bl	8000c2c <__aeabi_dcmpun>
 8008552:	bb88      	cbnz	r0, 80085b8 <_printf_float+0xcc>
 8008554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008558:	4b9a      	ldr	r3, [pc, #616]	; (80087c4 <_printf_float+0x2d8>)
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	f7f8 fb47 	bl	8000bf0 <__aeabi_dcmple>
 8008562:	bb48      	cbnz	r0, 80085b8 <_printf_float+0xcc>
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	4640      	mov	r0, r8
 800856a:	4649      	mov	r1, r9
 800856c:	f7f8 fb36 	bl	8000bdc <__aeabi_dcmplt>
 8008570:	b110      	cbz	r0, 8008578 <_printf_float+0x8c>
 8008572:	232d      	movs	r3, #45	; 0x2d
 8008574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008578:	4a93      	ldr	r2, [pc, #588]	; (80087c8 <_printf_float+0x2dc>)
 800857a:	4b94      	ldr	r3, [pc, #592]	; (80087cc <_printf_float+0x2e0>)
 800857c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008580:	bf94      	ite	ls
 8008582:	4690      	movls	r8, r2
 8008584:	4698      	movhi	r8, r3
 8008586:	2303      	movs	r3, #3
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	9700      	str	r7, [sp, #0]
 8008598:	4633      	mov	r3, r6
 800859a:	aa0b      	add	r2, sp, #44	; 0x2c
 800859c:	4621      	mov	r1, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f9da 	bl	8008958 <_printf_common>
 80085a4:	3001      	adds	r0, #1
 80085a6:	f040 8090 	bne.w	80086ca <_printf_float+0x1de>
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	b00d      	add	sp, #52	; 0x34
 80085b0:	ecbd 8b02 	vpop	{d8}
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	4642      	mov	r2, r8
 80085ba:	464b      	mov	r3, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f8 fb34 	bl	8000c2c <__aeabi_dcmpun>
 80085c4:	b140      	cbz	r0, 80085d8 <_printf_float+0xec>
 80085c6:	464b      	mov	r3, r9
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bfbc      	itt	lt
 80085cc:	232d      	movlt	r3, #45	; 0x2d
 80085ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085d2:	4a7f      	ldr	r2, [pc, #508]	; (80087d0 <_printf_float+0x2e4>)
 80085d4:	4b7f      	ldr	r3, [pc, #508]	; (80087d4 <_printf_float+0x2e8>)
 80085d6:	e7d1      	b.n	800857c <_printf_float+0x90>
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085de:	9206      	str	r2, [sp, #24]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	d13f      	bne.n	8008664 <_printf_float+0x178>
 80085e4:	2306      	movs	r3, #6
 80085e6:	6063      	str	r3, [r4, #4]
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	6861      	ldr	r1, [r4, #4]
 80085ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085f0:	2300      	movs	r3, #0
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	ab0a      	add	r3, sp, #40	; 0x28
 80085f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085fa:	ab09      	add	r3, sp, #36	; 0x24
 80085fc:	ec49 8b10 	vmov	d0, r8, r9
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	6022      	str	r2, [r4, #0]
 8008604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fecf 	bl	80083ac <__cvt>
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008612:	2b47      	cmp	r3, #71	; 0x47
 8008614:	4680      	mov	r8, r0
 8008616:	d108      	bne.n	800862a <_printf_float+0x13e>
 8008618:	1cc8      	adds	r0, r1, #3
 800861a:	db02      	blt.n	8008622 <_printf_float+0x136>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	4299      	cmp	r1, r3
 8008620:	dd41      	ble.n	80086a6 <_printf_float+0x1ba>
 8008622:	f1ab 0302 	sub.w	r3, fp, #2
 8008626:	fa5f fb83 	uxtb.w	fp, r3
 800862a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800862e:	d820      	bhi.n	8008672 <_printf_float+0x186>
 8008630:	3901      	subs	r1, #1
 8008632:	465a      	mov	r2, fp
 8008634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008638:	9109      	str	r1, [sp, #36]	; 0x24
 800863a:	f7ff ff19 	bl	8008470 <__exponent>
 800863e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008640:	1813      	adds	r3, r2, r0
 8008642:	2a01      	cmp	r2, #1
 8008644:	4681      	mov	r9, r0
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	dc02      	bgt.n	8008650 <_printf_float+0x164>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	07d2      	lsls	r2, r2, #31
 800864e:	d501      	bpl.n	8008654 <_printf_float+0x168>
 8008650:	3301      	adds	r3, #1
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008658:	2b00      	cmp	r3, #0
 800865a:	d09c      	beq.n	8008596 <_printf_float+0xaa>
 800865c:	232d      	movs	r3, #45	; 0x2d
 800865e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008662:	e798      	b.n	8008596 <_printf_float+0xaa>
 8008664:	9a06      	ldr	r2, [sp, #24]
 8008666:	2a47      	cmp	r2, #71	; 0x47
 8008668:	d1be      	bne.n	80085e8 <_printf_float+0xfc>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1bc      	bne.n	80085e8 <_printf_float+0xfc>
 800866e:	2301      	movs	r3, #1
 8008670:	e7b9      	b.n	80085e6 <_printf_float+0xfa>
 8008672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008676:	d118      	bne.n	80086aa <_printf_float+0x1be>
 8008678:	2900      	cmp	r1, #0
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	dd0b      	ble.n	8008696 <_printf_float+0x1aa>
 800867e:	6121      	str	r1, [r4, #16]
 8008680:	b913      	cbnz	r3, 8008688 <_printf_float+0x19c>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	07d0      	lsls	r0, r2, #31
 8008686:	d502      	bpl.n	800868e <_printf_float+0x1a2>
 8008688:	3301      	adds	r3, #1
 800868a:	440b      	add	r3, r1
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008690:	f04f 0900 	mov.w	r9, #0
 8008694:	e7de      	b.n	8008654 <_printf_float+0x168>
 8008696:	b913      	cbnz	r3, 800869e <_printf_float+0x1b2>
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	07d2      	lsls	r2, r2, #31
 800869c:	d501      	bpl.n	80086a2 <_printf_float+0x1b6>
 800869e:	3302      	adds	r3, #2
 80086a0:	e7f4      	b.n	800868c <_printf_float+0x1a0>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7f2      	b.n	800868c <_printf_float+0x1a0>
 80086a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ac:	4299      	cmp	r1, r3
 80086ae:	db05      	blt.n	80086bc <_printf_float+0x1d0>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	6121      	str	r1, [r4, #16]
 80086b4:	07d8      	lsls	r0, r3, #31
 80086b6:	d5ea      	bpl.n	800868e <_printf_float+0x1a2>
 80086b8:	1c4b      	adds	r3, r1, #1
 80086ba:	e7e7      	b.n	800868c <_printf_float+0x1a0>
 80086bc:	2900      	cmp	r1, #0
 80086be:	bfd4      	ite	le
 80086c0:	f1c1 0202 	rsble	r2, r1, #2
 80086c4:	2201      	movgt	r2, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	e7e0      	b.n	800868c <_printf_float+0x1a0>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	055a      	lsls	r2, r3, #21
 80086ce:	d407      	bmi.n	80086e0 <_printf_float+0x1f4>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	4642      	mov	r2, r8
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d12c      	bne.n	8008738 <_printf_float+0x24c>
 80086de:	e764      	b.n	80085aa <_printf_float+0xbe>
 80086e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086e4:	f240 80e0 	bls.w	80088a8 <_printf_float+0x3bc>
 80086e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086ec:	2200      	movs	r2, #0
 80086ee:	2300      	movs	r3, #0
 80086f0:	f7f8 fa6a 	bl	8000bc8 <__aeabi_dcmpeq>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d034      	beq.n	8008762 <_printf_float+0x276>
 80086f8:	4a37      	ldr	r2, [pc, #220]	; (80087d8 <_printf_float+0x2ec>)
 80086fa:	2301      	movs	r3, #1
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	f43f af51 	beq.w	80085aa <_printf_float+0xbe>
 8008708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870c:	429a      	cmp	r2, r3
 800870e:	db02      	blt.n	8008716 <_printf_float+0x22a>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	07d8      	lsls	r0, r3, #31
 8008714:	d510      	bpl.n	8008738 <_printf_float+0x24c>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af41 	beq.w	80085aa <_printf_float+0xbe>
 8008728:	f04f 0800 	mov.w	r8, #0
 800872c:	f104 091a 	add.w	r9, r4, #26
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	3b01      	subs	r3, #1
 8008734:	4543      	cmp	r3, r8
 8008736:	dc09      	bgt.n	800874c <_printf_float+0x260>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	f100 8107 	bmi.w	800894e <_printf_float+0x462>
 8008740:	68e0      	ldr	r0, [r4, #12]
 8008742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008744:	4298      	cmp	r0, r3
 8008746:	bfb8      	it	lt
 8008748:	4618      	movlt	r0, r3
 800874a:	e730      	b.n	80085ae <_printf_float+0xc2>
 800874c:	2301      	movs	r3, #1
 800874e:	464a      	mov	r2, r9
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af27 	beq.w	80085aa <_printf_float+0xbe>
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	e7e6      	b.n	8008730 <_printf_float+0x244>
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc39      	bgt.n	80087dc <_printf_float+0x2f0>
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <_printf_float+0x2ec>)
 800876a:	2301      	movs	r3, #1
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f af19 	beq.w	80085aa <_printf_float+0xbe>
 8008778:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800877c:	4313      	orrs	r3, r2
 800877e:	d102      	bne.n	8008786 <_printf_float+0x29a>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	07d9      	lsls	r1, r3, #31
 8008784:	d5d8      	bpl.n	8008738 <_printf_float+0x24c>
 8008786:	ee18 3a10 	vmov	r3, s16
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af09 	beq.w	80085aa <_printf_float+0xbe>
 8008798:	f04f 0900 	mov.w	r9, #0
 800879c:	f104 0a1a 	add.w	sl, r4, #26
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	425b      	negs	r3, r3
 80087a4:	454b      	cmp	r3, r9
 80087a6:	dc01      	bgt.n	80087ac <_printf_float+0x2c0>
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	e792      	b.n	80086d2 <_printf_float+0x1e6>
 80087ac:	2301      	movs	r3, #1
 80087ae:	4652      	mov	r2, sl
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f aef7 	beq.w	80085aa <_printf_float+0xbe>
 80087bc:	f109 0901 	add.w	r9, r9, #1
 80087c0:	e7ee      	b.n	80087a0 <_printf_float+0x2b4>
 80087c2:	bf00      	nop
 80087c4:	7fefffff 	.word	0x7fefffff
 80087c8:	0801ea88 	.word	0x0801ea88
 80087cc:	0801ea8c 	.word	0x0801ea8c
 80087d0:	0801ea90 	.word	0x0801ea90
 80087d4:	0801ea94 	.word	0x0801ea94
 80087d8:	0801ea98 	.word	0x0801ea98
 80087dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087e0:	429a      	cmp	r2, r3
 80087e2:	bfa8      	it	ge
 80087e4:	461a      	movge	r2, r3
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	4691      	mov	r9, r2
 80087ea:	dc37      	bgt.n	800885c <_printf_float+0x370>
 80087ec:	f04f 0b00 	mov.w	fp, #0
 80087f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087f4:	f104 021a 	add.w	r2, r4, #26
 80087f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	eba3 0309 	sub.w	r3, r3, r9
 8008800:	455b      	cmp	r3, fp
 8008802:	dc33      	bgt.n	800886c <_printf_float+0x380>
 8008804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008808:	429a      	cmp	r2, r3
 800880a:	db3b      	blt.n	8008884 <_printf_float+0x398>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	07da      	lsls	r2, r3, #31
 8008810:	d438      	bmi.n	8008884 <_printf_float+0x398>
 8008812:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008816:	eba2 0903 	sub.w	r9, r2, r3
 800881a:	9b05      	ldr	r3, [sp, #20]
 800881c:	1ad2      	subs	r2, r2, r3
 800881e:	4591      	cmp	r9, r2
 8008820:	bfa8      	it	ge
 8008822:	4691      	movge	r9, r2
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	dc35      	bgt.n	8008896 <_printf_float+0x3aa>
 800882a:	f04f 0800 	mov.w	r8, #0
 800882e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008832:	f104 0a1a 	add.w	sl, r4, #26
 8008836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	eba3 0309 	sub.w	r3, r3, r9
 8008840:	4543      	cmp	r3, r8
 8008842:	f77f af79 	ble.w	8008738 <_printf_float+0x24c>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f aeaa 	beq.w	80085aa <_printf_float+0xbe>
 8008856:	f108 0801 	add.w	r8, r8, #1
 800885a:	e7ec      	b.n	8008836 <_printf_float+0x34a>
 800885c:	4613      	mov	r3, r2
 800885e:	4631      	mov	r1, r6
 8008860:	4642      	mov	r2, r8
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	d1c0      	bne.n	80087ec <_printf_float+0x300>
 800886a:	e69e      	b.n	80085aa <_printf_float+0xbe>
 800886c:	2301      	movs	r3, #1
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	9205      	str	r2, [sp, #20]
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f ae97 	beq.w	80085aa <_printf_float+0xbe>
 800887c:	9a05      	ldr	r2, [sp, #20]
 800887e:	f10b 0b01 	add.w	fp, fp, #1
 8008882:	e7b9      	b.n	80087f8 <_printf_float+0x30c>
 8008884:	ee18 3a10 	vmov	r3, s16
 8008888:	4652      	mov	r2, sl
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	d1be      	bne.n	8008812 <_printf_float+0x326>
 8008894:	e689      	b.n	80085aa <_printf_float+0xbe>
 8008896:	9a05      	ldr	r2, [sp, #20]
 8008898:	464b      	mov	r3, r9
 800889a:	4442      	add	r2, r8
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	d1c1      	bne.n	800882a <_printf_float+0x33e>
 80088a6:	e680      	b.n	80085aa <_printf_float+0xbe>
 80088a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088aa:	2a01      	cmp	r2, #1
 80088ac:	dc01      	bgt.n	80088b2 <_printf_float+0x3c6>
 80088ae:	07db      	lsls	r3, r3, #31
 80088b0:	d53a      	bpl.n	8008928 <_printf_float+0x43c>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4642      	mov	r2, r8
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f ae74 	beq.w	80085aa <_printf_float+0xbe>
 80088c2:	ee18 3a10 	vmov	r3, s16
 80088c6:	4652      	mov	r2, sl
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f ae6b 	beq.w	80085aa <_printf_float+0xbe>
 80088d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80088e0:	f7f8 f972 	bl	8000bc8 <__aeabi_dcmpeq>
 80088e4:	b9d8      	cbnz	r0, 800891e <_printf_float+0x432>
 80088e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80088ea:	f108 0201 	add.w	r2, r8, #1
 80088ee:	4631      	mov	r1, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b8      	blx	r7
 80088f4:	3001      	adds	r0, #1
 80088f6:	d10e      	bne.n	8008916 <_printf_float+0x42a>
 80088f8:	e657      	b.n	80085aa <_printf_float+0xbe>
 80088fa:	2301      	movs	r3, #1
 80088fc:	4652      	mov	r2, sl
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	f43f ae50 	beq.w	80085aa <_printf_float+0xbe>
 800890a:	f108 0801 	add.w	r8, r8, #1
 800890e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008910:	3b01      	subs	r3, #1
 8008912:	4543      	cmp	r3, r8
 8008914:	dcf1      	bgt.n	80088fa <_printf_float+0x40e>
 8008916:	464b      	mov	r3, r9
 8008918:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800891c:	e6da      	b.n	80086d4 <_printf_float+0x1e8>
 800891e:	f04f 0800 	mov.w	r8, #0
 8008922:	f104 0a1a 	add.w	sl, r4, #26
 8008926:	e7f2      	b.n	800890e <_printf_float+0x422>
 8008928:	2301      	movs	r3, #1
 800892a:	4642      	mov	r2, r8
 800892c:	e7df      	b.n	80088ee <_printf_float+0x402>
 800892e:	2301      	movs	r3, #1
 8008930:	464a      	mov	r2, r9
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	f43f ae36 	beq.w	80085aa <_printf_float+0xbe>
 800893e:	f108 0801 	add.w	r8, r8, #1
 8008942:	68e3      	ldr	r3, [r4, #12]
 8008944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008946:	1a5b      	subs	r3, r3, r1
 8008948:	4543      	cmp	r3, r8
 800894a:	dcf0      	bgt.n	800892e <_printf_float+0x442>
 800894c:	e6f8      	b.n	8008740 <_printf_float+0x254>
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	f104 0919 	add.w	r9, r4, #25
 8008956:	e7f4      	b.n	8008942 <_printf_float+0x456>

08008958 <_printf_common>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	4616      	mov	r6, r2
 800895e:	4699      	mov	r9, r3
 8008960:	688a      	ldr	r2, [r1, #8]
 8008962:	690b      	ldr	r3, [r1, #16]
 8008964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008968:	4293      	cmp	r3, r2
 800896a:	bfb8      	it	lt
 800896c:	4613      	movlt	r3, r2
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008974:	4607      	mov	r7, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b10a      	cbz	r2, 800897e <_printf_common+0x26>
 800897a:	3301      	adds	r3, #1
 800897c:	6033      	str	r3, [r6, #0]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0699      	lsls	r1, r3, #26
 8008982:	bf42      	ittt	mi
 8008984:	6833      	ldrmi	r3, [r6, #0]
 8008986:	3302      	addmi	r3, #2
 8008988:	6033      	strmi	r3, [r6, #0]
 800898a:	6825      	ldr	r5, [r4, #0]
 800898c:	f015 0506 	ands.w	r5, r5, #6
 8008990:	d106      	bne.n	80089a0 <_printf_common+0x48>
 8008992:	f104 0a19 	add.w	sl, r4, #25
 8008996:	68e3      	ldr	r3, [r4, #12]
 8008998:	6832      	ldr	r2, [r6, #0]
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	42ab      	cmp	r3, r5
 800899e:	dc26      	bgt.n	80089ee <_printf_common+0x96>
 80089a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089a4:	1e13      	subs	r3, r2, #0
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	bf18      	it	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	0692      	lsls	r2, r2, #26
 80089ae:	d42b      	bmi.n	8008a08 <_printf_common+0xb0>
 80089b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089b4:	4649      	mov	r1, r9
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	3001      	adds	r0, #1
 80089bc:	d01e      	beq.n	80089fc <_printf_common+0xa4>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	6922      	ldr	r2, [r4, #16]
 80089c2:	f003 0306 	and.w	r3, r3, #6
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	bf02      	ittt	eq
 80089ca:	68e5      	ldreq	r5, [r4, #12]
 80089cc:	6833      	ldreq	r3, [r6, #0]
 80089ce:	1aed      	subeq	r5, r5, r3
 80089d0:	68a3      	ldr	r3, [r4, #8]
 80089d2:	bf0c      	ite	eq
 80089d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d8:	2500      	movne	r5, #0
 80089da:	4293      	cmp	r3, r2
 80089dc:	bfc4      	itt	gt
 80089de:	1a9b      	subgt	r3, r3, r2
 80089e0:	18ed      	addgt	r5, r5, r3
 80089e2:	2600      	movs	r6, #0
 80089e4:	341a      	adds	r4, #26
 80089e6:	42b5      	cmp	r5, r6
 80089e8:	d11a      	bne.n	8008a20 <_printf_common+0xc8>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e008      	b.n	8008a00 <_printf_common+0xa8>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4652      	mov	r2, sl
 80089f2:	4649      	mov	r1, r9
 80089f4:	4638      	mov	r0, r7
 80089f6:	47c0      	blx	r8
 80089f8:	3001      	adds	r0, #1
 80089fa:	d103      	bne.n	8008a04 <_printf_common+0xac>
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a04:	3501      	adds	r5, #1
 8008a06:	e7c6      	b.n	8008996 <_printf_common+0x3e>
 8008a08:	18e1      	adds	r1, r4, r3
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	2030      	movs	r0, #48	; 0x30
 8008a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a12:	4422      	add	r2, r4
 8008a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	e7c7      	b.n	80089b0 <_printf_common+0x58>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4622      	mov	r2, r4
 8008a24:	4649      	mov	r1, r9
 8008a26:	4638      	mov	r0, r7
 8008a28:	47c0      	blx	r8
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d0e6      	beq.n	80089fc <_printf_common+0xa4>
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7d9      	b.n	80089e6 <_printf_common+0x8e>
	...

08008a34 <_printf_i>:
 8008a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a38:	7e0f      	ldrb	r7, [r1, #24]
 8008a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a3c:	2f78      	cmp	r7, #120	; 0x78
 8008a3e:	4691      	mov	r9, r2
 8008a40:	4680      	mov	r8, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	469a      	mov	sl, r3
 8008a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a4a:	d807      	bhi.n	8008a5c <_printf_i+0x28>
 8008a4c:	2f62      	cmp	r7, #98	; 0x62
 8008a4e:	d80a      	bhi.n	8008a66 <_printf_i+0x32>
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	f000 80d4 	beq.w	8008bfe <_printf_i+0x1ca>
 8008a56:	2f58      	cmp	r7, #88	; 0x58
 8008a58:	f000 80c0 	beq.w	8008bdc <_printf_i+0x1a8>
 8008a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a64:	e03a      	b.n	8008adc <_printf_i+0xa8>
 8008a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a6a:	2b15      	cmp	r3, #21
 8008a6c:	d8f6      	bhi.n	8008a5c <_printf_i+0x28>
 8008a6e:	a101      	add	r1, pc, #4	; (adr r1, 8008a74 <_printf_i+0x40>)
 8008a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a74:	08008acd 	.word	0x08008acd
 8008a78:	08008ae1 	.word	0x08008ae1
 8008a7c:	08008a5d 	.word	0x08008a5d
 8008a80:	08008a5d 	.word	0x08008a5d
 8008a84:	08008a5d 	.word	0x08008a5d
 8008a88:	08008a5d 	.word	0x08008a5d
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008a5d 	.word	0x08008a5d
 8008a94:	08008a5d 	.word	0x08008a5d
 8008a98:	08008a5d 	.word	0x08008a5d
 8008a9c:	08008a5d 	.word	0x08008a5d
 8008aa0:	08008be5 	.word	0x08008be5
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b9f 	.word	0x08008b9f
 8008aac:	08008a5d 	.word	0x08008a5d
 8008ab0:	08008a5d 	.word	0x08008a5d
 8008ab4:	08008c07 	.word	0x08008c07
 8008ab8:	08008a5d 	.word	0x08008a5d
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008a5d 	.word	0x08008a5d
 8008ac4:	08008a5d 	.word	0x08008a5d
 8008ac8:	08008ba7 	.word	0x08008ba7
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	602a      	str	r2, [r5, #0]
 8008ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008adc:	2301      	movs	r3, #1
 8008ade:	e09f      	b.n	8008c20 <_printf_i+0x1ec>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	0607      	lsls	r7, r0, #24
 8008ae6:	f103 0104 	add.w	r1, r3, #4
 8008aea:	6029      	str	r1, [r5, #0]
 8008aec:	d501      	bpl.n	8008af2 <_printf_i+0xbe>
 8008aee:	681e      	ldr	r6, [r3, #0]
 8008af0:	e003      	b.n	8008afa <_printf_i+0xc6>
 8008af2:	0646      	lsls	r6, r0, #25
 8008af4:	d5fb      	bpl.n	8008aee <_printf_i+0xba>
 8008af6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	da03      	bge.n	8008b06 <_printf_i+0xd2>
 8008afe:	232d      	movs	r3, #45	; 0x2d
 8008b00:	4276      	negs	r6, r6
 8008b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b06:	485a      	ldr	r0, [pc, #360]	; (8008c70 <_printf_i+0x23c>)
 8008b08:	230a      	movs	r3, #10
 8008b0a:	e012      	b.n	8008b32 <_printf_i+0xfe>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	6029      	str	r1, [r5, #0]
 8008b14:	0605      	lsls	r5, r0, #24
 8008b16:	d501      	bpl.n	8008b1c <_printf_i+0xe8>
 8008b18:	681e      	ldr	r6, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <_printf_i+0xee>
 8008b1c:	0641      	lsls	r1, r0, #25
 8008b1e:	d5fb      	bpl.n	8008b18 <_printf_i+0xe4>
 8008b20:	881e      	ldrh	r6, [r3, #0]
 8008b22:	4853      	ldr	r0, [pc, #332]	; (8008c70 <_printf_i+0x23c>)
 8008b24:	2f6f      	cmp	r7, #111	; 0x6f
 8008b26:	bf0c      	ite	eq
 8008b28:	2308      	moveq	r3, #8
 8008b2a:	230a      	movne	r3, #10
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b32:	6865      	ldr	r5, [r4, #4]
 8008b34:	60a5      	str	r5, [r4, #8]
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	bfa2      	ittt	ge
 8008b3a:	6821      	ldrge	r1, [r4, #0]
 8008b3c:	f021 0104 	bicge.w	r1, r1, #4
 8008b40:	6021      	strge	r1, [r4, #0]
 8008b42:	b90e      	cbnz	r6, 8008b48 <_printf_i+0x114>
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	d04b      	beq.n	8008be0 <_printf_i+0x1ac>
 8008b48:	4615      	mov	r5, r2
 8008b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b52:	5dc7      	ldrb	r7, [r0, r7]
 8008b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b58:	4637      	mov	r7, r6
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	d9f4      	bls.n	8008b4a <_printf_i+0x116>
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d10b      	bne.n	8008b7c <_printf_i+0x148>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07de      	lsls	r6, r3, #31
 8008b68:	d508      	bpl.n	8008b7c <_printf_i+0x148>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	6861      	ldr	r1, [r4, #4]
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	bfde      	ittt	le
 8008b72:	2330      	movle	r3, #48	; 0x30
 8008b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	6122      	str	r2, [r4, #16]
 8008b80:	f8cd a000 	str.w	sl, [sp]
 8008b84:	464b      	mov	r3, r9
 8008b86:	aa03      	add	r2, sp, #12
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fee4 	bl	8008958 <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d14a      	bne.n	8008c2a <_printf_i+0x1f6>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b004      	add	sp, #16
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	4833      	ldr	r0, [pc, #204]	; (8008c74 <_printf_i+0x240>)
 8008ba8:	2778      	movs	r7, #120	; 0x78
 8008baa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	061f      	lsls	r7, r3, #24
 8008bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0x18c>
 8008bba:	065f      	lsls	r7, r3, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2b6      	uxthmi	r6, r6
 8008bc0:	07df      	lsls	r7, r3, #31
 8008bc2:	bf48      	it	mi
 8008bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc8:	6029      	str	r1, [r5, #0]
 8008bca:	bf48      	it	mi
 8008bcc:	6023      	strmi	r3, [r4, #0]
 8008bce:	b91e      	cbnz	r6, 8008bd8 <_printf_i+0x1a4>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	f023 0320 	bic.w	r3, r3, #32
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	2310      	movs	r3, #16
 8008bda:	e7a7      	b.n	8008b2c <_printf_i+0xf8>
 8008bdc:	4824      	ldr	r0, [pc, #144]	; (8008c70 <_printf_i+0x23c>)
 8008bde:	e7e4      	b.n	8008baa <_printf_i+0x176>
 8008be0:	4615      	mov	r5, r2
 8008be2:	e7bd      	b.n	8008b60 <_printf_i+0x12c>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	6961      	ldr	r1, [r4, #20]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6028      	str	r0, [r5, #0]
 8008bee:	0635      	lsls	r5, r6, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1c4>
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1ca>
 8008bf8:	0670      	lsls	r0, r6, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1c0>
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4615      	mov	r5, r2
 8008c04:	e7bc      	b.n	8008b80 <_printf_i+0x14c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 fb5c 	bl	80002d0 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1ea>
 8008c1a:	1b40      	subs	r0, r0, r5
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	e7aa      	b.n	8008b80 <_printf_i+0x14c>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ad      	beq.n	8008b94 <_printf_i+0x160>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x232>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a6      	b.n	8008b98 <_printf_i+0x164>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09d      	beq.n	8008b94 <_printf_i+0x160>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x216>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x20a>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x226>
 8008c6e:	bf00      	nop
 8008c70:	0801ea9a 	.word	0x0801ea9a
 8008c74:	0801eaab 	.word	0x0801eaab

08008c78 <std>:
 8008c78:	2300      	movs	r3, #0
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c86:	6083      	str	r3, [r0, #8]
 8008c88:	8181      	strh	r1, [r0, #12]
 8008c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c8c:	81c2      	strh	r2, [r0, #14]
 8008c8e:	6183      	str	r3, [r0, #24]
 8008c90:	4619      	mov	r1, r3
 8008c92:	2208      	movs	r2, #8
 8008c94:	305c      	adds	r0, #92	; 0x5c
 8008c96:	f000 f902 	bl	8008e9e <memset>
 8008c9a:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <std+0x38>)
 8008c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <std+0x3c>)
 8008ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <std+0x40>)
 8008ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <std+0x44>)
 8008ca8:	6224      	str	r4, [r4, #32]
 8008caa:	6323      	str	r3, [r4, #48]	; 0x30
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	bf00      	nop
 8008cb0:	08008e19 	.word	0x08008e19
 8008cb4:	08008e3b 	.word	0x08008e3b
 8008cb8:	08008e73 	.word	0x08008e73
 8008cbc:	08008e97 	.word	0x08008e97

08008cc0 <stdio_exit_handler>:
 8008cc0:	4a02      	ldr	r2, [pc, #8]	; (8008ccc <stdio_exit_handler+0xc>)
 8008cc2:	4903      	ldr	r1, [pc, #12]	; (8008cd0 <stdio_exit_handler+0x10>)
 8008cc4:	4803      	ldr	r0, [pc, #12]	; (8008cd4 <stdio_exit_handler+0x14>)
 8008cc6:	f000 b869 	b.w	8008d9c <_fwalk_sglue>
 8008cca:	bf00      	nop
 8008ccc:	2000000c 	.word	0x2000000c
 8008cd0:	0800a949 	.word	0x0800a949
 8008cd4:	20000018 	.word	0x20000018

08008cd8 <cleanup_stdio>:
 8008cd8:	6841      	ldr	r1, [r0, #4]
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <cleanup_stdio+0x34>)
 8008cdc:	4299      	cmp	r1, r3
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	d001      	beq.n	8008ce8 <cleanup_stdio+0x10>
 8008ce4:	f001 fe30 	bl	800a948 <_fflush_r>
 8008ce8:	68a1      	ldr	r1, [r4, #8]
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <cleanup_stdio+0x38>)
 8008cec:	4299      	cmp	r1, r3
 8008cee:	d002      	beq.n	8008cf6 <cleanup_stdio+0x1e>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 fe29 	bl	800a948 <_fflush_r>
 8008cf6:	68e1      	ldr	r1, [r4, #12]
 8008cf8:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <cleanup_stdio+0x3c>)
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d004      	beq.n	8008d08 <cleanup_stdio+0x30>
 8008cfe:	4620      	mov	r0, r4
 8008d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d04:	f001 be20 	b.w	800a948 <_fflush_r>
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20008960 	.word	0x20008960
 8008d10:	200089c8 	.word	0x200089c8
 8008d14:	20008a30 	.word	0x20008a30

08008d18 <global_stdio_init.part.0>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <global_stdio_init.part.0+0x30>)
 8008d1c:	4c0b      	ldr	r4, [pc, #44]	; (8008d4c <global_stdio_init.part.0+0x34>)
 8008d1e:	4a0c      	ldr	r2, [pc, #48]	; (8008d50 <global_stdio_init.part.0+0x38>)
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	4620      	mov	r0, r4
 8008d24:	2200      	movs	r2, #0
 8008d26:	2104      	movs	r1, #4
 8008d28:	f7ff ffa6 	bl	8008c78 <std>
 8008d2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d30:	2201      	movs	r2, #1
 8008d32:	2109      	movs	r1, #9
 8008d34:	f7ff ffa0 	bl	8008c78 <std>
 8008d38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d42:	2112      	movs	r1, #18
 8008d44:	f7ff bf98 	b.w	8008c78 <std>
 8008d48:	20008a98 	.word	0x20008a98
 8008d4c:	20008960 	.word	0x20008960
 8008d50:	08008cc1 	.word	0x08008cc1

08008d54 <__sfp_lock_acquire>:
 8008d54:	4801      	ldr	r0, [pc, #4]	; (8008d5c <__sfp_lock_acquire+0x8>)
 8008d56:	f000 b91f 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20008aa1 	.word	0x20008aa1

08008d60 <__sfp_lock_release>:
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <__sfp_lock_release+0x8>)
 8008d62:	f000 b91a 	b.w	8008f9a <__retarget_lock_release_recursive>
 8008d66:	bf00      	nop
 8008d68:	20008aa1 	.word	0x20008aa1

08008d6c <__sinit>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	4604      	mov	r4, r0
 8008d70:	f7ff fff0 	bl	8008d54 <__sfp_lock_acquire>
 8008d74:	6a23      	ldr	r3, [r4, #32]
 8008d76:	b11b      	cbz	r3, 8008d80 <__sinit+0x14>
 8008d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d7c:	f7ff bff0 	b.w	8008d60 <__sfp_lock_release>
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <__sinit+0x28>)
 8008d82:	6223      	str	r3, [r4, #32]
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <__sinit+0x2c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1f5      	bne.n	8008d78 <__sinit+0xc>
 8008d8c:	f7ff ffc4 	bl	8008d18 <global_stdio_init.part.0>
 8008d90:	e7f2      	b.n	8008d78 <__sinit+0xc>
 8008d92:	bf00      	nop
 8008d94:	08008cd9 	.word	0x08008cd9
 8008d98:	20008a98 	.word	0x20008a98

08008d9c <_fwalk_sglue>:
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da0:	4607      	mov	r7, r0
 8008da2:	4688      	mov	r8, r1
 8008da4:	4614      	mov	r4, r2
 8008da6:	2600      	movs	r6, #0
 8008da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dac:	f1b9 0901 	subs.w	r9, r9, #1
 8008db0:	d505      	bpl.n	8008dbe <_fwalk_sglue+0x22>
 8008db2:	6824      	ldr	r4, [r4, #0]
 8008db4:	2c00      	cmp	r4, #0
 8008db6:	d1f7      	bne.n	8008da8 <_fwalk_sglue+0xc>
 8008db8:	4630      	mov	r0, r6
 8008dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d907      	bls.n	8008dd4 <_fwalk_sglue+0x38>
 8008dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	d003      	beq.n	8008dd4 <_fwalk_sglue+0x38>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4638      	mov	r0, r7
 8008dd0:	47c0      	blx	r8
 8008dd2:	4306      	orrs	r6, r0
 8008dd4:	3568      	adds	r5, #104	; 0x68
 8008dd6:	e7e9      	b.n	8008dac <_fwalk_sglue+0x10>

08008dd8 <siprintf>:
 8008dd8:	b40e      	push	{r1, r2, r3}
 8008dda:	b500      	push	{lr}
 8008ddc:	b09c      	sub	sp, #112	; 0x70
 8008dde:	ab1d      	add	r3, sp, #116	; 0x74
 8008de0:	9002      	str	r0, [sp, #8]
 8008de2:	9006      	str	r0, [sp, #24]
 8008de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008de8:	4809      	ldr	r0, [pc, #36]	; (8008e10 <siprintf+0x38>)
 8008dea:	9107      	str	r1, [sp, #28]
 8008dec:	9104      	str	r1, [sp, #16]
 8008dee:	4909      	ldr	r1, [pc, #36]	; (8008e14 <siprintf+0x3c>)
 8008df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df4:	9105      	str	r1, [sp, #20]
 8008df6:	6800      	ldr	r0, [r0, #0]
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	a902      	add	r1, sp, #8
 8008dfc:	f001 fc20 	bl	800a640 <_svfiprintf_r>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	b01c      	add	sp, #112	; 0x70
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	20000064 	.word	0x20000064
 8008e14:	ffff0208 	.word	0xffff0208

08008e18 <__sread>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e20:	f000 f86c 	bl	8008efc <_read_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	bfab      	itete	ge
 8008e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e2c:	181b      	addge	r3, r3, r0
 8008e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e32:	bfac      	ite	ge
 8008e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e36:	81a3      	strhlt	r3, [r4, #12]
 8008e38:	bd10      	pop	{r4, pc}

08008e3a <__swrite>:
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	461f      	mov	r7, r3
 8008e40:	898b      	ldrh	r3, [r1, #12]
 8008e42:	05db      	lsls	r3, r3, #23
 8008e44:	4605      	mov	r5, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4616      	mov	r6, r2
 8008e4a:	d505      	bpl.n	8008e58 <__swrite+0x1e>
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	2302      	movs	r3, #2
 8008e52:	2200      	movs	r2, #0
 8008e54:	f000 f840 	bl	8008ed8 <_lseek_r>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	4628      	mov	r0, r5
 8008e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	f000 b857 	b.w	8008f20 <_write_r>

08008e72 <__sseek>:
 8008e72:	b510      	push	{r4, lr}
 8008e74:	460c      	mov	r4, r1
 8008e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7a:	f000 f82d 	bl	8008ed8 <_lseek_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	bf15      	itete	ne
 8008e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e8e:	81a3      	strheq	r3, [r4, #12]
 8008e90:	bf18      	it	ne
 8008e92:	81a3      	strhne	r3, [r4, #12]
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <__sclose>:
 8008e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9a:	f000 b80d 	b.w	8008eb8 <_close_r>

08008e9e <memset>:
 8008e9e:	4402      	add	r2, r0
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d100      	bne.n	8008ea8 <memset+0xa>
 8008ea6:	4770      	bx	lr
 8008ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8008eac:	e7f9      	b.n	8008ea2 <memset+0x4>
	...

08008eb0 <_localeconv_r>:
 8008eb0:	4800      	ldr	r0, [pc, #0]	; (8008eb4 <_localeconv_r+0x4>)
 8008eb2:	4770      	bx	lr
 8008eb4:	20000158 	.word	0x20000158

08008eb8 <_close_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	; (8008ed4 <_close_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f9 f8d7 	bl	8002076 <_close>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_close_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_close_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20008a9c 	.word	0x20008a9c

08008ed8 <_lseek_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_lseek_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f9 f8ec 	bl	80020c4 <_lseek>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_lseek_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_lseek_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20008a9c 	.word	0x20008a9c

08008efc <_read_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	; (8008f1c <_read_r+0x20>)
 8008f00:	4604      	mov	r4, r0
 8008f02:	4608      	mov	r0, r1
 8008f04:	4611      	mov	r1, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f7f9 f87a 	bl	8002004 <_read>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_read_r+0x1e>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_read_r+0x1e>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20008a9c 	.word	0x20008a9c

08008f20 <_write_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_write_r+0x20>)
 8008f24:	4604      	mov	r4, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f7f9 f885 	bl	800203e <_write>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_write_r+0x1e>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_write_r+0x1e>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20008a9c 	.word	0x20008a9c

08008f44 <__errno>:
 8008f44:	4b01      	ldr	r3, [pc, #4]	; (8008f4c <__errno+0x8>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000064 	.word	0x20000064

08008f50 <__libc_init_array>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4d0d      	ldr	r5, [pc, #52]	; (8008f88 <__libc_init_array+0x38>)
 8008f54:	4c0d      	ldr	r4, [pc, #52]	; (8008f8c <__libc_init_array+0x3c>)
 8008f56:	1b64      	subs	r4, r4, r5
 8008f58:	10a4      	asrs	r4, r4, #2
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	42a6      	cmp	r6, r4
 8008f5e:	d109      	bne.n	8008f74 <__libc_init_array+0x24>
 8008f60:	4d0b      	ldr	r5, [pc, #44]	; (8008f90 <__libc_init_array+0x40>)
 8008f62:	4c0c      	ldr	r4, [pc, #48]	; (8008f94 <__libc_init_array+0x44>)
 8008f64:	f002 fb2a 	bl	800b5bc <_init>
 8008f68:	1b64      	subs	r4, r4, r5
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	42a6      	cmp	r6, r4
 8008f70:	d105      	bne.n	8008f7e <__libc_init_array+0x2e>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f78:	4798      	blx	r3
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	e7ee      	b.n	8008f5c <__libc_init_array+0xc>
 8008f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f82:	4798      	blx	r3
 8008f84:	3601      	adds	r6, #1
 8008f86:	e7f2      	b.n	8008f6e <__libc_init_array+0x1e>
 8008f88:	0801ee78 	.word	0x0801ee78
 8008f8c:	0801ee78 	.word	0x0801ee78
 8008f90:	0801ee78 	.word	0x0801ee78
 8008f94:	0801ee7c 	.word	0x0801ee7c

08008f98 <__retarget_lock_acquire_recursive>:
 8008f98:	4770      	bx	lr

08008f9a <__retarget_lock_release_recursive>:
 8008f9a:	4770      	bx	lr

08008f9c <quorem>:
 8008f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	6903      	ldr	r3, [r0, #16]
 8008fa2:	690c      	ldr	r4, [r1, #16]
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	db7e      	blt.n	80090a8 <quorem+0x10c>
 8008faa:	3c01      	subs	r4, #1
 8008fac:	f101 0814 	add.w	r8, r1, #20
 8008fb0:	f100 0514 	add.w	r5, r0, #20
 8008fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fce:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fd2:	d331      	bcc.n	8009038 <quorem+0x9c>
 8008fd4:	f04f 0e00 	mov.w	lr, #0
 8008fd8:	4640      	mov	r0, r8
 8008fda:	46ac      	mov	ip, r5
 8008fdc:	46f2      	mov	sl, lr
 8008fde:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fe2:	b293      	uxth	r3, r2
 8008fe4:	fb06 e303 	mla	r3, r6, r3, lr
 8008fe8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fec:	0c1a      	lsrs	r2, r3, #16
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ebaa 0303 	sub.w	r3, sl, r3
 8008ff4:	f8dc a000 	ldr.w	sl, [ip]
 8008ff8:	fa13 f38a 	uxtah	r3, r3, sl
 8008ffc:	fb06 220e 	mla	r2, r6, lr, r2
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009008:	b292      	uxth	r2, r2
 800900a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800900e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009012:	f8bd 3000 	ldrh.w	r3, [sp]
 8009016:	4581      	cmp	r9, r0
 8009018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800901c:	f84c 3b04 	str.w	r3, [ip], #4
 8009020:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009024:	d2db      	bcs.n	8008fde <quorem+0x42>
 8009026:	f855 300b 	ldr.w	r3, [r5, fp]
 800902a:	b92b      	cbnz	r3, 8009038 <quorem+0x9c>
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	3b04      	subs	r3, #4
 8009030:	429d      	cmp	r5, r3
 8009032:	461a      	mov	r2, r3
 8009034:	d32c      	bcc.n	8009090 <quorem+0xf4>
 8009036:	613c      	str	r4, [r7, #16]
 8009038:	4638      	mov	r0, r7
 800903a:	f001 f9a7 	bl	800a38c <__mcmp>
 800903e:	2800      	cmp	r0, #0
 8009040:	db22      	blt.n	8009088 <quorem+0xec>
 8009042:	3601      	adds	r6, #1
 8009044:	4629      	mov	r1, r5
 8009046:	2000      	movs	r0, #0
 8009048:	f858 2b04 	ldr.w	r2, [r8], #4
 800904c:	f8d1 c000 	ldr.w	ip, [r1]
 8009050:	b293      	uxth	r3, r2
 8009052:	1ac3      	subs	r3, r0, r3
 8009054:	0c12      	lsrs	r2, r2, #16
 8009056:	fa13 f38c 	uxtah	r3, r3, ip
 800905a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800905e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009062:	b29b      	uxth	r3, r3
 8009064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009068:	45c1      	cmp	r9, r8
 800906a:	f841 3b04 	str.w	r3, [r1], #4
 800906e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009072:	d2e9      	bcs.n	8009048 <quorem+0xac>
 8009074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800907c:	b922      	cbnz	r2, 8009088 <quorem+0xec>
 800907e:	3b04      	subs	r3, #4
 8009080:	429d      	cmp	r5, r3
 8009082:	461a      	mov	r2, r3
 8009084:	d30a      	bcc.n	800909c <quorem+0x100>
 8009086:	613c      	str	r4, [r7, #16]
 8009088:	4630      	mov	r0, r6
 800908a:	b003      	add	sp, #12
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	3b04      	subs	r3, #4
 8009094:	2a00      	cmp	r2, #0
 8009096:	d1ce      	bne.n	8009036 <quorem+0x9a>
 8009098:	3c01      	subs	r4, #1
 800909a:	e7c9      	b.n	8009030 <quorem+0x94>
 800909c:	6812      	ldr	r2, [r2, #0]
 800909e:	3b04      	subs	r3, #4
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	d1f0      	bne.n	8009086 <quorem+0xea>
 80090a4:	3c01      	subs	r4, #1
 80090a6:	e7eb      	b.n	8009080 <quorem+0xe4>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7ee      	b.n	800908a <quorem+0xee>
 80090ac:	0000      	movs	r0, r0
	...

080090b0 <_dtoa_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	ed2d 8b04 	vpush	{d8-d9}
 80090b8:	69c5      	ldr	r5, [r0, #28]
 80090ba:	b093      	sub	sp, #76	; 0x4c
 80090bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090c0:	ec57 6b10 	vmov	r6, r7, d0
 80090c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090c8:	9107      	str	r1, [sp, #28]
 80090ca:	4604      	mov	r4, r0
 80090cc:	920a      	str	r2, [sp, #40]	; 0x28
 80090ce:	930d      	str	r3, [sp, #52]	; 0x34
 80090d0:	b975      	cbnz	r5, 80090f0 <_dtoa_r+0x40>
 80090d2:	2010      	movs	r0, #16
 80090d4:	f000 fe2a 	bl	8009d2c <malloc>
 80090d8:	4602      	mov	r2, r0
 80090da:	61e0      	str	r0, [r4, #28]
 80090dc:	b920      	cbnz	r0, 80090e8 <_dtoa_r+0x38>
 80090de:	4bae      	ldr	r3, [pc, #696]	; (8009398 <_dtoa_r+0x2e8>)
 80090e0:	21ef      	movs	r1, #239	; 0xef
 80090e2:	48ae      	ldr	r0, [pc, #696]	; (800939c <_dtoa_r+0x2ec>)
 80090e4:	f001 fc90 	bl	800aa08 <__assert_func>
 80090e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ec:	6005      	str	r5, [r0, #0]
 80090ee:	60c5      	str	r5, [r0, #12]
 80090f0:	69e3      	ldr	r3, [r4, #28]
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	b151      	cbz	r1, 800910c <_dtoa_r+0x5c>
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	604a      	str	r2, [r1, #4]
 80090fa:	2301      	movs	r3, #1
 80090fc:	4093      	lsls	r3, r2
 80090fe:	608b      	str	r3, [r1, #8]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 ff07 	bl	8009f14 <_Bfree>
 8009106:	69e3      	ldr	r3, [r4, #28]
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	1e3b      	subs	r3, r7, #0
 800910e:	bfbb      	ittet	lt
 8009110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009114:	9303      	strlt	r3, [sp, #12]
 8009116:	2300      	movge	r3, #0
 8009118:	2201      	movlt	r2, #1
 800911a:	bfac      	ite	ge
 800911c:	f8c8 3000 	strge.w	r3, [r8]
 8009120:	f8c8 2000 	strlt.w	r2, [r8]
 8009124:	4b9e      	ldr	r3, [pc, #632]	; (80093a0 <_dtoa_r+0x2f0>)
 8009126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800912a:	ea33 0308 	bics.w	r3, r3, r8
 800912e:	d11b      	bne.n	8009168 <_dtoa_r+0xb8>
 8009130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009132:	f242 730f 	movw	r3, #9999	; 0x270f
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800913c:	4333      	orrs	r3, r6
 800913e:	f000 8593 	beq.w	8009c68 <_dtoa_r+0xbb8>
 8009142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009144:	b963      	cbnz	r3, 8009160 <_dtoa_r+0xb0>
 8009146:	4b97      	ldr	r3, [pc, #604]	; (80093a4 <_dtoa_r+0x2f4>)
 8009148:	e027      	b.n	800919a <_dtoa_r+0xea>
 800914a:	4b97      	ldr	r3, [pc, #604]	; (80093a8 <_dtoa_r+0x2f8>)
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	9800      	ldr	r0, [sp, #0]
 8009156:	b013      	add	sp, #76	; 0x4c
 8009158:	ecbd 8b04 	vpop	{d8-d9}
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	4b90      	ldr	r3, [pc, #576]	; (80093a4 <_dtoa_r+0x2f4>)
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	3303      	adds	r3, #3
 8009166:	e7f3      	b.n	8009150 <_dtoa_r+0xa0>
 8009168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800916c:	2200      	movs	r2, #0
 800916e:	ec51 0b17 	vmov	r0, r1, d7
 8009172:	eeb0 8a47 	vmov.f32	s16, s14
 8009176:	eef0 8a67 	vmov.f32	s17, s15
 800917a:	2300      	movs	r3, #0
 800917c:	f7f7 fd24 	bl	8000bc8 <__aeabi_dcmpeq>
 8009180:	4681      	mov	r9, r0
 8009182:	b160      	cbz	r0, 800919e <_dtoa_r+0xee>
 8009184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009186:	2301      	movs	r3, #1
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8568 	beq.w	8009c62 <_dtoa_r+0xbb2>
 8009192:	4b86      	ldr	r3, [pc, #536]	; (80093ac <_dtoa_r+0x2fc>)
 8009194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	3b01      	subs	r3, #1
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	e7da      	b.n	8009154 <_dtoa_r+0xa4>
 800919e:	aa10      	add	r2, sp, #64	; 0x40
 80091a0:	a911      	add	r1, sp, #68	; 0x44
 80091a2:	4620      	mov	r0, r4
 80091a4:	eeb0 0a48 	vmov.f32	s0, s16
 80091a8:	eef0 0a68 	vmov.f32	s1, s17
 80091ac:	f001 f994 	bl	800a4d8 <__d2b>
 80091b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80091b4:	4682      	mov	sl, r0
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	d07f      	beq.n	80092ba <_dtoa_r+0x20a>
 80091ba:	ee18 3a90 	vmov	r3, s17
 80091be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091c6:	ec51 0b18 	vmov	r0, r1, d8
 80091ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80091d6:	4619      	mov	r1, r3
 80091d8:	2200      	movs	r2, #0
 80091da:	4b75      	ldr	r3, [pc, #468]	; (80093b0 <_dtoa_r+0x300>)
 80091dc:	f7f7 f8d4 	bl	8000388 <__aeabi_dsub>
 80091e0:	a367      	add	r3, pc, #412	; (adr r3, 8009380 <_dtoa_r+0x2d0>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f7 fa87 	bl	80006f8 <__aeabi_dmul>
 80091ea:	a367      	add	r3, pc, #412	; (adr r3, 8009388 <_dtoa_r+0x2d8>)
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f7f7 f8cc 	bl	800038c <__adddf3>
 80091f4:	4606      	mov	r6, r0
 80091f6:	4628      	mov	r0, r5
 80091f8:	460f      	mov	r7, r1
 80091fa:	f7f7 fa13 	bl	8000624 <__aeabi_i2d>
 80091fe:	a364      	add	r3, pc, #400	; (adr r3, 8009390 <_dtoa_r+0x2e0>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 fa78 	bl	80006f8 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 f8bc 	bl	800038c <__adddf3>
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	f7f7 fd1e 	bl	8000c58 <__aeabi_d2iz>
 800921c:	2200      	movs	r2, #0
 800921e:	4683      	mov	fp, r0
 8009220:	2300      	movs	r3, #0
 8009222:	4630      	mov	r0, r6
 8009224:	4639      	mov	r1, r7
 8009226:	f7f7 fcd9 	bl	8000bdc <__aeabi_dcmplt>
 800922a:	b148      	cbz	r0, 8009240 <_dtoa_r+0x190>
 800922c:	4658      	mov	r0, fp
 800922e:	f7f7 f9f9 	bl	8000624 <__aeabi_i2d>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f7 fcc7 	bl	8000bc8 <__aeabi_dcmpeq>
 800923a:	b908      	cbnz	r0, 8009240 <_dtoa_r+0x190>
 800923c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009240:	f1bb 0f16 	cmp.w	fp, #22
 8009244:	d857      	bhi.n	80092f6 <_dtoa_r+0x246>
 8009246:	4b5b      	ldr	r3, [pc, #364]	; (80093b4 <_dtoa_r+0x304>)
 8009248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	ec51 0b18 	vmov	r0, r1, d8
 8009254:	f7f7 fcc2 	bl	8000bdc <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	d04e      	beq.n	80092fa <_dtoa_r+0x24a>
 800925c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009260:	2300      	movs	r3, #0
 8009262:	930c      	str	r3, [sp, #48]	; 0x30
 8009264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009266:	1b5b      	subs	r3, r3, r5
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	bf45      	ittet	mi
 800926c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009270:	9305      	strmi	r3, [sp, #20]
 8009272:	2300      	movpl	r3, #0
 8009274:	2300      	movmi	r3, #0
 8009276:	9206      	str	r2, [sp, #24]
 8009278:	bf54      	ite	pl
 800927a:	9305      	strpl	r3, [sp, #20]
 800927c:	9306      	strmi	r3, [sp, #24]
 800927e:	f1bb 0f00 	cmp.w	fp, #0
 8009282:	db3c      	blt.n	80092fe <_dtoa_r+0x24e>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800928a:	445b      	add	r3, fp
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	2300      	movs	r3, #0
 8009290:	9308      	str	r3, [sp, #32]
 8009292:	9b07      	ldr	r3, [sp, #28]
 8009294:	2b09      	cmp	r3, #9
 8009296:	d868      	bhi.n	800936a <_dtoa_r+0x2ba>
 8009298:	2b05      	cmp	r3, #5
 800929a:	bfc4      	itt	gt
 800929c:	3b04      	subgt	r3, #4
 800929e:	9307      	strgt	r3, [sp, #28]
 80092a0:	9b07      	ldr	r3, [sp, #28]
 80092a2:	f1a3 0302 	sub.w	r3, r3, #2
 80092a6:	bfcc      	ite	gt
 80092a8:	2500      	movgt	r5, #0
 80092aa:	2501      	movle	r5, #1
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	f200 8085 	bhi.w	80093bc <_dtoa_r+0x30c>
 80092b2:	e8df f003 	tbb	[pc, r3]
 80092b6:	3b2e      	.short	0x3b2e
 80092b8:	5839      	.short	0x5839
 80092ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092be:	441d      	add	r5, r3
 80092c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	bfc1      	itttt	gt
 80092c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80092d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80092d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80092d8:	bfd6      	itet	le
 80092da:	f1c3 0320 	rsble	r3, r3, #32
 80092de:	ea48 0003 	orrgt.w	r0, r8, r3
 80092e2:	fa06 f003 	lslle.w	r0, r6, r3
 80092e6:	f7f7 f98d 	bl	8000604 <__aeabi_ui2d>
 80092ea:	2201      	movs	r2, #1
 80092ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80092f0:	3d01      	subs	r5, #1
 80092f2:	920e      	str	r2, [sp, #56]	; 0x38
 80092f4:	e76f      	b.n	80091d6 <_dtoa_r+0x126>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7b3      	b.n	8009262 <_dtoa_r+0x1b2>
 80092fa:	900c      	str	r0, [sp, #48]	; 0x30
 80092fc:	e7b2      	b.n	8009264 <_dtoa_r+0x1b4>
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	eba3 030b 	sub.w	r3, r3, fp
 8009304:	9305      	str	r3, [sp, #20]
 8009306:	f1cb 0300 	rsb	r3, fp, #0
 800930a:	9308      	str	r3, [sp, #32]
 800930c:	2300      	movs	r3, #0
 800930e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009310:	e7bf      	b.n	8009292 <_dtoa_r+0x1e2>
 8009312:	2300      	movs	r3, #0
 8009314:	9309      	str	r3, [sp, #36]	; 0x24
 8009316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc52      	bgt.n	80093c2 <_dtoa_r+0x312>
 800931c:	2301      	movs	r3, #1
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	461a      	mov	r2, r3
 8009324:	920a      	str	r2, [sp, #40]	; 0x28
 8009326:	e00b      	b.n	8009340 <_dtoa_r+0x290>
 8009328:	2301      	movs	r3, #1
 800932a:	e7f3      	b.n	8009314 <_dtoa_r+0x264>
 800932c:	2300      	movs	r3, #0
 800932e:	9309      	str	r3, [sp, #36]	; 0x24
 8009330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009332:	445b      	add	r3, fp
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	3301      	adds	r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	bfb8      	it	lt
 800933e:	2301      	movlt	r3, #1
 8009340:	69e0      	ldr	r0, [r4, #28]
 8009342:	2100      	movs	r1, #0
 8009344:	2204      	movs	r2, #4
 8009346:	f102 0614 	add.w	r6, r2, #20
 800934a:	429e      	cmp	r6, r3
 800934c:	d93d      	bls.n	80093ca <_dtoa_r+0x31a>
 800934e:	6041      	str	r1, [r0, #4]
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fd9f 	bl	8009e94 <_Balloc>
 8009356:	9000      	str	r0, [sp, #0]
 8009358:	2800      	cmp	r0, #0
 800935a:	d139      	bne.n	80093d0 <_dtoa_r+0x320>
 800935c:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <_dtoa_r+0x308>)
 800935e:	4602      	mov	r2, r0
 8009360:	f240 11af 	movw	r1, #431	; 0x1af
 8009364:	e6bd      	b.n	80090e2 <_dtoa_r+0x32>
 8009366:	2301      	movs	r3, #1
 8009368:	e7e1      	b.n	800932e <_dtoa_r+0x27e>
 800936a:	2501      	movs	r5, #1
 800936c:	2300      	movs	r3, #0
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	9509      	str	r5, [sp, #36]	; 0x24
 8009372:	f04f 33ff 	mov.w	r3, #4294967295
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	2200      	movs	r2, #0
 800937c:	2312      	movs	r3, #18
 800937e:	e7d1      	b.n	8009324 <_dtoa_r+0x274>
 8009380:	636f4361 	.word	0x636f4361
 8009384:	3fd287a7 	.word	0x3fd287a7
 8009388:	8b60c8b3 	.word	0x8b60c8b3
 800938c:	3fc68a28 	.word	0x3fc68a28
 8009390:	509f79fb 	.word	0x509f79fb
 8009394:	3fd34413 	.word	0x3fd34413
 8009398:	0801eac9 	.word	0x0801eac9
 800939c:	0801eae0 	.word	0x0801eae0
 80093a0:	7ff00000 	.word	0x7ff00000
 80093a4:	0801eac5 	.word	0x0801eac5
 80093a8:	0801eabc 	.word	0x0801eabc
 80093ac:	0801ea99 	.word	0x0801ea99
 80093b0:	3ff80000 	.word	0x3ff80000
 80093b4:	0801ebd0 	.word	0x0801ebd0
 80093b8:	0801eb38 	.word	0x0801eb38
 80093bc:	2301      	movs	r3, #1
 80093be:	9309      	str	r3, [sp, #36]	; 0x24
 80093c0:	e7d7      	b.n	8009372 <_dtoa_r+0x2c2>
 80093c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	e7ba      	b.n	8009340 <_dtoa_r+0x290>
 80093ca:	3101      	adds	r1, #1
 80093cc:	0052      	lsls	r2, r2, #1
 80093ce:	e7ba      	b.n	8009346 <_dtoa_r+0x296>
 80093d0:	69e3      	ldr	r3, [r4, #28]
 80093d2:	9a00      	ldr	r2, [sp, #0]
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	2b0e      	cmp	r3, #14
 80093da:	f200 80a8 	bhi.w	800952e <_dtoa_r+0x47e>
 80093de:	2d00      	cmp	r5, #0
 80093e0:	f000 80a5 	beq.w	800952e <_dtoa_r+0x47e>
 80093e4:	f1bb 0f00 	cmp.w	fp, #0
 80093e8:	dd38      	ble.n	800945c <_dtoa_r+0x3ac>
 80093ea:	4bc0      	ldr	r3, [pc, #768]	; (80096ec <_dtoa_r+0x63c>)
 80093ec:	f00b 020f 	and.w	r2, fp, #15
 80093f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80093f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80093fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009400:	d019      	beq.n	8009436 <_dtoa_r+0x386>
 8009402:	4bbb      	ldr	r3, [pc, #748]	; (80096f0 <_dtoa_r+0x640>)
 8009404:	ec51 0b18 	vmov	r0, r1, d8
 8009408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800940c:	f7f7 fa9e 	bl	800094c <__aeabi_ddiv>
 8009410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009414:	f008 080f 	and.w	r8, r8, #15
 8009418:	2503      	movs	r5, #3
 800941a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80096f0 <_dtoa_r+0x640>
 800941e:	f1b8 0f00 	cmp.w	r8, #0
 8009422:	d10a      	bne.n	800943a <_dtoa_r+0x38a>
 8009424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009428:	4632      	mov	r2, r6
 800942a:	463b      	mov	r3, r7
 800942c:	f7f7 fa8e 	bl	800094c <__aeabi_ddiv>
 8009430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009434:	e02b      	b.n	800948e <_dtoa_r+0x3de>
 8009436:	2502      	movs	r5, #2
 8009438:	e7ef      	b.n	800941a <_dtoa_r+0x36a>
 800943a:	f018 0f01 	tst.w	r8, #1
 800943e:	d008      	beq.n	8009452 <_dtoa_r+0x3a2>
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009448:	f7f7 f956 	bl	80006f8 <__aeabi_dmul>
 800944c:	3501      	adds	r5, #1
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009456:	f109 0908 	add.w	r9, r9, #8
 800945a:	e7e0      	b.n	800941e <_dtoa_r+0x36e>
 800945c:	f000 809f 	beq.w	800959e <_dtoa_r+0x4ee>
 8009460:	f1cb 0600 	rsb	r6, fp, #0
 8009464:	4ba1      	ldr	r3, [pc, #644]	; (80096ec <_dtoa_r+0x63c>)
 8009466:	4fa2      	ldr	r7, [pc, #648]	; (80096f0 <_dtoa_r+0x640>)
 8009468:	f006 020f 	and.w	r2, r6, #15
 800946c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	ec51 0b18 	vmov	r0, r1, d8
 8009478:	f7f7 f93e 	bl	80006f8 <__aeabi_dmul>
 800947c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009480:	1136      	asrs	r6, r6, #4
 8009482:	2300      	movs	r3, #0
 8009484:	2502      	movs	r5, #2
 8009486:	2e00      	cmp	r6, #0
 8009488:	d17e      	bne.n	8009588 <_dtoa_r+0x4d8>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1d0      	bne.n	8009430 <_dtoa_r+0x380>
 800948e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009490:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8084 	beq.w	80095a2 <_dtoa_r+0x4f2>
 800949a:	4b96      	ldr	r3, [pc, #600]	; (80096f4 <_dtoa_r+0x644>)
 800949c:	2200      	movs	r2, #0
 800949e:	4640      	mov	r0, r8
 80094a0:	4649      	mov	r1, r9
 80094a2:	f7f7 fb9b 	bl	8000bdc <__aeabi_dcmplt>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d07b      	beq.n	80095a2 <_dtoa_r+0x4f2>
 80094aa:	9b04      	ldr	r3, [sp, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d078      	beq.n	80095a2 <_dtoa_r+0x4f2>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd39      	ble.n	800952a <_dtoa_r+0x47a>
 80094b6:	4b90      	ldr	r3, [pc, #576]	; (80096f8 <_dtoa_r+0x648>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	4640      	mov	r0, r8
 80094bc:	4649      	mov	r1, r9
 80094be:	f7f7 f91b 	bl	80006f8 <__aeabi_dmul>
 80094c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c6:	9e01      	ldr	r6, [sp, #4]
 80094c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80094cc:	3501      	adds	r5, #1
 80094ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7f7 f8a6 	bl	8000624 <__aeabi_i2d>
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	f7f7 f90c 	bl	80006f8 <__aeabi_dmul>
 80094e0:	4b86      	ldr	r3, [pc, #536]	; (80096fc <_dtoa_r+0x64c>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	f7f6 ff52 	bl	800038c <__adddf3>
 80094e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d158      	bne.n	80095a8 <_dtoa_r+0x4f8>
 80094f6:	4b82      	ldr	r3, [pc, #520]	; (8009700 <_dtoa_r+0x650>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f6 ff43 	bl	8000388 <__aeabi_dsub>
 8009502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009506:	4680      	mov	r8, r0
 8009508:	4689      	mov	r9, r1
 800950a:	f7f7 fb85 	bl	8000c18 <__aeabi_dcmpgt>
 800950e:	2800      	cmp	r0, #0
 8009510:	f040 8296 	bne.w	8009a40 <_dtoa_r+0x990>
 8009514:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009518:	4640      	mov	r0, r8
 800951a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800951e:	4649      	mov	r1, r9
 8009520:	f7f7 fb5c 	bl	8000bdc <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	f040 8289 	bne.w	8009a3c <_dtoa_r+0x98c>
 800952a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800952e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009530:	2b00      	cmp	r3, #0
 8009532:	f2c0 814e 	blt.w	80097d2 <_dtoa_r+0x722>
 8009536:	f1bb 0f0e 	cmp.w	fp, #14
 800953a:	f300 814a 	bgt.w	80097d2 <_dtoa_r+0x722>
 800953e:	4b6b      	ldr	r3, [pc, #428]	; (80096ec <_dtoa_r+0x63c>)
 8009540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	f280 80dc 	bge.w	8009708 <_dtoa_r+0x658>
 8009550:	9b04      	ldr	r3, [sp, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f300 80d8 	bgt.w	8009708 <_dtoa_r+0x658>
 8009558:	f040 826f 	bne.w	8009a3a <_dtoa_r+0x98a>
 800955c:	4b68      	ldr	r3, [pc, #416]	; (8009700 <_dtoa_r+0x650>)
 800955e:	2200      	movs	r2, #0
 8009560:	4640      	mov	r0, r8
 8009562:	4649      	mov	r1, r9
 8009564:	f7f7 f8c8 	bl	80006f8 <__aeabi_dmul>
 8009568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800956c:	f7f7 fb4a 	bl	8000c04 <__aeabi_dcmpge>
 8009570:	9e04      	ldr	r6, [sp, #16]
 8009572:	4637      	mov	r7, r6
 8009574:	2800      	cmp	r0, #0
 8009576:	f040 8245 	bne.w	8009a04 <_dtoa_r+0x954>
 800957a:	9d00      	ldr	r5, [sp, #0]
 800957c:	2331      	movs	r3, #49	; 0x31
 800957e:	f805 3b01 	strb.w	r3, [r5], #1
 8009582:	f10b 0b01 	add.w	fp, fp, #1
 8009586:	e241      	b.n	8009a0c <_dtoa_r+0x95c>
 8009588:	07f2      	lsls	r2, r6, #31
 800958a:	d505      	bpl.n	8009598 <_dtoa_r+0x4e8>
 800958c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009590:	f7f7 f8b2 	bl	80006f8 <__aeabi_dmul>
 8009594:	3501      	adds	r5, #1
 8009596:	2301      	movs	r3, #1
 8009598:	1076      	asrs	r6, r6, #1
 800959a:	3708      	adds	r7, #8
 800959c:	e773      	b.n	8009486 <_dtoa_r+0x3d6>
 800959e:	2502      	movs	r5, #2
 80095a0:	e775      	b.n	800948e <_dtoa_r+0x3de>
 80095a2:	9e04      	ldr	r6, [sp, #16]
 80095a4:	465f      	mov	r7, fp
 80095a6:	e792      	b.n	80094ce <_dtoa_r+0x41e>
 80095a8:	9900      	ldr	r1, [sp, #0]
 80095aa:	4b50      	ldr	r3, [pc, #320]	; (80096ec <_dtoa_r+0x63c>)
 80095ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095b0:	4431      	add	r1, r6
 80095b2:	9102      	str	r1, [sp, #8]
 80095b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095b6:	eeb0 9a47 	vmov.f32	s18, s14
 80095ba:	eef0 9a67 	vmov.f32	s19, s15
 80095be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d044      	beq.n	8009654 <_dtoa_r+0x5a4>
 80095ca:	494e      	ldr	r1, [pc, #312]	; (8009704 <_dtoa_r+0x654>)
 80095cc:	2000      	movs	r0, #0
 80095ce:	f7f7 f9bd 	bl	800094c <__aeabi_ddiv>
 80095d2:	ec53 2b19 	vmov	r2, r3, d9
 80095d6:	f7f6 fed7 	bl	8000388 <__aeabi_dsub>
 80095da:	9d00      	ldr	r5, [sp, #0]
 80095dc:	ec41 0b19 	vmov	d9, r0, r1
 80095e0:	4649      	mov	r1, r9
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7f7 fb38 	bl	8000c58 <__aeabi_d2iz>
 80095e8:	4606      	mov	r6, r0
 80095ea:	f7f7 f81b 	bl	8000624 <__aeabi_i2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f6 fec7 	bl	8000388 <__aeabi_dsub>
 80095fa:	3630      	adds	r6, #48	; 0x30
 80095fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009600:	ec53 2b19 	vmov	r2, r3, d9
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	f7f7 fae8 	bl	8000bdc <__aeabi_dcmplt>
 800960c:	2800      	cmp	r0, #0
 800960e:	d164      	bne.n	80096da <_dtoa_r+0x62a>
 8009610:	4642      	mov	r2, r8
 8009612:	464b      	mov	r3, r9
 8009614:	4937      	ldr	r1, [pc, #220]	; (80096f4 <_dtoa_r+0x644>)
 8009616:	2000      	movs	r0, #0
 8009618:	f7f6 feb6 	bl	8000388 <__aeabi_dsub>
 800961c:	ec53 2b19 	vmov	r2, r3, d9
 8009620:	f7f7 fadc 	bl	8000bdc <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	f040 80b6 	bne.w	8009796 <_dtoa_r+0x6e6>
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	429d      	cmp	r5, r3
 800962e:	f43f af7c 	beq.w	800952a <_dtoa_r+0x47a>
 8009632:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <_dtoa_r+0x648>)
 8009634:	ec51 0b19 	vmov	r0, r1, d9
 8009638:	2200      	movs	r2, #0
 800963a:	f7f7 f85d 	bl	80006f8 <__aeabi_dmul>
 800963e:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <_dtoa_r+0x648>)
 8009640:	ec41 0b19 	vmov	d9, r0, r1
 8009644:	2200      	movs	r2, #0
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f7 f855 	bl	80006f8 <__aeabi_dmul>
 800964e:	4680      	mov	r8, r0
 8009650:	4689      	mov	r9, r1
 8009652:	e7c5      	b.n	80095e0 <_dtoa_r+0x530>
 8009654:	ec51 0b17 	vmov	r0, r1, d7
 8009658:	f7f7 f84e 	bl	80006f8 <__aeabi_dmul>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	9d00      	ldr	r5, [sp, #0]
 8009660:	930f      	str	r3, [sp, #60]	; 0x3c
 8009662:	ec41 0b19 	vmov	d9, r0, r1
 8009666:	4649      	mov	r1, r9
 8009668:	4640      	mov	r0, r8
 800966a:	f7f7 faf5 	bl	8000c58 <__aeabi_d2iz>
 800966e:	4606      	mov	r6, r0
 8009670:	f7f6 ffd8 	bl	8000624 <__aeabi_i2d>
 8009674:	3630      	adds	r6, #48	; 0x30
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	f7f6 fe83 	bl	8000388 <__aeabi_dsub>
 8009682:	f805 6b01 	strb.w	r6, [r5], #1
 8009686:	9b02      	ldr	r3, [sp, #8]
 8009688:	429d      	cmp	r5, r3
 800968a:	4680      	mov	r8, r0
 800968c:	4689      	mov	r9, r1
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	d124      	bne.n	80096de <_dtoa_r+0x62e>
 8009694:	4b1b      	ldr	r3, [pc, #108]	; (8009704 <_dtoa_r+0x654>)
 8009696:	ec51 0b19 	vmov	r0, r1, d9
 800969a:	f7f6 fe77 	bl	800038c <__adddf3>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	f7f7 fab7 	bl	8000c18 <__aeabi_dcmpgt>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d173      	bne.n	8009796 <_dtoa_r+0x6e6>
 80096ae:	ec53 2b19 	vmov	r2, r3, d9
 80096b2:	4914      	ldr	r1, [pc, #80]	; (8009704 <_dtoa_r+0x654>)
 80096b4:	2000      	movs	r0, #0
 80096b6:	f7f6 fe67 	bl	8000388 <__aeabi_dsub>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4640      	mov	r0, r8
 80096c0:	4649      	mov	r1, r9
 80096c2:	f7f7 fa8b 	bl	8000bdc <__aeabi_dcmplt>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f43f af2f 	beq.w	800952a <_dtoa_r+0x47a>
 80096cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096ce:	1e6b      	subs	r3, r5, #1
 80096d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80096d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096d6:	2b30      	cmp	r3, #48	; 0x30
 80096d8:	d0f8      	beq.n	80096cc <_dtoa_r+0x61c>
 80096da:	46bb      	mov	fp, r7
 80096dc:	e04a      	b.n	8009774 <_dtoa_r+0x6c4>
 80096de:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <_dtoa_r+0x648>)
 80096e0:	f7f7 f80a 	bl	80006f8 <__aeabi_dmul>
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	e7bd      	b.n	8009666 <_dtoa_r+0x5b6>
 80096ea:	bf00      	nop
 80096ec:	0801ebd0 	.word	0x0801ebd0
 80096f0:	0801eba8 	.word	0x0801eba8
 80096f4:	3ff00000 	.word	0x3ff00000
 80096f8:	40240000 	.word	0x40240000
 80096fc:	401c0000 	.word	0x401c0000
 8009700:	40140000 	.word	0x40140000
 8009704:	3fe00000 	.word	0x3fe00000
 8009708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800970c:	9d00      	ldr	r5, [sp, #0]
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 f919 	bl	800094c <__aeabi_ddiv>
 800971a:	f7f7 fa9d 	bl	8000c58 <__aeabi_d2iz>
 800971e:	9001      	str	r0, [sp, #4]
 8009720:	f7f6 ff80 	bl	8000624 <__aeabi_i2d>
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	f7f6 ffe6 	bl	80006f8 <__aeabi_dmul>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 fe28 	bl	8000388 <__aeabi_dsub>
 8009738:	9e01      	ldr	r6, [sp, #4]
 800973a:	9f04      	ldr	r7, [sp, #16]
 800973c:	3630      	adds	r6, #48	; 0x30
 800973e:	f805 6b01 	strb.w	r6, [r5], #1
 8009742:	9e00      	ldr	r6, [sp, #0]
 8009744:	1bae      	subs	r6, r5, r6
 8009746:	42b7      	cmp	r7, r6
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	d134      	bne.n	80097b8 <_dtoa_r+0x708>
 800974e:	f7f6 fe1d 	bl	800038c <__adddf3>
 8009752:	4642      	mov	r2, r8
 8009754:	464b      	mov	r3, r9
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	f7f7 fa5d 	bl	8000c18 <__aeabi_dcmpgt>
 800975e:	b9c8      	cbnz	r0, 8009794 <_dtoa_r+0x6e4>
 8009760:	4642      	mov	r2, r8
 8009762:	464b      	mov	r3, r9
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f7 fa2e 	bl	8000bc8 <__aeabi_dcmpeq>
 800976c:	b110      	cbz	r0, 8009774 <_dtoa_r+0x6c4>
 800976e:	9b01      	ldr	r3, [sp, #4]
 8009770:	07db      	lsls	r3, r3, #31
 8009772:	d40f      	bmi.n	8009794 <_dtoa_r+0x6e4>
 8009774:	4651      	mov	r1, sl
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fbcc 	bl	8009f14 <_Bfree>
 800977c:	2300      	movs	r3, #0
 800977e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009780:	702b      	strb	r3, [r5, #0]
 8009782:	f10b 0301 	add.w	r3, fp, #1
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800978a:	2b00      	cmp	r3, #0
 800978c:	f43f ace2 	beq.w	8009154 <_dtoa_r+0xa4>
 8009790:	601d      	str	r5, [r3, #0]
 8009792:	e4df      	b.n	8009154 <_dtoa_r+0xa4>
 8009794:	465f      	mov	r7, fp
 8009796:	462b      	mov	r3, r5
 8009798:	461d      	mov	r5, r3
 800979a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979e:	2a39      	cmp	r2, #57	; 0x39
 80097a0:	d106      	bne.n	80097b0 <_dtoa_r+0x700>
 80097a2:	9a00      	ldr	r2, [sp, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d1f7      	bne.n	8009798 <_dtoa_r+0x6e8>
 80097a8:	9900      	ldr	r1, [sp, #0]
 80097aa:	2230      	movs	r2, #48	; 0x30
 80097ac:	3701      	adds	r7, #1
 80097ae:	700a      	strb	r2, [r1, #0]
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	3201      	adds	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	e790      	b.n	80096da <_dtoa_r+0x62a>
 80097b8:	4ba3      	ldr	r3, [pc, #652]	; (8009a48 <_dtoa_r+0x998>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	f7f6 ff9c 	bl	80006f8 <__aeabi_dmul>
 80097c0:	2200      	movs	r2, #0
 80097c2:	2300      	movs	r3, #0
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	f7f7 f9fe 	bl	8000bc8 <__aeabi_dcmpeq>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d09e      	beq.n	800970e <_dtoa_r+0x65e>
 80097d0:	e7d0      	b.n	8009774 <_dtoa_r+0x6c4>
 80097d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	f000 80ca 	beq.w	800996e <_dtoa_r+0x8be>
 80097da:	9a07      	ldr	r2, [sp, #28]
 80097dc:	2a01      	cmp	r2, #1
 80097de:	f300 80ad 	bgt.w	800993c <_dtoa_r+0x88c>
 80097e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	f000 80a5 	beq.w	8009934 <_dtoa_r+0x884>
 80097ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097ee:	9e08      	ldr	r6, [sp, #32]
 80097f0:	9d05      	ldr	r5, [sp, #20]
 80097f2:	9a05      	ldr	r2, [sp, #20]
 80097f4:	441a      	add	r2, r3
 80097f6:	9205      	str	r2, [sp, #20]
 80097f8:	9a06      	ldr	r2, [sp, #24]
 80097fa:	2101      	movs	r1, #1
 80097fc:	441a      	add	r2, r3
 80097fe:	4620      	mov	r0, r4
 8009800:	9206      	str	r2, [sp, #24]
 8009802:	f000 fc3d 	bl	800a080 <__i2b>
 8009806:	4607      	mov	r7, r0
 8009808:	b165      	cbz	r5, 8009824 <_dtoa_r+0x774>
 800980a:	9b06      	ldr	r3, [sp, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd09      	ble.n	8009824 <_dtoa_r+0x774>
 8009810:	42ab      	cmp	r3, r5
 8009812:	9a05      	ldr	r2, [sp, #20]
 8009814:	bfa8      	it	ge
 8009816:	462b      	movge	r3, r5
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	9205      	str	r2, [sp, #20]
 800981c:	9a06      	ldr	r2, [sp, #24]
 800981e:	1aed      	subs	r5, r5, r3
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	b1f3      	cbz	r3, 8009866 <_dtoa_r+0x7b6>
 8009828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80a3 	beq.w	8009976 <_dtoa_r+0x8c6>
 8009830:	2e00      	cmp	r6, #0
 8009832:	dd10      	ble.n	8009856 <_dtoa_r+0x7a6>
 8009834:	4639      	mov	r1, r7
 8009836:	4632      	mov	r2, r6
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fce1 	bl	800a200 <__pow5mult>
 800983e:	4652      	mov	r2, sl
 8009840:	4601      	mov	r1, r0
 8009842:	4607      	mov	r7, r0
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fc31 	bl	800a0ac <__multiply>
 800984a:	4651      	mov	r1, sl
 800984c:	4680      	mov	r8, r0
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fb60 	bl	8009f14 <_Bfree>
 8009854:	46c2      	mov	sl, r8
 8009856:	9b08      	ldr	r3, [sp, #32]
 8009858:	1b9a      	subs	r2, r3, r6
 800985a:	d004      	beq.n	8009866 <_dtoa_r+0x7b6>
 800985c:	4651      	mov	r1, sl
 800985e:	4620      	mov	r0, r4
 8009860:	f000 fcce 	bl	800a200 <__pow5mult>
 8009864:	4682      	mov	sl, r0
 8009866:	2101      	movs	r1, #1
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fc09 	bl	800a080 <__i2b>
 800986e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009870:	2b00      	cmp	r3, #0
 8009872:	4606      	mov	r6, r0
 8009874:	f340 8081 	ble.w	800997a <_dtoa_r+0x8ca>
 8009878:	461a      	mov	r2, r3
 800987a:	4601      	mov	r1, r0
 800987c:	4620      	mov	r0, r4
 800987e:	f000 fcbf 	bl	800a200 <__pow5mult>
 8009882:	9b07      	ldr	r3, [sp, #28]
 8009884:	2b01      	cmp	r3, #1
 8009886:	4606      	mov	r6, r0
 8009888:	dd7a      	ble.n	8009980 <_dtoa_r+0x8d0>
 800988a:	f04f 0800 	mov.w	r8, #0
 800988e:	6933      	ldr	r3, [r6, #16]
 8009890:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009894:	6918      	ldr	r0, [r3, #16]
 8009896:	f000 fba5 	bl	8009fe4 <__hi0bits>
 800989a:	f1c0 0020 	rsb	r0, r0, #32
 800989e:	9b06      	ldr	r3, [sp, #24]
 80098a0:	4418      	add	r0, r3
 80098a2:	f010 001f 	ands.w	r0, r0, #31
 80098a6:	f000 8094 	beq.w	80099d2 <_dtoa_r+0x922>
 80098aa:	f1c0 0320 	rsb	r3, r0, #32
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	f340 8085 	ble.w	80099be <_dtoa_r+0x90e>
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	f1c0 001c 	rsb	r0, r0, #28
 80098ba:	4403      	add	r3, r0
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	9b06      	ldr	r3, [sp, #24]
 80098c0:	4403      	add	r3, r0
 80098c2:	4405      	add	r5, r0
 80098c4:	9306      	str	r3, [sp, #24]
 80098c6:	9b05      	ldr	r3, [sp, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd05      	ble.n	80098d8 <_dtoa_r+0x828>
 80098cc:	4651      	mov	r1, sl
 80098ce:	461a      	mov	r2, r3
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fcef 	bl	800a2b4 <__lshift>
 80098d6:	4682      	mov	sl, r0
 80098d8:	9b06      	ldr	r3, [sp, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dd05      	ble.n	80098ea <_dtoa_r+0x83a>
 80098de:	4631      	mov	r1, r6
 80098e0:	461a      	mov	r2, r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fce6 	bl	800a2b4 <__lshift>
 80098e8:	4606      	mov	r6, r0
 80098ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d072      	beq.n	80099d6 <_dtoa_r+0x926>
 80098f0:	4631      	mov	r1, r6
 80098f2:	4650      	mov	r0, sl
 80098f4:	f000 fd4a 	bl	800a38c <__mcmp>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	da6c      	bge.n	80099d6 <_dtoa_r+0x926>
 80098fc:	2300      	movs	r3, #0
 80098fe:	4651      	mov	r1, sl
 8009900:	220a      	movs	r2, #10
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fb28 	bl	8009f58 <__multadd>
 8009908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800990e:	4682      	mov	sl, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 81b0 	beq.w	8009c76 <_dtoa_r+0xbc6>
 8009916:	2300      	movs	r3, #0
 8009918:	4639      	mov	r1, r7
 800991a:	220a      	movs	r2, #10
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fb1b 	bl	8009f58 <__multadd>
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	4607      	mov	r7, r0
 8009928:	f300 8096 	bgt.w	8009a58 <_dtoa_r+0x9a8>
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	2b02      	cmp	r3, #2
 8009930:	dc59      	bgt.n	80099e6 <_dtoa_r+0x936>
 8009932:	e091      	b.n	8009a58 <_dtoa_r+0x9a8>
 8009934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800993a:	e758      	b.n	80097ee <_dtoa_r+0x73e>
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	1e5e      	subs	r6, r3, #1
 8009940:	9b08      	ldr	r3, [sp, #32]
 8009942:	42b3      	cmp	r3, r6
 8009944:	bfbf      	itttt	lt
 8009946:	9b08      	ldrlt	r3, [sp, #32]
 8009948:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800994a:	9608      	strlt	r6, [sp, #32]
 800994c:	1af3      	sublt	r3, r6, r3
 800994e:	bfb4      	ite	lt
 8009950:	18d2      	addlt	r2, r2, r3
 8009952:	1b9e      	subge	r6, r3, r6
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	bfbc      	itt	lt
 8009958:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800995a:	2600      	movlt	r6, #0
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfb7      	itett	lt
 8009960:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009964:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009968:	1a9d      	sublt	r5, r3, r2
 800996a:	2300      	movlt	r3, #0
 800996c:	e741      	b.n	80097f2 <_dtoa_r+0x742>
 800996e:	9e08      	ldr	r6, [sp, #32]
 8009970:	9d05      	ldr	r5, [sp, #20]
 8009972:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009974:	e748      	b.n	8009808 <_dtoa_r+0x758>
 8009976:	9a08      	ldr	r2, [sp, #32]
 8009978:	e770      	b.n	800985c <_dtoa_r+0x7ac>
 800997a:	9b07      	ldr	r3, [sp, #28]
 800997c:	2b01      	cmp	r3, #1
 800997e:	dc19      	bgt.n	80099b4 <_dtoa_r+0x904>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	b9bb      	cbnz	r3, 80099b4 <_dtoa_r+0x904>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800998a:	b99b      	cbnz	r3, 80099b4 <_dtoa_r+0x904>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009992:	0d1b      	lsrs	r3, r3, #20
 8009994:	051b      	lsls	r3, r3, #20
 8009996:	b183      	cbz	r3, 80099ba <_dtoa_r+0x90a>
 8009998:	9b05      	ldr	r3, [sp, #20]
 800999a:	3301      	adds	r3, #1
 800999c:	9305      	str	r3, [sp, #20]
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	3301      	adds	r3, #1
 80099a2:	9306      	str	r3, [sp, #24]
 80099a4:	f04f 0801 	mov.w	r8, #1
 80099a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f47f af6f 	bne.w	800988e <_dtoa_r+0x7de>
 80099b0:	2001      	movs	r0, #1
 80099b2:	e774      	b.n	800989e <_dtoa_r+0x7ee>
 80099b4:	f04f 0800 	mov.w	r8, #0
 80099b8:	e7f6      	b.n	80099a8 <_dtoa_r+0x8f8>
 80099ba:	4698      	mov	r8, r3
 80099bc:	e7f4      	b.n	80099a8 <_dtoa_r+0x8f8>
 80099be:	d082      	beq.n	80098c6 <_dtoa_r+0x816>
 80099c0:	9a05      	ldr	r2, [sp, #20]
 80099c2:	331c      	adds	r3, #28
 80099c4:	441a      	add	r2, r3
 80099c6:	9205      	str	r2, [sp, #20]
 80099c8:	9a06      	ldr	r2, [sp, #24]
 80099ca:	441a      	add	r2, r3
 80099cc:	441d      	add	r5, r3
 80099ce:	9206      	str	r2, [sp, #24]
 80099d0:	e779      	b.n	80098c6 <_dtoa_r+0x816>
 80099d2:	4603      	mov	r3, r0
 80099d4:	e7f4      	b.n	80099c0 <_dtoa_r+0x910>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	dc37      	bgt.n	8009a4c <_dtoa_r+0x99c>
 80099dc:	9b07      	ldr	r3, [sp, #28]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	dd34      	ble.n	8009a4c <_dtoa_r+0x99c>
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	b963      	cbnz	r3, 8009a04 <_dtoa_r+0x954>
 80099ea:	4631      	mov	r1, r6
 80099ec:	2205      	movs	r2, #5
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 fab2 	bl	8009f58 <__multadd>
 80099f4:	4601      	mov	r1, r0
 80099f6:	4606      	mov	r6, r0
 80099f8:	4650      	mov	r0, sl
 80099fa:	f000 fcc7 	bl	800a38c <__mcmp>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f73f adbb 	bgt.w	800957a <_dtoa_r+0x4ca>
 8009a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a06:	9d00      	ldr	r5, [sp, #0]
 8009a08:	ea6f 0b03 	mvn.w	fp, r3
 8009a0c:	f04f 0800 	mov.w	r8, #0
 8009a10:	4631      	mov	r1, r6
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fa7e 	bl	8009f14 <_Bfree>
 8009a18:	2f00      	cmp	r7, #0
 8009a1a:	f43f aeab 	beq.w	8009774 <_dtoa_r+0x6c4>
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	d005      	beq.n	8009a30 <_dtoa_r+0x980>
 8009a24:	45b8      	cmp	r8, r7
 8009a26:	d003      	beq.n	8009a30 <_dtoa_r+0x980>
 8009a28:	4641      	mov	r1, r8
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fa72 	bl	8009f14 <_Bfree>
 8009a30:	4639      	mov	r1, r7
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fa6e 	bl	8009f14 <_Bfree>
 8009a38:	e69c      	b.n	8009774 <_dtoa_r+0x6c4>
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	4637      	mov	r7, r6
 8009a3e:	e7e1      	b.n	8009a04 <_dtoa_r+0x954>
 8009a40:	46bb      	mov	fp, r7
 8009a42:	4637      	mov	r7, r6
 8009a44:	e599      	b.n	800957a <_dtoa_r+0x4ca>
 8009a46:	bf00      	nop
 8009a48:	40240000 	.word	0x40240000
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80c8 	beq.w	8009be4 <_dtoa_r+0xb34>
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	dd05      	ble.n	8009a68 <_dtoa_r+0x9b8>
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	462a      	mov	r2, r5
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 fc27 	bl	800a2b4 <__lshift>
 8009a66:	4607      	mov	r7, r0
 8009a68:	f1b8 0f00 	cmp.w	r8, #0
 8009a6c:	d05b      	beq.n	8009b26 <_dtoa_r+0xa76>
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fa0f 	bl	8009e94 <_Balloc>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b928      	cbnz	r0, 8009a86 <_dtoa_r+0x9d6>
 8009a7a:	4b83      	ldr	r3, [pc, #524]	; (8009c88 <_dtoa_r+0xbd8>)
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a82:	f7ff bb2e 	b.w	80090e2 <_dtoa_r+0x32>
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	3202      	adds	r2, #2
 8009a8a:	0092      	lsls	r2, r2, #2
 8009a8c:	f107 010c 	add.w	r1, r7, #12
 8009a90:	300c      	adds	r0, #12
 8009a92:	f000 ffab 	bl	800a9ec <memcpy>
 8009a96:	2201      	movs	r2, #1
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fc0a 	bl	800a2b4 <__lshift>
 8009aa0:	9b00      	ldr	r3, [sp, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aaa:	4413      	add	r3, r2
 8009aac:	9308      	str	r3, [sp, #32]
 8009aae:	9b02      	ldr	r3, [sp, #8]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	46b8      	mov	r8, r7
 8009ab6:	9306      	str	r3, [sp, #24]
 8009ab8:	4607      	mov	r7, r0
 8009aba:	9b04      	ldr	r3, [sp, #16]
 8009abc:	4631      	mov	r1, r6
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	f7ff fa6a 	bl	8008f9c <quorem>
 8009ac8:	4641      	mov	r1, r8
 8009aca:	9002      	str	r0, [sp, #8]
 8009acc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	f000 fc5b 	bl	800a38c <__mcmp>
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	9005      	str	r0, [sp, #20]
 8009ada:	4631      	mov	r1, r6
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 fc71 	bl	800a3c4 <__mdiff>
 8009ae2:	68c2      	ldr	r2, [r0, #12]
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	bb02      	cbnz	r2, 8009b2a <_dtoa_r+0xa7a>
 8009ae8:	4601      	mov	r1, r0
 8009aea:	4650      	mov	r0, sl
 8009aec:	f000 fc4e 	bl	800a38c <__mcmp>
 8009af0:	4602      	mov	r2, r0
 8009af2:	4629      	mov	r1, r5
 8009af4:	4620      	mov	r0, r4
 8009af6:	9209      	str	r2, [sp, #36]	; 0x24
 8009af8:	f000 fa0c 	bl	8009f14 <_Bfree>
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b00:	9d04      	ldr	r5, [sp, #16]
 8009b02:	ea43 0102 	orr.w	r1, r3, r2
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	4319      	orrs	r1, r3
 8009b0a:	d110      	bne.n	8009b2e <_dtoa_r+0xa7e>
 8009b0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b10:	d029      	beq.n	8009b66 <_dtoa_r+0xab6>
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dd02      	ble.n	8009b1e <_dtoa_r+0xa6e>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b1e:	9b01      	ldr	r3, [sp, #4]
 8009b20:	f883 9000 	strb.w	r9, [r3]
 8009b24:	e774      	b.n	8009a10 <_dtoa_r+0x960>
 8009b26:	4638      	mov	r0, r7
 8009b28:	e7ba      	b.n	8009aa0 <_dtoa_r+0x9f0>
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	e7e1      	b.n	8009af2 <_dtoa_r+0xa42>
 8009b2e:	9b05      	ldr	r3, [sp, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	db04      	blt.n	8009b3e <_dtoa_r+0xa8e>
 8009b34:	9907      	ldr	r1, [sp, #28]
 8009b36:	430b      	orrs	r3, r1
 8009b38:	9906      	ldr	r1, [sp, #24]
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	d120      	bne.n	8009b80 <_dtoa_r+0xad0>
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	dded      	ble.n	8009b1e <_dtoa_r+0xa6e>
 8009b42:	4651      	mov	r1, sl
 8009b44:	2201      	movs	r2, #1
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 fbb4 	bl	800a2b4 <__lshift>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4682      	mov	sl, r0
 8009b50:	f000 fc1c 	bl	800a38c <__mcmp>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	dc03      	bgt.n	8009b60 <_dtoa_r+0xab0>
 8009b58:	d1e1      	bne.n	8009b1e <_dtoa_r+0xa6e>
 8009b5a:	f019 0f01 	tst.w	r9, #1
 8009b5e:	d0de      	beq.n	8009b1e <_dtoa_r+0xa6e>
 8009b60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b64:	d1d8      	bne.n	8009b18 <_dtoa_r+0xa68>
 8009b66:	9a01      	ldr	r2, [sp, #4]
 8009b68:	2339      	movs	r3, #57	; 0x39
 8009b6a:	7013      	strb	r3, [r2, #0]
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	461d      	mov	r5, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b76:	2a39      	cmp	r2, #57	; 0x39
 8009b78:	d06c      	beq.n	8009c54 <_dtoa_r+0xba4>
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e747      	b.n	8009a10 <_dtoa_r+0x960>
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	dd07      	ble.n	8009b94 <_dtoa_r+0xae4>
 8009b84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b88:	d0ed      	beq.n	8009b66 <_dtoa_r+0xab6>
 8009b8a:	9a01      	ldr	r2, [sp, #4]
 8009b8c:	f109 0301 	add.w	r3, r9, #1
 8009b90:	7013      	strb	r3, [r2, #0]
 8009b92:	e73d      	b.n	8009a10 <_dtoa_r+0x960>
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	9a08      	ldr	r2, [sp, #32]
 8009b98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d043      	beq.n	8009c28 <_dtoa_r+0xb78>
 8009ba0:	4651      	mov	r1, sl
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f9d6 	bl	8009f58 <__multadd>
 8009bac:	45b8      	cmp	r8, r7
 8009bae:	4682      	mov	sl, r0
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	f04f 020a 	mov.w	r2, #10
 8009bb8:	4641      	mov	r1, r8
 8009bba:	4620      	mov	r0, r4
 8009bbc:	d107      	bne.n	8009bce <_dtoa_r+0xb1e>
 8009bbe:	f000 f9cb 	bl	8009f58 <__multadd>
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	e775      	b.n	8009aba <_dtoa_r+0xa0a>
 8009bce:	f000 f9c3 	bl	8009f58 <__multadd>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	220a      	movs	r2, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f9bc 	bl	8009f58 <__multadd>
 8009be0:	4607      	mov	r7, r0
 8009be2:	e7f0      	b.n	8009bc6 <_dtoa_r+0xb16>
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	9d00      	ldr	r5, [sp, #0]
 8009bea:	4631      	mov	r1, r6
 8009bec:	4650      	mov	r0, sl
 8009bee:	f7ff f9d5 	bl	8008f9c <quorem>
 8009bf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	f805 9b01 	strb.w	r9, [r5], #1
 8009bfc:	1aea      	subs	r2, r5, r3
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	dd07      	ble.n	8009c14 <_dtoa_r+0xb64>
 8009c04:	4651      	mov	r1, sl
 8009c06:	2300      	movs	r3, #0
 8009c08:	220a      	movs	r2, #10
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 f9a4 	bl	8009f58 <__multadd>
 8009c10:	4682      	mov	sl, r0
 8009c12:	e7ea      	b.n	8009bea <_dtoa_r+0xb3a>
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfc8      	it	gt
 8009c1a:	461d      	movgt	r5, r3
 8009c1c:	9b00      	ldr	r3, [sp, #0]
 8009c1e:	bfd8      	it	le
 8009c20:	2501      	movle	r5, #1
 8009c22:	441d      	add	r5, r3
 8009c24:	f04f 0800 	mov.w	r8, #0
 8009c28:	4651      	mov	r1, sl
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fb41 	bl	800a2b4 <__lshift>
 8009c32:	4631      	mov	r1, r6
 8009c34:	4682      	mov	sl, r0
 8009c36:	f000 fba9 	bl	800a38c <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	dc96      	bgt.n	8009b6c <_dtoa_r+0xabc>
 8009c3e:	d102      	bne.n	8009c46 <_dtoa_r+0xb96>
 8009c40:	f019 0f01 	tst.w	r9, #1
 8009c44:	d192      	bne.n	8009b6c <_dtoa_r+0xabc>
 8009c46:	462b      	mov	r3, r5
 8009c48:	461d      	mov	r5, r3
 8009c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c4e:	2a30      	cmp	r2, #48	; 0x30
 8009c50:	d0fa      	beq.n	8009c48 <_dtoa_r+0xb98>
 8009c52:	e6dd      	b.n	8009a10 <_dtoa_r+0x960>
 8009c54:	9a00      	ldr	r2, [sp, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d189      	bne.n	8009b6e <_dtoa_r+0xabe>
 8009c5a:	f10b 0b01 	add.w	fp, fp, #1
 8009c5e:	2331      	movs	r3, #49	; 0x31
 8009c60:	e796      	b.n	8009b90 <_dtoa_r+0xae0>
 8009c62:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <_dtoa_r+0xbdc>)
 8009c64:	f7ff ba99 	b.w	800919a <_dtoa_r+0xea>
 8009c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f47f aa6d 	bne.w	800914a <_dtoa_r+0x9a>
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <_dtoa_r+0xbe0>)
 8009c72:	f7ff ba92 	b.w	800919a <_dtoa_r+0xea>
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dcb5      	bgt.n	8009be8 <_dtoa_r+0xb38>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	f73f aeb1 	bgt.w	80099e6 <_dtoa_r+0x936>
 8009c84:	e7b0      	b.n	8009be8 <_dtoa_r+0xb38>
 8009c86:	bf00      	nop
 8009c88:	0801eb38 	.word	0x0801eb38
 8009c8c:	0801ea98 	.word	0x0801ea98
 8009c90:	0801eabc 	.word	0x0801eabc

08009c94 <_free_r>:
 8009c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d044      	beq.n	8009d24 <_free_r+0x90>
 8009c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c9e:	9001      	str	r0, [sp, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ca6:	bfb8      	it	lt
 8009ca8:	18e4      	addlt	r4, r4, r3
 8009caa:	f000 f8e7 	bl	8009e7c <__malloc_lock>
 8009cae:	4a1e      	ldr	r2, [pc, #120]	; (8009d28 <_free_r+0x94>)
 8009cb0:	9801      	ldr	r0, [sp, #4]
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	b933      	cbnz	r3, 8009cc4 <_free_r+0x30>
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	6014      	str	r4, [r2, #0]
 8009cba:	b003      	add	sp, #12
 8009cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cc0:	f000 b8e2 	b.w	8009e88 <__malloc_unlock>
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d908      	bls.n	8009cda <_free_r+0x46>
 8009cc8:	6825      	ldr	r5, [r4, #0]
 8009cca:	1961      	adds	r1, r4, r5
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	bf01      	itttt	eq
 8009cd0:	6819      	ldreq	r1, [r3, #0]
 8009cd2:	685b      	ldreq	r3, [r3, #4]
 8009cd4:	1949      	addeq	r1, r1, r5
 8009cd6:	6021      	streq	r1, [r4, #0]
 8009cd8:	e7ed      	b.n	8009cb6 <_free_r+0x22>
 8009cda:	461a      	mov	r2, r3
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	b10b      	cbz	r3, 8009ce4 <_free_r+0x50>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d9fa      	bls.n	8009cda <_free_r+0x46>
 8009ce4:	6811      	ldr	r1, [r2, #0]
 8009ce6:	1855      	adds	r5, r2, r1
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	d10b      	bne.n	8009d04 <_free_r+0x70>
 8009cec:	6824      	ldr	r4, [r4, #0]
 8009cee:	4421      	add	r1, r4
 8009cf0:	1854      	adds	r4, r2, r1
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	d1e0      	bne.n	8009cba <_free_r+0x26>
 8009cf8:	681c      	ldr	r4, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	6053      	str	r3, [r2, #4]
 8009cfe:	440c      	add	r4, r1
 8009d00:	6014      	str	r4, [r2, #0]
 8009d02:	e7da      	b.n	8009cba <_free_r+0x26>
 8009d04:	d902      	bls.n	8009d0c <_free_r+0x78>
 8009d06:	230c      	movs	r3, #12
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	e7d6      	b.n	8009cba <_free_r+0x26>
 8009d0c:	6825      	ldr	r5, [r4, #0]
 8009d0e:	1961      	adds	r1, r4, r5
 8009d10:	428b      	cmp	r3, r1
 8009d12:	bf04      	itt	eq
 8009d14:	6819      	ldreq	r1, [r3, #0]
 8009d16:	685b      	ldreq	r3, [r3, #4]
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	bf04      	itt	eq
 8009d1c:	1949      	addeq	r1, r1, r5
 8009d1e:	6021      	streq	r1, [r4, #0]
 8009d20:	6054      	str	r4, [r2, #4]
 8009d22:	e7ca      	b.n	8009cba <_free_r+0x26>
 8009d24:	b003      	add	sp, #12
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	20008aa4 	.word	0x20008aa4

08009d2c <malloc>:
 8009d2c:	4b02      	ldr	r3, [pc, #8]	; (8009d38 <malloc+0xc>)
 8009d2e:	4601      	mov	r1, r0
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	f000 b823 	b.w	8009d7c <_malloc_r>
 8009d36:	bf00      	nop
 8009d38:	20000064 	.word	0x20000064

08009d3c <sbrk_aligned>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	4e0e      	ldr	r6, [pc, #56]	; (8009d78 <sbrk_aligned+0x3c>)
 8009d40:	460c      	mov	r4, r1
 8009d42:	6831      	ldr	r1, [r6, #0]
 8009d44:	4605      	mov	r5, r0
 8009d46:	b911      	cbnz	r1, 8009d4e <sbrk_aligned+0x12>
 8009d48:	f000 fe40 	bl	800a9cc <_sbrk_r>
 8009d4c:	6030      	str	r0, [r6, #0]
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 fe3b 	bl	800a9cc <_sbrk_r>
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	d00a      	beq.n	8009d70 <sbrk_aligned+0x34>
 8009d5a:	1cc4      	adds	r4, r0, #3
 8009d5c:	f024 0403 	bic.w	r4, r4, #3
 8009d60:	42a0      	cmp	r0, r4
 8009d62:	d007      	beq.n	8009d74 <sbrk_aligned+0x38>
 8009d64:	1a21      	subs	r1, r4, r0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 fe30 	bl	800a9cc <_sbrk_r>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d101      	bne.n	8009d74 <sbrk_aligned+0x38>
 8009d70:	f04f 34ff 	mov.w	r4, #4294967295
 8009d74:	4620      	mov	r0, r4
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	20008aa8 	.word	0x20008aa8

08009d7c <_malloc_r>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	1ccd      	adds	r5, r1, #3
 8009d82:	f025 0503 	bic.w	r5, r5, #3
 8009d86:	3508      	adds	r5, #8
 8009d88:	2d0c      	cmp	r5, #12
 8009d8a:	bf38      	it	cc
 8009d8c:	250c      	movcc	r5, #12
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	4607      	mov	r7, r0
 8009d92:	db01      	blt.n	8009d98 <_malloc_r+0x1c>
 8009d94:	42a9      	cmp	r1, r5
 8009d96:	d905      	bls.n	8009da4 <_malloc_r+0x28>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	2600      	movs	r6, #0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e78 <_malloc_r+0xfc>
 8009da8:	f000 f868 	bl	8009e7c <__malloc_lock>
 8009dac:	f8d8 3000 	ldr.w	r3, [r8]
 8009db0:	461c      	mov	r4, r3
 8009db2:	bb5c      	cbnz	r4, 8009e0c <_malloc_r+0x90>
 8009db4:	4629      	mov	r1, r5
 8009db6:	4638      	mov	r0, r7
 8009db8:	f7ff ffc0 	bl	8009d3c <sbrk_aligned>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	d155      	bne.n	8009e6e <_malloc_r+0xf2>
 8009dc2:	f8d8 4000 	ldr.w	r4, [r8]
 8009dc6:	4626      	mov	r6, r4
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	d145      	bne.n	8009e58 <_malloc_r+0xdc>
 8009dcc:	2c00      	cmp	r4, #0
 8009dce:	d048      	beq.n	8009e62 <_malloc_r+0xe6>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	eb04 0903 	add.w	r9, r4, r3
 8009dda:	f000 fdf7 	bl	800a9cc <_sbrk_r>
 8009dde:	4581      	cmp	r9, r0
 8009de0:	d13f      	bne.n	8009e62 <_malloc_r+0xe6>
 8009de2:	6821      	ldr	r1, [r4, #0]
 8009de4:	1a6d      	subs	r5, r5, r1
 8009de6:	4629      	mov	r1, r5
 8009de8:	4638      	mov	r0, r7
 8009dea:	f7ff ffa7 	bl	8009d3c <sbrk_aligned>
 8009dee:	3001      	adds	r0, #1
 8009df0:	d037      	beq.n	8009e62 <_malloc_r+0xe6>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	442b      	add	r3, r5
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d038      	beq.n	8009e72 <_malloc_r+0xf6>
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	42a2      	cmp	r2, r4
 8009e04:	d12b      	bne.n	8009e5e <_malloc_r+0xe2>
 8009e06:	2200      	movs	r2, #0
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	e00f      	b.n	8009e2c <_malloc_r+0xb0>
 8009e0c:	6822      	ldr	r2, [r4, #0]
 8009e0e:	1b52      	subs	r2, r2, r5
 8009e10:	d41f      	bmi.n	8009e52 <_malloc_r+0xd6>
 8009e12:	2a0b      	cmp	r2, #11
 8009e14:	d917      	bls.n	8009e46 <_malloc_r+0xca>
 8009e16:	1961      	adds	r1, r4, r5
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	6025      	str	r5, [r4, #0]
 8009e1c:	bf18      	it	ne
 8009e1e:	6059      	strne	r1, [r3, #4]
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	bf08      	it	eq
 8009e24:	f8c8 1000 	streq.w	r1, [r8]
 8009e28:	5162      	str	r2, [r4, r5]
 8009e2a:	604b      	str	r3, [r1, #4]
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f104 060b 	add.w	r6, r4, #11
 8009e32:	f000 f829 	bl	8009e88 <__malloc_unlock>
 8009e36:	f026 0607 	bic.w	r6, r6, #7
 8009e3a:	1d23      	adds	r3, r4, #4
 8009e3c:	1af2      	subs	r2, r6, r3
 8009e3e:	d0ae      	beq.n	8009d9e <_malloc_r+0x22>
 8009e40:	1b9b      	subs	r3, r3, r6
 8009e42:	50a3      	str	r3, [r4, r2]
 8009e44:	e7ab      	b.n	8009d9e <_malloc_r+0x22>
 8009e46:	42a3      	cmp	r3, r4
 8009e48:	6862      	ldr	r2, [r4, #4]
 8009e4a:	d1dd      	bne.n	8009e08 <_malloc_r+0x8c>
 8009e4c:	f8c8 2000 	str.w	r2, [r8]
 8009e50:	e7ec      	b.n	8009e2c <_malloc_r+0xb0>
 8009e52:	4623      	mov	r3, r4
 8009e54:	6864      	ldr	r4, [r4, #4]
 8009e56:	e7ac      	b.n	8009db2 <_malloc_r+0x36>
 8009e58:	4634      	mov	r4, r6
 8009e5a:	6876      	ldr	r6, [r6, #4]
 8009e5c:	e7b4      	b.n	8009dc8 <_malloc_r+0x4c>
 8009e5e:	4613      	mov	r3, r2
 8009e60:	e7cc      	b.n	8009dfc <_malloc_r+0x80>
 8009e62:	230c      	movs	r3, #12
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4638      	mov	r0, r7
 8009e68:	f000 f80e 	bl	8009e88 <__malloc_unlock>
 8009e6c:	e797      	b.n	8009d9e <_malloc_r+0x22>
 8009e6e:	6025      	str	r5, [r4, #0]
 8009e70:	e7dc      	b.n	8009e2c <_malloc_r+0xb0>
 8009e72:	605b      	str	r3, [r3, #4]
 8009e74:	deff      	udf	#255	; 0xff
 8009e76:	bf00      	nop
 8009e78:	20008aa4 	.word	0x20008aa4

08009e7c <__malloc_lock>:
 8009e7c:	4801      	ldr	r0, [pc, #4]	; (8009e84 <__malloc_lock+0x8>)
 8009e7e:	f7ff b88b 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8009e82:	bf00      	nop
 8009e84:	20008aa0 	.word	0x20008aa0

08009e88 <__malloc_unlock>:
 8009e88:	4801      	ldr	r0, [pc, #4]	; (8009e90 <__malloc_unlock+0x8>)
 8009e8a:	f7ff b886 	b.w	8008f9a <__retarget_lock_release_recursive>
 8009e8e:	bf00      	nop
 8009e90:	20008aa0 	.word	0x20008aa0

08009e94 <_Balloc>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	69c6      	ldr	r6, [r0, #28]
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	b976      	cbnz	r6, 8009ebc <_Balloc+0x28>
 8009e9e:	2010      	movs	r0, #16
 8009ea0:	f7ff ff44 	bl	8009d2c <malloc>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	61e0      	str	r0, [r4, #28]
 8009ea8:	b920      	cbnz	r0, 8009eb4 <_Balloc+0x20>
 8009eaa:	4b18      	ldr	r3, [pc, #96]	; (8009f0c <_Balloc+0x78>)
 8009eac:	4818      	ldr	r0, [pc, #96]	; (8009f10 <_Balloc+0x7c>)
 8009eae:	216b      	movs	r1, #107	; 0x6b
 8009eb0:	f000 fdaa 	bl	800aa08 <__assert_func>
 8009eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eb8:	6006      	str	r6, [r0, #0]
 8009eba:	60c6      	str	r6, [r0, #12]
 8009ebc:	69e6      	ldr	r6, [r4, #28]
 8009ebe:	68f3      	ldr	r3, [r6, #12]
 8009ec0:	b183      	cbz	r3, 8009ee4 <_Balloc+0x50>
 8009ec2:	69e3      	ldr	r3, [r4, #28]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eca:	b9b8      	cbnz	r0, 8009efc <_Balloc+0x68>
 8009ecc:	2101      	movs	r1, #1
 8009ece:	fa01 f605 	lsl.w	r6, r1, r5
 8009ed2:	1d72      	adds	r2, r6, #5
 8009ed4:	0092      	lsls	r2, r2, #2
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 fdb4 	bl	800aa44 <_calloc_r>
 8009edc:	b160      	cbz	r0, 8009ef8 <_Balloc+0x64>
 8009ede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ee2:	e00e      	b.n	8009f02 <_Balloc+0x6e>
 8009ee4:	2221      	movs	r2, #33	; 0x21
 8009ee6:	2104      	movs	r1, #4
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 fdab 	bl	800aa44 <_calloc_r>
 8009eee:	69e3      	ldr	r3, [r4, #28]
 8009ef0:	60f0      	str	r0, [r6, #12]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e4      	bne.n	8009ec2 <_Balloc+0x2e>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	6802      	ldr	r2, [r0, #0]
 8009efe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f02:	2300      	movs	r3, #0
 8009f04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f08:	e7f7      	b.n	8009efa <_Balloc+0x66>
 8009f0a:	bf00      	nop
 8009f0c:	0801eac9 	.word	0x0801eac9
 8009f10:	0801eb49 	.word	0x0801eb49

08009f14 <_Bfree>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	69c6      	ldr	r6, [r0, #28]
 8009f18:	4605      	mov	r5, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	b976      	cbnz	r6, 8009f3c <_Bfree+0x28>
 8009f1e:	2010      	movs	r0, #16
 8009f20:	f7ff ff04 	bl	8009d2c <malloc>
 8009f24:	4602      	mov	r2, r0
 8009f26:	61e8      	str	r0, [r5, #28]
 8009f28:	b920      	cbnz	r0, 8009f34 <_Bfree+0x20>
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <_Bfree+0x3c>)
 8009f2c:	4809      	ldr	r0, [pc, #36]	; (8009f54 <_Bfree+0x40>)
 8009f2e:	218f      	movs	r1, #143	; 0x8f
 8009f30:	f000 fd6a 	bl	800aa08 <__assert_func>
 8009f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f38:	6006      	str	r6, [r0, #0]
 8009f3a:	60c6      	str	r6, [r0, #12]
 8009f3c:	b13c      	cbz	r4, 8009f4e <_Bfree+0x3a>
 8009f3e:	69eb      	ldr	r3, [r5, #28]
 8009f40:	6862      	ldr	r2, [r4, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f48:	6021      	str	r1, [r4, #0]
 8009f4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	0801eac9 	.word	0x0801eac9
 8009f54:	0801eb49 	.word	0x0801eb49

08009f58 <__multadd>:
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	690d      	ldr	r5, [r1, #16]
 8009f5e:	4607      	mov	r7, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	461e      	mov	r6, r3
 8009f64:	f101 0c14 	add.w	ip, r1, #20
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f6e:	b299      	uxth	r1, r3
 8009f70:	fb02 6101 	mla	r1, r2, r1, r6
 8009f74:	0c1e      	lsrs	r6, r3, #16
 8009f76:	0c0b      	lsrs	r3, r1, #16
 8009f78:	fb02 3306 	mla	r3, r2, r6, r3
 8009f7c:	b289      	uxth	r1, r1
 8009f7e:	3001      	adds	r0, #1
 8009f80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f84:	4285      	cmp	r5, r0
 8009f86:	f84c 1b04 	str.w	r1, [ip], #4
 8009f8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f8e:	dcec      	bgt.n	8009f6a <__multadd+0x12>
 8009f90:	b30e      	cbz	r6, 8009fd6 <__multadd+0x7e>
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	42ab      	cmp	r3, r5
 8009f96:	dc19      	bgt.n	8009fcc <__multadd+0x74>
 8009f98:	6861      	ldr	r1, [r4, #4]
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	3101      	adds	r1, #1
 8009f9e:	f7ff ff79 	bl	8009e94 <_Balloc>
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	b928      	cbnz	r0, 8009fb2 <__multadd+0x5a>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <__multadd+0x84>)
 8009faa:	480d      	ldr	r0, [pc, #52]	; (8009fe0 <__multadd+0x88>)
 8009fac:	21ba      	movs	r1, #186	; 0xba
 8009fae:	f000 fd2b 	bl	800aa08 <__assert_func>
 8009fb2:	6922      	ldr	r2, [r4, #16]
 8009fb4:	3202      	adds	r2, #2
 8009fb6:	f104 010c 	add.w	r1, r4, #12
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f000 fd15 	bl	800a9ec <memcpy>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7ff ffa5 	bl	8009f14 <_Bfree>
 8009fca:	4644      	mov	r4, r8
 8009fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fd0:	3501      	adds	r5, #1
 8009fd2:	615e      	str	r6, [r3, #20]
 8009fd4:	6125      	str	r5, [r4, #16]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fdc:	0801eb38 	.word	0x0801eb38
 8009fe0:	0801eb49 	.word	0x0801eb49

08009fe4 <__hi0bits>:
 8009fe4:	0c03      	lsrs	r3, r0, #16
 8009fe6:	041b      	lsls	r3, r3, #16
 8009fe8:	b9d3      	cbnz	r3, 800a020 <__hi0bits+0x3c>
 8009fea:	0400      	lsls	r0, r0, #16
 8009fec:	2310      	movs	r3, #16
 8009fee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ff2:	bf04      	itt	eq
 8009ff4:	0200      	lsleq	r0, r0, #8
 8009ff6:	3308      	addeq	r3, #8
 8009ff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ffc:	bf04      	itt	eq
 8009ffe:	0100      	lsleq	r0, r0, #4
 800a000:	3304      	addeq	r3, #4
 800a002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a006:	bf04      	itt	eq
 800a008:	0080      	lsleq	r0, r0, #2
 800a00a:	3302      	addeq	r3, #2
 800a00c:	2800      	cmp	r0, #0
 800a00e:	db05      	blt.n	800a01c <__hi0bits+0x38>
 800a010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a014:	f103 0301 	add.w	r3, r3, #1
 800a018:	bf08      	it	eq
 800a01a:	2320      	moveq	r3, #32
 800a01c:	4618      	mov	r0, r3
 800a01e:	4770      	bx	lr
 800a020:	2300      	movs	r3, #0
 800a022:	e7e4      	b.n	8009fee <__hi0bits+0xa>

0800a024 <__lo0bits>:
 800a024:	6803      	ldr	r3, [r0, #0]
 800a026:	f013 0207 	ands.w	r2, r3, #7
 800a02a:	d00c      	beq.n	800a046 <__lo0bits+0x22>
 800a02c:	07d9      	lsls	r1, r3, #31
 800a02e:	d422      	bmi.n	800a076 <__lo0bits+0x52>
 800a030:	079a      	lsls	r2, r3, #30
 800a032:	bf49      	itett	mi
 800a034:	085b      	lsrmi	r3, r3, #1
 800a036:	089b      	lsrpl	r3, r3, #2
 800a038:	6003      	strmi	r3, [r0, #0]
 800a03a:	2201      	movmi	r2, #1
 800a03c:	bf5c      	itt	pl
 800a03e:	6003      	strpl	r3, [r0, #0]
 800a040:	2202      	movpl	r2, #2
 800a042:	4610      	mov	r0, r2
 800a044:	4770      	bx	lr
 800a046:	b299      	uxth	r1, r3
 800a048:	b909      	cbnz	r1, 800a04e <__lo0bits+0x2a>
 800a04a:	0c1b      	lsrs	r3, r3, #16
 800a04c:	2210      	movs	r2, #16
 800a04e:	b2d9      	uxtb	r1, r3
 800a050:	b909      	cbnz	r1, 800a056 <__lo0bits+0x32>
 800a052:	3208      	adds	r2, #8
 800a054:	0a1b      	lsrs	r3, r3, #8
 800a056:	0719      	lsls	r1, r3, #28
 800a058:	bf04      	itt	eq
 800a05a:	091b      	lsreq	r3, r3, #4
 800a05c:	3204      	addeq	r2, #4
 800a05e:	0799      	lsls	r1, r3, #30
 800a060:	bf04      	itt	eq
 800a062:	089b      	lsreq	r3, r3, #2
 800a064:	3202      	addeq	r2, #2
 800a066:	07d9      	lsls	r1, r3, #31
 800a068:	d403      	bmi.n	800a072 <__lo0bits+0x4e>
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	f102 0201 	add.w	r2, r2, #1
 800a070:	d003      	beq.n	800a07a <__lo0bits+0x56>
 800a072:	6003      	str	r3, [r0, #0]
 800a074:	e7e5      	b.n	800a042 <__lo0bits+0x1e>
 800a076:	2200      	movs	r2, #0
 800a078:	e7e3      	b.n	800a042 <__lo0bits+0x1e>
 800a07a:	2220      	movs	r2, #32
 800a07c:	e7e1      	b.n	800a042 <__lo0bits+0x1e>
	...

0800a080 <__i2b>:
 800a080:	b510      	push	{r4, lr}
 800a082:	460c      	mov	r4, r1
 800a084:	2101      	movs	r1, #1
 800a086:	f7ff ff05 	bl	8009e94 <_Balloc>
 800a08a:	4602      	mov	r2, r0
 800a08c:	b928      	cbnz	r0, 800a09a <__i2b+0x1a>
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <__i2b+0x24>)
 800a090:	4805      	ldr	r0, [pc, #20]	; (800a0a8 <__i2b+0x28>)
 800a092:	f240 1145 	movw	r1, #325	; 0x145
 800a096:	f000 fcb7 	bl	800aa08 <__assert_func>
 800a09a:	2301      	movs	r3, #1
 800a09c:	6144      	str	r4, [r0, #20]
 800a09e:	6103      	str	r3, [r0, #16]
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	bf00      	nop
 800a0a4:	0801eb38 	.word	0x0801eb38
 800a0a8:	0801eb49 	.word	0x0801eb49

0800a0ac <__multiply>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	4691      	mov	r9, r2
 800a0b2:	690a      	ldr	r2, [r1, #16]
 800a0b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	bfb8      	it	lt
 800a0bc:	460b      	movlt	r3, r1
 800a0be:	460c      	mov	r4, r1
 800a0c0:	bfbc      	itt	lt
 800a0c2:	464c      	movlt	r4, r9
 800a0c4:	4699      	movlt	r9, r3
 800a0c6:	6927      	ldr	r7, [r4, #16]
 800a0c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0cc:	68a3      	ldr	r3, [r4, #8]
 800a0ce:	6861      	ldr	r1, [r4, #4]
 800a0d0:	eb07 060a 	add.w	r6, r7, sl
 800a0d4:	42b3      	cmp	r3, r6
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	bfb8      	it	lt
 800a0da:	3101      	addlt	r1, #1
 800a0dc:	f7ff feda 	bl	8009e94 <_Balloc>
 800a0e0:	b930      	cbnz	r0, 800a0f0 <__multiply+0x44>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	4b44      	ldr	r3, [pc, #272]	; (800a1f8 <__multiply+0x14c>)
 800a0e6:	4845      	ldr	r0, [pc, #276]	; (800a1fc <__multiply+0x150>)
 800a0e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a0ec:	f000 fc8c 	bl	800aa08 <__assert_func>
 800a0f0:	f100 0514 	add.w	r5, r0, #20
 800a0f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4543      	cmp	r3, r8
 800a0fe:	d321      	bcc.n	800a144 <__multiply+0x98>
 800a100:	f104 0314 	add.w	r3, r4, #20
 800a104:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a108:	f109 0314 	add.w	r3, r9, #20
 800a10c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a110:	9202      	str	r2, [sp, #8]
 800a112:	1b3a      	subs	r2, r7, r4
 800a114:	3a15      	subs	r2, #21
 800a116:	f022 0203 	bic.w	r2, r2, #3
 800a11a:	3204      	adds	r2, #4
 800a11c:	f104 0115 	add.w	r1, r4, #21
 800a120:	428f      	cmp	r7, r1
 800a122:	bf38      	it	cc
 800a124:	2204      	movcc	r2, #4
 800a126:	9201      	str	r2, [sp, #4]
 800a128:	9a02      	ldr	r2, [sp, #8]
 800a12a:	9303      	str	r3, [sp, #12]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d80c      	bhi.n	800a14a <__multiply+0x9e>
 800a130:	2e00      	cmp	r6, #0
 800a132:	dd03      	ble.n	800a13c <__multiply+0x90>
 800a134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d05b      	beq.n	800a1f4 <__multiply+0x148>
 800a13c:	6106      	str	r6, [r0, #16]
 800a13e:	b005      	add	sp, #20
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	f843 2b04 	str.w	r2, [r3], #4
 800a148:	e7d8      	b.n	800a0fc <__multiply+0x50>
 800a14a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a14e:	f1ba 0f00 	cmp.w	sl, #0
 800a152:	d024      	beq.n	800a19e <__multiply+0xf2>
 800a154:	f104 0e14 	add.w	lr, r4, #20
 800a158:	46a9      	mov	r9, r5
 800a15a:	f04f 0c00 	mov.w	ip, #0
 800a15e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a162:	f8d9 1000 	ldr.w	r1, [r9]
 800a166:	fa1f fb82 	uxth.w	fp, r2
 800a16a:	b289      	uxth	r1, r1
 800a16c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a170:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a174:	f8d9 2000 	ldr.w	r2, [r9]
 800a178:	4461      	add	r1, ip
 800a17a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a17e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a186:	b289      	uxth	r1, r1
 800a188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a18c:	4577      	cmp	r7, lr
 800a18e:	f849 1b04 	str.w	r1, [r9], #4
 800a192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a196:	d8e2      	bhi.n	800a15e <__multiply+0xb2>
 800a198:	9a01      	ldr	r2, [sp, #4]
 800a19a:	f845 c002 	str.w	ip, [r5, r2]
 800a19e:	9a03      	ldr	r2, [sp, #12]
 800a1a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	f1b9 0f00 	cmp.w	r9, #0
 800a1aa:	d021      	beq.n	800a1f0 <__multiply+0x144>
 800a1ac:	6829      	ldr	r1, [r5, #0]
 800a1ae:	f104 0c14 	add.w	ip, r4, #20
 800a1b2:	46ae      	mov	lr, r5
 800a1b4:	f04f 0a00 	mov.w	sl, #0
 800a1b8:	f8bc b000 	ldrh.w	fp, [ip]
 800a1bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1c0:	fb09 220b 	mla	r2, r9, fp, r2
 800a1c4:	4452      	add	r2, sl
 800a1c6:	b289      	uxth	r1, r1
 800a1c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1cc:	f84e 1b04 	str.w	r1, [lr], #4
 800a1d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1d8:	f8be 1000 	ldrh.w	r1, [lr]
 800a1dc:	fb09 110a 	mla	r1, r9, sl, r1
 800a1e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a1e4:	4567      	cmp	r7, ip
 800a1e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1ea:	d8e5      	bhi.n	800a1b8 <__multiply+0x10c>
 800a1ec:	9a01      	ldr	r2, [sp, #4]
 800a1ee:	50a9      	str	r1, [r5, r2]
 800a1f0:	3504      	adds	r5, #4
 800a1f2:	e799      	b.n	800a128 <__multiply+0x7c>
 800a1f4:	3e01      	subs	r6, #1
 800a1f6:	e79b      	b.n	800a130 <__multiply+0x84>
 800a1f8:	0801eb38 	.word	0x0801eb38
 800a1fc:	0801eb49 	.word	0x0801eb49

0800a200 <__pow5mult>:
 800a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a204:	4615      	mov	r5, r2
 800a206:	f012 0203 	ands.w	r2, r2, #3
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	d007      	beq.n	800a220 <__pow5mult+0x20>
 800a210:	4c25      	ldr	r4, [pc, #148]	; (800a2a8 <__pow5mult+0xa8>)
 800a212:	3a01      	subs	r2, #1
 800a214:	2300      	movs	r3, #0
 800a216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a21a:	f7ff fe9d 	bl	8009f58 <__multadd>
 800a21e:	4607      	mov	r7, r0
 800a220:	10ad      	asrs	r5, r5, #2
 800a222:	d03d      	beq.n	800a2a0 <__pow5mult+0xa0>
 800a224:	69f4      	ldr	r4, [r6, #28]
 800a226:	b97c      	cbnz	r4, 800a248 <__pow5mult+0x48>
 800a228:	2010      	movs	r0, #16
 800a22a:	f7ff fd7f 	bl	8009d2c <malloc>
 800a22e:	4602      	mov	r2, r0
 800a230:	61f0      	str	r0, [r6, #28]
 800a232:	b928      	cbnz	r0, 800a240 <__pow5mult+0x40>
 800a234:	4b1d      	ldr	r3, [pc, #116]	; (800a2ac <__pow5mult+0xac>)
 800a236:	481e      	ldr	r0, [pc, #120]	; (800a2b0 <__pow5mult+0xb0>)
 800a238:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a23c:	f000 fbe4 	bl	800aa08 <__assert_func>
 800a240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a244:	6004      	str	r4, [r0, #0]
 800a246:	60c4      	str	r4, [r0, #12]
 800a248:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a24c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a250:	b94c      	cbnz	r4, 800a266 <__pow5mult+0x66>
 800a252:	f240 2171 	movw	r1, #625	; 0x271
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff ff12 	bl	800a080 <__i2b>
 800a25c:	2300      	movs	r3, #0
 800a25e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a262:	4604      	mov	r4, r0
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	f04f 0900 	mov.w	r9, #0
 800a26a:	07eb      	lsls	r3, r5, #31
 800a26c:	d50a      	bpl.n	800a284 <__pow5mult+0x84>
 800a26e:	4639      	mov	r1, r7
 800a270:	4622      	mov	r2, r4
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff ff1a 	bl	800a0ac <__multiply>
 800a278:	4639      	mov	r1, r7
 800a27a:	4680      	mov	r8, r0
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff fe49 	bl	8009f14 <_Bfree>
 800a282:	4647      	mov	r7, r8
 800a284:	106d      	asrs	r5, r5, #1
 800a286:	d00b      	beq.n	800a2a0 <__pow5mult+0xa0>
 800a288:	6820      	ldr	r0, [r4, #0]
 800a28a:	b938      	cbnz	r0, 800a29c <__pow5mult+0x9c>
 800a28c:	4622      	mov	r2, r4
 800a28e:	4621      	mov	r1, r4
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff ff0b 	bl	800a0ac <__multiply>
 800a296:	6020      	str	r0, [r4, #0]
 800a298:	f8c0 9000 	str.w	r9, [r0]
 800a29c:	4604      	mov	r4, r0
 800a29e:	e7e4      	b.n	800a26a <__pow5mult+0x6a>
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0801ec98 	.word	0x0801ec98
 800a2ac:	0801eac9 	.word	0x0801eac9
 800a2b0:	0801eb49 	.word	0x0801eb49

0800a2b4 <__lshift>:
 800a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	6849      	ldr	r1, [r1, #4]
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	4691      	mov	r9, r2
 800a2c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2cc:	f108 0601 	add.w	r6, r8, #1
 800a2d0:	42b3      	cmp	r3, r6
 800a2d2:	db0b      	blt.n	800a2ec <__lshift+0x38>
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff fddd 	bl	8009e94 <_Balloc>
 800a2da:	4605      	mov	r5, r0
 800a2dc:	b948      	cbnz	r0, 800a2f2 <__lshift+0x3e>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b28      	ldr	r3, [pc, #160]	; (800a384 <__lshift+0xd0>)
 800a2e2:	4829      	ldr	r0, [pc, #164]	; (800a388 <__lshift+0xd4>)
 800a2e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a2e8:	f000 fb8e 	bl	800aa08 <__assert_func>
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	e7ee      	b.n	800a2d0 <__lshift+0x1c>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f100 0114 	add.w	r1, r0, #20
 800a2f8:	f100 0210 	add.w	r2, r0, #16
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	4553      	cmp	r3, sl
 800a300:	db33      	blt.n	800a36a <__lshift+0xb6>
 800a302:	6920      	ldr	r0, [r4, #16]
 800a304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a308:	f104 0314 	add.w	r3, r4, #20
 800a30c:	f019 091f 	ands.w	r9, r9, #31
 800a310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a314:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a318:	d02b      	beq.n	800a372 <__lshift+0xbe>
 800a31a:	f1c9 0e20 	rsb	lr, r9, #32
 800a31e:	468a      	mov	sl, r1
 800a320:	2200      	movs	r2, #0
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	fa00 f009 	lsl.w	r0, r0, r9
 800a328:	4310      	orrs	r0, r2
 800a32a:	f84a 0b04 	str.w	r0, [sl], #4
 800a32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a332:	459c      	cmp	ip, r3
 800a334:	fa22 f20e 	lsr.w	r2, r2, lr
 800a338:	d8f3      	bhi.n	800a322 <__lshift+0x6e>
 800a33a:	ebac 0304 	sub.w	r3, ip, r4
 800a33e:	3b15      	subs	r3, #21
 800a340:	f023 0303 	bic.w	r3, r3, #3
 800a344:	3304      	adds	r3, #4
 800a346:	f104 0015 	add.w	r0, r4, #21
 800a34a:	4584      	cmp	ip, r0
 800a34c:	bf38      	it	cc
 800a34e:	2304      	movcc	r3, #4
 800a350:	50ca      	str	r2, [r1, r3]
 800a352:	b10a      	cbz	r2, 800a358 <__lshift+0xa4>
 800a354:	f108 0602 	add.w	r6, r8, #2
 800a358:	3e01      	subs	r6, #1
 800a35a:	4638      	mov	r0, r7
 800a35c:	612e      	str	r6, [r5, #16]
 800a35e:	4621      	mov	r1, r4
 800a360:	f7ff fdd8 	bl	8009f14 <_Bfree>
 800a364:	4628      	mov	r0, r5
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a36e:	3301      	adds	r3, #1
 800a370:	e7c5      	b.n	800a2fe <__lshift+0x4a>
 800a372:	3904      	subs	r1, #4
 800a374:	f853 2b04 	ldr.w	r2, [r3], #4
 800a378:	f841 2f04 	str.w	r2, [r1, #4]!
 800a37c:	459c      	cmp	ip, r3
 800a37e:	d8f9      	bhi.n	800a374 <__lshift+0xc0>
 800a380:	e7ea      	b.n	800a358 <__lshift+0xa4>
 800a382:	bf00      	nop
 800a384:	0801eb38 	.word	0x0801eb38
 800a388:	0801eb49 	.word	0x0801eb49

0800a38c <__mcmp>:
 800a38c:	b530      	push	{r4, r5, lr}
 800a38e:	6902      	ldr	r2, [r0, #16]
 800a390:	690c      	ldr	r4, [r1, #16]
 800a392:	1b12      	subs	r2, r2, r4
 800a394:	d10e      	bne.n	800a3b4 <__mcmp+0x28>
 800a396:	f100 0314 	add.w	r3, r0, #20
 800a39a:	3114      	adds	r1, #20
 800a39c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3ac:	42a5      	cmp	r5, r4
 800a3ae:	d003      	beq.n	800a3b8 <__mcmp+0x2c>
 800a3b0:	d305      	bcc.n	800a3be <__mcmp+0x32>
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	bd30      	pop	{r4, r5, pc}
 800a3b8:	4283      	cmp	r3, r0
 800a3ba:	d3f3      	bcc.n	800a3a4 <__mcmp+0x18>
 800a3bc:	e7fa      	b.n	800a3b4 <__mcmp+0x28>
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c2:	e7f7      	b.n	800a3b4 <__mcmp+0x28>

0800a3c4 <__mdiff>:
 800a3c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4690      	mov	r8, r2
 800a3d2:	f7ff ffdb 	bl	800a38c <__mcmp>
 800a3d6:	1e05      	subs	r5, r0, #0
 800a3d8:	d110      	bne.n	800a3fc <__mdiff+0x38>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7ff fd59 	bl	8009e94 <_Balloc>
 800a3e2:	b930      	cbnz	r0, 800a3f2 <__mdiff+0x2e>
 800a3e4:	4b3a      	ldr	r3, [pc, #232]	; (800a4d0 <__mdiff+0x10c>)
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	f240 2137 	movw	r1, #567	; 0x237
 800a3ec:	4839      	ldr	r0, [pc, #228]	; (800a4d4 <__mdiff+0x110>)
 800a3ee:	f000 fb0b 	bl	800aa08 <__assert_func>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	bfa4      	itt	ge
 800a3fe:	4643      	movge	r3, r8
 800a400:	46a0      	movge	r8, r4
 800a402:	4630      	mov	r0, r6
 800a404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a408:	bfa6      	itte	ge
 800a40a:	461c      	movge	r4, r3
 800a40c:	2500      	movge	r5, #0
 800a40e:	2501      	movlt	r5, #1
 800a410:	f7ff fd40 	bl	8009e94 <_Balloc>
 800a414:	b920      	cbnz	r0, 800a420 <__mdiff+0x5c>
 800a416:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <__mdiff+0x10c>)
 800a418:	4602      	mov	r2, r0
 800a41a:	f240 2145 	movw	r1, #581	; 0x245
 800a41e:	e7e5      	b.n	800a3ec <__mdiff+0x28>
 800a420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a424:	6926      	ldr	r6, [r4, #16]
 800a426:	60c5      	str	r5, [r0, #12]
 800a428:	f104 0914 	add.w	r9, r4, #20
 800a42c:	f108 0514 	add.w	r5, r8, #20
 800a430:	f100 0e14 	add.w	lr, r0, #20
 800a434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a43c:	f108 0210 	add.w	r2, r8, #16
 800a440:	46f2      	mov	sl, lr
 800a442:	2100      	movs	r1, #0
 800a444:	f859 3b04 	ldr.w	r3, [r9], #4
 800a448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a44c:	fa11 f88b 	uxtah	r8, r1, fp
 800a450:	b299      	uxth	r1, r3
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	eba8 0801 	sub.w	r8, r8, r1
 800a458:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a45c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a460:	fa1f f888 	uxth.w	r8, r8
 800a464:	1419      	asrs	r1, r3, #16
 800a466:	454e      	cmp	r6, r9
 800a468:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a46c:	f84a 3b04 	str.w	r3, [sl], #4
 800a470:	d8e8      	bhi.n	800a444 <__mdiff+0x80>
 800a472:	1b33      	subs	r3, r6, r4
 800a474:	3b15      	subs	r3, #21
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	3304      	adds	r3, #4
 800a47c:	3415      	adds	r4, #21
 800a47e:	42a6      	cmp	r6, r4
 800a480:	bf38      	it	cc
 800a482:	2304      	movcc	r3, #4
 800a484:	441d      	add	r5, r3
 800a486:	4473      	add	r3, lr
 800a488:	469e      	mov	lr, r3
 800a48a:	462e      	mov	r6, r5
 800a48c:	4566      	cmp	r6, ip
 800a48e:	d30e      	bcc.n	800a4ae <__mdiff+0xea>
 800a490:	f10c 0203 	add.w	r2, ip, #3
 800a494:	1b52      	subs	r2, r2, r5
 800a496:	f022 0203 	bic.w	r2, r2, #3
 800a49a:	3d03      	subs	r5, #3
 800a49c:	45ac      	cmp	ip, r5
 800a49e:	bf38      	it	cc
 800a4a0:	2200      	movcc	r2, #0
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4a8:	b17a      	cbz	r2, 800a4ca <__mdiff+0x106>
 800a4aa:	6107      	str	r7, [r0, #16]
 800a4ac:	e7a4      	b.n	800a3f8 <__mdiff+0x34>
 800a4ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4b2:	fa11 f288 	uxtah	r2, r1, r8
 800a4b6:	1414      	asrs	r4, r2, #16
 800a4b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4bc:	b292      	uxth	r2, r2
 800a4be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4c2:	f84e 2b04 	str.w	r2, [lr], #4
 800a4c6:	1421      	asrs	r1, r4, #16
 800a4c8:	e7e0      	b.n	800a48c <__mdiff+0xc8>
 800a4ca:	3f01      	subs	r7, #1
 800a4cc:	e7ea      	b.n	800a4a4 <__mdiff+0xe0>
 800a4ce:	bf00      	nop
 800a4d0:	0801eb38 	.word	0x0801eb38
 800a4d4:	0801eb49 	.word	0x0801eb49

0800a4d8 <__d2b>:
 800a4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	460f      	mov	r7, r1
 800a4de:	2101      	movs	r1, #1
 800a4e0:	ec59 8b10 	vmov	r8, r9, d0
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	f7ff fcd5 	bl	8009e94 <_Balloc>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	b930      	cbnz	r0, 800a4fc <__d2b+0x24>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b24      	ldr	r3, [pc, #144]	; (800a584 <__d2b+0xac>)
 800a4f2:	4825      	ldr	r0, [pc, #148]	; (800a588 <__d2b+0xb0>)
 800a4f4:	f240 310f 	movw	r1, #783	; 0x30f
 800a4f8:	f000 fa86 	bl	800aa08 <__assert_func>
 800a4fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a504:	bb2d      	cbnz	r5, 800a552 <__d2b+0x7a>
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	f1b8 0300 	subs.w	r3, r8, #0
 800a50c:	d026      	beq.n	800a55c <__d2b+0x84>
 800a50e:	4668      	mov	r0, sp
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	f7ff fd87 	bl	800a024 <__lo0bits>
 800a516:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a51a:	b1e8      	cbz	r0, 800a558 <__d2b+0x80>
 800a51c:	f1c0 0320 	rsb	r3, r0, #32
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	430b      	orrs	r3, r1
 800a526:	40c2      	lsrs	r2, r0
 800a528:	6163      	str	r3, [r4, #20]
 800a52a:	9201      	str	r2, [sp, #4]
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	61a3      	str	r3, [r4, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bf14      	ite	ne
 800a534:	2202      	movne	r2, #2
 800a536:	2201      	moveq	r2, #1
 800a538:	6122      	str	r2, [r4, #16]
 800a53a:	b1bd      	cbz	r5, 800a56c <__d2b+0x94>
 800a53c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a540:	4405      	add	r5, r0
 800a542:	603d      	str	r5, [r7, #0]
 800a544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a548:	6030      	str	r0, [r6, #0]
 800a54a:	4620      	mov	r0, r4
 800a54c:	b003      	add	sp, #12
 800a54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a556:	e7d6      	b.n	800a506 <__d2b+0x2e>
 800a558:	6161      	str	r1, [r4, #20]
 800a55a:	e7e7      	b.n	800a52c <__d2b+0x54>
 800a55c:	a801      	add	r0, sp, #4
 800a55e:	f7ff fd61 	bl	800a024 <__lo0bits>
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	6163      	str	r3, [r4, #20]
 800a566:	3020      	adds	r0, #32
 800a568:	2201      	movs	r2, #1
 800a56a:	e7e5      	b.n	800a538 <__d2b+0x60>
 800a56c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a574:	6038      	str	r0, [r7, #0]
 800a576:	6918      	ldr	r0, [r3, #16]
 800a578:	f7ff fd34 	bl	8009fe4 <__hi0bits>
 800a57c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a580:	e7e2      	b.n	800a548 <__d2b+0x70>
 800a582:	bf00      	nop
 800a584:	0801eb38 	.word	0x0801eb38
 800a588:	0801eb49 	.word	0x0801eb49

0800a58c <__ssputs_r>:
 800a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	688e      	ldr	r6, [r1, #8]
 800a592:	461f      	mov	r7, r3
 800a594:	42be      	cmp	r6, r7
 800a596:	680b      	ldr	r3, [r1, #0]
 800a598:	4682      	mov	sl, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	4690      	mov	r8, r2
 800a59e:	d82c      	bhi.n	800a5fa <__ssputs_r+0x6e>
 800a5a0:	898a      	ldrh	r2, [r1, #12]
 800a5a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5a6:	d026      	beq.n	800a5f6 <__ssputs_r+0x6a>
 800a5a8:	6965      	ldr	r5, [r4, #20]
 800a5aa:	6909      	ldr	r1, [r1, #16]
 800a5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5b0:	eba3 0901 	sub.w	r9, r3, r1
 800a5b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5b8:	1c7b      	adds	r3, r7, #1
 800a5ba:	444b      	add	r3, r9
 800a5bc:	106d      	asrs	r5, r5, #1
 800a5be:	429d      	cmp	r5, r3
 800a5c0:	bf38      	it	cc
 800a5c2:	461d      	movcc	r5, r3
 800a5c4:	0553      	lsls	r3, r2, #21
 800a5c6:	d527      	bpl.n	800a618 <__ssputs_r+0x8c>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7ff fbd7 	bl	8009d7c <_malloc_r>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	b360      	cbz	r0, 800a62c <__ssputs_r+0xa0>
 800a5d2:	6921      	ldr	r1, [r4, #16]
 800a5d4:	464a      	mov	r2, r9
 800a5d6:	f000 fa09 	bl	800a9ec <memcpy>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	6126      	str	r6, [r4, #16]
 800a5e8:	6165      	str	r5, [r4, #20]
 800a5ea:	444e      	add	r6, r9
 800a5ec:	eba5 0509 	sub.w	r5, r5, r9
 800a5f0:	6026      	str	r6, [r4, #0]
 800a5f2:	60a5      	str	r5, [r4, #8]
 800a5f4:	463e      	mov	r6, r7
 800a5f6:	42be      	cmp	r6, r7
 800a5f8:	d900      	bls.n	800a5fc <__ssputs_r+0x70>
 800a5fa:	463e      	mov	r6, r7
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	4632      	mov	r2, r6
 800a600:	4641      	mov	r1, r8
 800a602:	f000 f9c9 	bl	800a998 <memmove>
 800a606:	68a3      	ldr	r3, [r4, #8]
 800a608:	1b9b      	subs	r3, r3, r6
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	4433      	add	r3, r6
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	2000      	movs	r0, #0
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	462a      	mov	r2, r5
 800a61a:	f000 fa3b 	bl	800aa94 <_realloc_r>
 800a61e:	4606      	mov	r6, r0
 800a620:	2800      	cmp	r0, #0
 800a622:	d1e0      	bne.n	800a5e6 <__ssputs_r+0x5a>
 800a624:	6921      	ldr	r1, [r4, #16]
 800a626:	4650      	mov	r0, sl
 800a628:	f7ff fb34 	bl	8009c94 <_free_r>
 800a62c:	230c      	movs	r3, #12
 800a62e:	f8ca 3000 	str.w	r3, [sl]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295
 800a63e:	e7e9      	b.n	800a614 <__ssputs_r+0x88>

0800a640 <_svfiprintf_r>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	4698      	mov	r8, r3
 800a646:	898b      	ldrh	r3, [r1, #12]
 800a648:	061b      	lsls	r3, r3, #24
 800a64a:	b09d      	sub	sp, #116	; 0x74
 800a64c:	4607      	mov	r7, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	4614      	mov	r4, r2
 800a652:	d50e      	bpl.n	800a672 <_svfiprintf_r+0x32>
 800a654:	690b      	ldr	r3, [r1, #16]
 800a656:	b963      	cbnz	r3, 800a672 <_svfiprintf_r+0x32>
 800a658:	2140      	movs	r1, #64	; 0x40
 800a65a:	f7ff fb8f 	bl	8009d7c <_malloc_r>
 800a65e:	6028      	str	r0, [r5, #0]
 800a660:	6128      	str	r0, [r5, #16]
 800a662:	b920      	cbnz	r0, 800a66e <_svfiprintf_r+0x2e>
 800a664:	230c      	movs	r3, #12
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e0d0      	b.n	800a810 <_svfiprintf_r+0x1d0>
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	616b      	str	r3, [r5, #20]
 800a672:	2300      	movs	r3, #0
 800a674:	9309      	str	r3, [sp, #36]	; 0x24
 800a676:	2320      	movs	r3, #32
 800a678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a680:	2330      	movs	r3, #48	; 0x30
 800a682:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a828 <_svfiprintf_r+0x1e8>
 800a686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a68a:	f04f 0901 	mov.w	r9, #1
 800a68e:	4623      	mov	r3, r4
 800a690:	469a      	mov	sl, r3
 800a692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a696:	b10a      	cbz	r2, 800a69c <_svfiprintf_r+0x5c>
 800a698:	2a25      	cmp	r2, #37	; 0x25
 800a69a:	d1f9      	bne.n	800a690 <_svfiprintf_r+0x50>
 800a69c:	ebba 0b04 	subs.w	fp, sl, r4
 800a6a0:	d00b      	beq.n	800a6ba <_svfiprintf_r+0x7a>
 800a6a2:	465b      	mov	r3, fp
 800a6a4:	4622      	mov	r2, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff ff6f 	bl	800a58c <__ssputs_r>
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	f000 80a9 	beq.w	800a806 <_svfiprintf_r+0x1c6>
 800a6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b6:	445a      	add	r2, fp
 800a6b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 80a1 	beq.w	800a806 <_svfiprintf_r+0x1c6>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ce:	f10a 0a01 	add.w	sl, sl, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	9307      	str	r3, [sp, #28]
 800a6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6da:	931a      	str	r3, [sp, #104]	; 0x68
 800a6dc:	4654      	mov	r4, sl
 800a6de:	2205      	movs	r2, #5
 800a6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e4:	4850      	ldr	r0, [pc, #320]	; (800a828 <_svfiprintf_r+0x1e8>)
 800a6e6:	f7f5 fdf3 	bl	80002d0 <memchr>
 800a6ea:	9a04      	ldr	r2, [sp, #16]
 800a6ec:	b9d8      	cbnz	r0, 800a726 <_svfiprintf_r+0xe6>
 800a6ee:	06d0      	lsls	r0, r2, #27
 800a6f0:	bf44      	itt	mi
 800a6f2:	2320      	movmi	r3, #32
 800a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f8:	0711      	lsls	r1, r2, #28
 800a6fa:	bf44      	itt	mi
 800a6fc:	232b      	movmi	r3, #43	; 0x2b
 800a6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a702:	f89a 3000 	ldrb.w	r3, [sl]
 800a706:	2b2a      	cmp	r3, #42	; 0x2a
 800a708:	d015      	beq.n	800a736 <_svfiprintf_r+0xf6>
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	4654      	mov	r4, sl
 800a70e:	2000      	movs	r0, #0
 800a710:	f04f 0c0a 	mov.w	ip, #10
 800a714:	4621      	mov	r1, r4
 800a716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a71a:	3b30      	subs	r3, #48	; 0x30
 800a71c:	2b09      	cmp	r3, #9
 800a71e:	d94d      	bls.n	800a7bc <_svfiprintf_r+0x17c>
 800a720:	b1b0      	cbz	r0, 800a750 <_svfiprintf_r+0x110>
 800a722:	9207      	str	r2, [sp, #28]
 800a724:	e014      	b.n	800a750 <_svfiprintf_r+0x110>
 800a726:	eba0 0308 	sub.w	r3, r0, r8
 800a72a:	fa09 f303 	lsl.w	r3, r9, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	46a2      	mov	sl, r4
 800a734:	e7d2      	b.n	800a6dc <_svfiprintf_r+0x9c>
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	1d19      	adds	r1, r3, #4
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	9103      	str	r1, [sp, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bfbb      	ittet	lt
 800a742:	425b      	neglt	r3, r3
 800a744:	f042 0202 	orrlt.w	r2, r2, #2
 800a748:	9307      	strge	r3, [sp, #28]
 800a74a:	9307      	strlt	r3, [sp, #28]
 800a74c:	bfb8      	it	lt
 800a74e:	9204      	strlt	r2, [sp, #16]
 800a750:	7823      	ldrb	r3, [r4, #0]
 800a752:	2b2e      	cmp	r3, #46	; 0x2e
 800a754:	d10c      	bne.n	800a770 <_svfiprintf_r+0x130>
 800a756:	7863      	ldrb	r3, [r4, #1]
 800a758:	2b2a      	cmp	r3, #42	; 0x2a
 800a75a:	d134      	bne.n	800a7c6 <_svfiprintf_r+0x186>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	1d1a      	adds	r2, r3, #4
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	9203      	str	r2, [sp, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	bfb8      	it	lt
 800a768:	f04f 33ff 	movlt.w	r3, #4294967295
 800a76c:	3402      	adds	r4, #2
 800a76e:	9305      	str	r3, [sp, #20]
 800a770:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a838 <_svfiprintf_r+0x1f8>
 800a774:	7821      	ldrb	r1, [r4, #0]
 800a776:	2203      	movs	r2, #3
 800a778:	4650      	mov	r0, sl
 800a77a:	f7f5 fda9 	bl	80002d0 <memchr>
 800a77e:	b138      	cbz	r0, 800a790 <_svfiprintf_r+0x150>
 800a780:	9b04      	ldr	r3, [sp, #16]
 800a782:	eba0 000a 	sub.w	r0, r0, sl
 800a786:	2240      	movs	r2, #64	; 0x40
 800a788:	4082      	lsls	r2, r0
 800a78a:	4313      	orrs	r3, r2
 800a78c:	3401      	adds	r4, #1
 800a78e:	9304      	str	r3, [sp, #16]
 800a790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a794:	4825      	ldr	r0, [pc, #148]	; (800a82c <_svfiprintf_r+0x1ec>)
 800a796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a79a:	2206      	movs	r2, #6
 800a79c:	f7f5 fd98 	bl	80002d0 <memchr>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d038      	beq.n	800a816 <_svfiprintf_r+0x1d6>
 800a7a4:	4b22      	ldr	r3, [pc, #136]	; (800a830 <_svfiprintf_r+0x1f0>)
 800a7a6:	bb1b      	cbnz	r3, 800a7f0 <_svfiprintf_r+0x1b0>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	3307      	adds	r3, #7
 800a7ac:	f023 0307 	bic.w	r3, r3, #7
 800a7b0:	3308      	adds	r3, #8
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b6:	4433      	add	r3, r6
 800a7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ba:	e768      	b.n	800a68e <_svfiprintf_r+0x4e>
 800a7bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	e7a6      	b.n	800a714 <_svfiprintf_r+0xd4>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9305      	str	r3, [sp, #20]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f04f 0c0a 	mov.w	ip, #10
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d8:	3a30      	subs	r2, #48	; 0x30
 800a7da:	2a09      	cmp	r2, #9
 800a7dc:	d903      	bls.n	800a7e6 <_svfiprintf_r+0x1a6>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0c6      	beq.n	800a770 <_svfiprintf_r+0x130>
 800a7e2:	9105      	str	r1, [sp, #20]
 800a7e4:	e7c4      	b.n	800a770 <_svfiprintf_r+0x130>
 800a7e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e7f0      	b.n	800a7d2 <_svfiprintf_r+0x192>
 800a7f0:	ab03      	add	r3, sp, #12
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <_svfiprintf_r+0x1f4>)
 800a7f8:	a904      	add	r1, sp, #16
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7fd fe76 	bl	80084ec <_printf_float>
 800a800:	1c42      	adds	r2, r0, #1
 800a802:	4606      	mov	r6, r0
 800a804:	d1d6      	bne.n	800a7b4 <_svfiprintf_r+0x174>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	065b      	lsls	r3, r3, #25
 800a80a:	f53f af2d 	bmi.w	800a668 <_svfiprintf_r+0x28>
 800a80e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a810:	b01d      	add	sp, #116	; 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	ab03      	add	r3, sp, #12
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	462a      	mov	r2, r5
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <_svfiprintf_r+0x1f4>)
 800a81e:	a904      	add	r1, sp, #16
 800a820:	4638      	mov	r0, r7
 800a822:	f7fe f907 	bl	8008a34 <_printf_i>
 800a826:	e7eb      	b.n	800a800 <_svfiprintf_r+0x1c0>
 800a828:	0801eca4 	.word	0x0801eca4
 800a82c:	0801ecae 	.word	0x0801ecae
 800a830:	080084ed 	.word	0x080084ed
 800a834:	0800a58d 	.word	0x0800a58d
 800a838:	0801ecaa 	.word	0x0801ecaa

0800a83c <__sflush_r>:
 800a83c:	898a      	ldrh	r2, [r1, #12]
 800a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a842:	4605      	mov	r5, r0
 800a844:	0710      	lsls	r0, r2, #28
 800a846:	460c      	mov	r4, r1
 800a848:	d458      	bmi.n	800a8fc <__sflush_r+0xc0>
 800a84a:	684b      	ldr	r3, [r1, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dc05      	bgt.n	800a85c <__sflush_r+0x20>
 800a850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	dc02      	bgt.n	800a85c <__sflush_r+0x20>
 800a856:	2000      	movs	r0, #0
 800a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a85e:	2e00      	cmp	r6, #0
 800a860:	d0f9      	beq.n	800a856 <__sflush_r+0x1a>
 800a862:	2300      	movs	r3, #0
 800a864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a868:	682f      	ldr	r7, [r5, #0]
 800a86a:	6a21      	ldr	r1, [r4, #32]
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	d032      	beq.n	800a8d6 <__sflush_r+0x9a>
 800a870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	075a      	lsls	r2, r3, #29
 800a876:	d505      	bpl.n	800a884 <__sflush_r+0x48>
 800a878:	6863      	ldr	r3, [r4, #4]
 800a87a:	1ac0      	subs	r0, r0, r3
 800a87c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a87e:	b10b      	cbz	r3, 800a884 <__sflush_r+0x48>
 800a880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a882:	1ac0      	subs	r0, r0, r3
 800a884:	2300      	movs	r3, #0
 800a886:	4602      	mov	r2, r0
 800a888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a88a:	6a21      	ldr	r1, [r4, #32]
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b0      	blx	r6
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	d106      	bne.n	800a8a4 <__sflush_r+0x68>
 800a896:	6829      	ldr	r1, [r5, #0]
 800a898:	291d      	cmp	r1, #29
 800a89a:	d82b      	bhi.n	800a8f4 <__sflush_r+0xb8>
 800a89c:	4a29      	ldr	r2, [pc, #164]	; (800a944 <__sflush_r+0x108>)
 800a89e:	410a      	asrs	r2, r1
 800a8a0:	07d6      	lsls	r6, r2, #31
 800a8a2:	d427      	bmi.n	800a8f4 <__sflush_r+0xb8>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	6062      	str	r2, [r4, #4]
 800a8a8:	04d9      	lsls	r1, r3, #19
 800a8aa:	6922      	ldr	r2, [r4, #16]
 800a8ac:	6022      	str	r2, [r4, #0]
 800a8ae:	d504      	bpl.n	800a8ba <__sflush_r+0x7e>
 800a8b0:	1c42      	adds	r2, r0, #1
 800a8b2:	d101      	bne.n	800a8b8 <__sflush_r+0x7c>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	b903      	cbnz	r3, 800a8ba <__sflush_r+0x7e>
 800a8b8:	6560      	str	r0, [r4, #84]	; 0x54
 800a8ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8bc:	602f      	str	r7, [r5, #0]
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	d0c9      	beq.n	800a856 <__sflush_r+0x1a>
 800a8c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	d002      	beq.n	800a8d0 <__sflush_r+0x94>
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7ff f9e2 	bl	8009c94 <_free_r>
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8d4:	e7c0      	b.n	800a858 <__sflush_r+0x1c>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	47b0      	blx	r6
 800a8dc:	1c41      	adds	r1, r0, #1
 800a8de:	d1c8      	bne.n	800a872 <__sflush_r+0x36>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0c5      	beq.n	800a872 <__sflush_r+0x36>
 800a8e6:	2b1d      	cmp	r3, #29
 800a8e8:	d001      	beq.n	800a8ee <__sflush_r+0xb2>
 800a8ea:	2b16      	cmp	r3, #22
 800a8ec:	d101      	bne.n	800a8f2 <__sflush_r+0xb6>
 800a8ee:	602f      	str	r7, [r5, #0]
 800a8f0:	e7b1      	b.n	800a856 <__sflush_r+0x1a>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	e7ad      	b.n	800a858 <__sflush_r+0x1c>
 800a8fc:	690f      	ldr	r7, [r1, #16]
 800a8fe:	2f00      	cmp	r7, #0
 800a900:	d0a9      	beq.n	800a856 <__sflush_r+0x1a>
 800a902:	0793      	lsls	r3, r2, #30
 800a904:	680e      	ldr	r6, [r1, #0]
 800a906:	bf08      	it	eq
 800a908:	694b      	ldreq	r3, [r1, #20]
 800a90a:	600f      	str	r7, [r1, #0]
 800a90c:	bf18      	it	ne
 800a90e:	2300      	movne	r3, #0
 800a910:	eba6 0807 	sub.w	r8, r6, r7
 800a914:	608b      	str	r3, [r1, #8]
 800a916:	f1b8 0f00 	cmp.w	r8, #0
 800a91a:	dd9c      	ble.n	800a856 <__sflush_r+0x1a>
 800a91c:	6a21      	ldr	r1, [r4, #32]
 800a91e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a920:	4643      	mov	r3, r8
 800a922:	463a      	mov	r2, r7
 800a924:	4628      	mov	r0, r5
 800a926:	47b0      	blx	r6
 800a928:	2800      	cmp	r0, #0
 800a92a:	dc06      	bgt.n	800a93a <__sflush_r+0xfe>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a932:	81a3      	strh	r3, [r4, #12]
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	e78e      	b.n	800a858 <__sflush_r+0x1c>
 800a93a:	4407      	add	r7, r0
 800a93c:	eba8 0800 	sub.w	r8, r8, r0
 800a940:	e7e9      	b.n	800a916 <__sflush_r+0xda>
 800a942:	bf00      	nop
 800a944:	dfbffffe 	.word	0xdfbffffe

0800a948 <_fflush_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	690b      	ldr	r3, [r1, #16]
 800a94c:	4605      	mov	r5, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	b913      	cbnz	r3, 800a958 <_fflush_r+0x10>
 800a952:	2500      	movs	r5, #0
 800a954:	4628      	mov	r0, r5
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	b118      	cbz	r0, 800a962 <_fflush_r+0x1a>
 800a95a:	6a03      	ldr	r3, [r0, #32]
 800a95c:	b90b      	cbnz	r3, 800a962 <_fflush_r+0x1a>
 800a95e:	f7fe fa05 	bl	8008d6c <__sinit>
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f3      	beq.n	800a952 <_fflush_r+0xa>
 800a96a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a96c:	07d0      	lsls	r0, r2, #31
 800a96e:	d404      	bmi.n	800a97a <_fflush_r+0x32>
 800a970:	0599      	lsls	r1, r3, #22
 800a972:	d402      	bmi.n	800a97a <_fflush_r+0x32>
 800a974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a976:	f7fe fb0f 	bl	8008f98 <__retarget_lock_acquire_recursive>
 800a97a:	4628      	mov	r0, r5
 800a97c:	4621      	mov	r1, r4
 800a97e:	f7ff ff5d 	bl	800a83c <__sflush_r>
 800a982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a984:	07da      	lsls	r2, r3, #31
 800a986:	4605      	mov	r5, r0
 800a988:	d4e4      	bmi.n	800a954 <_fflush_r+0xc>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	059b      	lsls	r3, r3, #22
 800a98e:	d4e1      	bmi.n	800a954 <_fflush_r+0xc>
 800a990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a992:	f7fe fb02 	bl	8008f9a <__retarget_lock_release_recursive>
 800a996:	e7dd      	b.n	800a954 <_fflush_r+0xc>

0800a998 <memmove>:
 800a998:	4288      	cmp	r0, r1
 800a99a:	b510      	push	{r4, lr}
 800a99c:	eb01 0402 	add.w	r4, r1, r2
 800a9a0:	d902      	bls.n	800a9a8 <memmove+0x10>
 800a9a2:	4284      	cmp	r4, r0
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	d807      	bhi.n	800a9b8 <memmove+0x20>
 800a9a8:	1e43      	subs	r3, r0, #1
 800a9aa:	42a1      	cmp	r1, r4
 800a9ac:	d008      	beq.n	800a9c0 <memmove+0x28>
 800a9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9b6:	e7f8      	b.n	800a9aa <memmove+0x12>
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	d100      	bne.n	800a9c2 <memmove+0x2a>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ca:	e7f7      	b.n	800a9bc <memmove+0x24>

0800a9cc <_sbrk_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_sbrk_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f7 fb82 	bl	80020e0 <_sbrk>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_sbrk_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_sbrk_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20008a9c 	.word	0x20008a9c

0800a9ec <memcpy>:
 800a9ec:	440a      	add	r2, r1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f4:	d100      	bne.n	800a9f8 <memcpy+0xc>
 800a9f6:	4770      	bx	lr
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa02:	4291      	cmp	r1, r2
 800aa04:	d1f9      	bne.n	800a9fa <memcpy+0xe>
 800aa06:	bd10      	pop	{r4, pc}

0800aa08 <__assert_func>:
 800aa08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__assert_func+0x2c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4605      	mov	r5, r0
 800aa14:	68d8      	ldr	r0, [r3, #12]
 800aa16:	b14c      	cbz	r4, 800aa2c <__assert_func+0x24>
 800aa18:	4b07      	ldr	r3, [pc, #28]	; (800aa38 <__assert_func+0x30>)
 800aa1a:	9100      	str	r1, [sp, #0]
 800aa1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa20:	4906      	ldr	r1, [pc, #24]	; (800aa3c <__assert_func+0x34>)
 800aa22:	462b      	mov	r3, r5
 800aa24:	f000 f872 	bl	800ab0c <fiprintf>
 800aa28:	f000 f882 	bl	800ab30 <abort>
 800aa2c:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <__assert_func+0x38>)
 800aa2e:	461c      	mov	r4, r3
 800aa30:	e7f3      	b.n	800aa1a <__assert_func+0x12>
 800aa32:	bf00      	nop
 800aa34:	20000064 	.word	0x20000064
 800aa38:	0801ecbf 	.word	0x0801ecbf
 800aa3c:	0801eccc 	.word	0x0801eccc
 800aa40:	0801ecfa 	.word	0x0801ecfa

0800aa44 <_calloc_r>:
 800aa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa46:	fba1 2402 	umull	r2, r4, r1, r2
 800aa4a:	b94c      	cbnz	r4, 800aa60 <_calloc_r+0x1c>
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	9201      	str	r2, [sp, #4]
 800aa50:	f7ff f994 	bl	8009d7c <_malloc_r>
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	4605      	mov	r5, r0
 800aa58:	b930      	cbnz	r0, 800aa68 <_calloc_r+0x24>
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	b003      	add	sp, #12
 800aa5e:	bd30      	pop	{r4, r5, pc}
 800aa60:	220c      	movs	r2, #12
 800aa62:	6002      	str	r2, [r0, #0]
 800aa64:	2500      	movs	r5, #0
 800aa66:	e7f8      	b.n	800aa5a <_calloc_r+0x16>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f7fe fa18 	bl	8008e9e <memset>
 800aa6e:	e7f4      	b.n	800aa5a <_calloc_r+0x16>

0800aa70 <__ascii_mbtowc>:
 800aa70:	b082      	sub	sp, #8
 800aa72:	b901      	cbnz	r1, 800aa76 <__ascii_mbtowc+0x6>
 800aa74:	a901      	add	r1, sp, #4
 800aa76:	b142      	cbz	r2, 800aa8a <__ascii_mbtowc+0x1a>
 800aa78:	b14b      	cbz	r3, 800aa8e <__ascii_mbtowc+0x1e>
 800aa7a:	7813      	ldrb	r3, [r2, #0]
 800aa7c:	600b      	str	r3, [r1, #0]
 800aa7e:	7812      	ldrb	r2, [r2, #0]
 800aa80:	1e10      	subs	r0, r2, #0
 800aa82:	bf18      	it	ne
 800aa84:	2001      	movne	r0, #1
 800aa86:	b002      	add	sp, #8
 800aa88:	4770      	bx	lr
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	e7fb      	b.n	800aa86 <__ascii_mbtowc+0x16>
 800aa8e:	f06f 0001 	mvn.w	r0, #1
 800aa92:	e7f8      	b.n	800aa86 <__ascii_mbtowc+0x16>

0800aa94 <_realloc_r>:
 800aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	4680      	mov	r8, r0
 800aa9a:	4614      	mov	r4, r2
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	b921      	cbnz	r1, 800aaaa <_realloc_r+0x16>
 800aaa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	f7ff b969 	b.w	8009d7c <_malloc_r>
 800aaaa:	b92a      	cbnz	r2, 800aab8 <_realloc_r+0x24>
 800aaac:	f7ff f8f2 	bl	8009c94 <_free_r>
 800aab0:	4625      	mov	r5, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab8:	f000 f841 	bl	800ab3e <_malloc_usable_size_r>
 800aabc:	4284      	cmp	r4, r0
 800aabe:	4607      	mov	r7, r0
 800aac0:	d802      	bhi.n	800aac8 <_realloc_r+0x34>
 800aac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aac6:	d812      	bhi.n	800aaee <_realloc_r+0x5a>
 800aac8:	4621      	mov	r1, r4
 800aaca:	4640      	mov	r0, r8
 800aacc:	f7ff f956 	bl	8009d7c <_malloc_r>
 800aad0:	4605      	mov	r5, r0
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d0ed      	beq.n	800aab2 <_realloc_r+0x1e>
 800aad6:	42bc      	cmp	r4, r7
 800aad8:	4622      	mov	r2, r4
 800aada:	4631      	mov	r1, r6
 800aadc:	bf28      	it	cs
 800aade:	463a      	movcs	r2, r7
 800aae0:	f7ff ff84 	bl	800a9ec <memcpy>
 800aae4:	4631      	mov	r1, r6
 800aae6:	4640      	mov	r0, r8
 800aae8:	f7ff f8d4 	bl	8009c94 <_free_r>
 800aaec:	e7e1      	b.n	800aab2 <_realloc_r+0x1e>
 800aaee:	4635      	mov	r5, r6
 800aaf0:	e7df      	b.n	800aab2 <_realloc_r+0x1e>

0800aaf2 <__ascii_wctomb>:
 800aaf2:	b149      	cbz	r1, 800ab08 <__ascii_wctomb+0x16>
 800aaf4:	2aff      	cmp	r2, #255	; 0xff
 800aaf6:	bf85      	ittet	hi
 800aaf8:	238a      	movhi	r3, #138	; 0x8a
 800aafa:	6003      	strhi	r3, [r0, #0]
 800aafc:	700a      	strbls	r2, [r1, #0]
 800aafe:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab02:	bf98      	it	ls
 800ab04:	2001      	movls	r0, #1
 800ab06:	4770      	bx	lr
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4770      	bx	lr

0800ab0c <fiprintf>:
 800ab0c:	b40e      	push	{r1, r2, r3}
 800ab0e:	b503      	push	{r0, r1, lr}
 800ab10:	4601      	mov	r1, r0
 800ab12:	ab03      	add	r3, sp, #12
 800ab14:	4805      	ldr	r0, [pc, #20]	; (800ab2c <fiprintf+0x20>)
 800ab16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1a:	6800      	ldr	r0, [r0, #0]
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f000 f83f 	bl	800aba0 <_vfiprintf_r>
 800ab22:	b002      	add	sp, #8
 800ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab28:	b003      	add	sp, #12
 800ab2a:	4770      	bx	lr
 800ab2c:	20000064 	.word	0x20000064

0800ab30 <abort>:
 800ab30:	b508      	push	{r3, lr}
 800ab32:	2006      	movs	r0, #6
 800ab34:	f000 fa0c 	bl	800af50 <raise>
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7f7 fa59 	bl	8001ff0 <_exit>

0800ab3e <_malloc_usable_size_r>:
 800ab3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab42:	1f18      	subs	r0, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfbc      	itt	lt
 800ab48:	580b      	ldrlt	r3, [r1, r0]
 800ab4a:	18c0      	addlt	r0, r0, r3
 800ab4c:	4770      	bx	lr

0800ab4e <__sfputc_r>:
 800ab4e:	6893      	ldr	r3, [r2, #8]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	b410      	push	{r4}
 800ab56:	6093      	str	r3, [r2, #8]
 800ab58:	da08      	bge.n	800ab6c <__sfputc_r+0x1e>
 800ab5a:	6994      	ldr	r4, [r2, #24]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	db01      	blt.n	800ab64 <__sfputc_r+0x16>
 800ab60:	290a      	cmp	r1, #10
 800ab62:	d103      	bne.n	800ab6c <__sfputc_r+0x1e>
 800ab64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab68:	f000 b934 	b.w	800add4 <__swbuf_r>
 800ab6c:	6813      	ldr	r3, [r2, #0]
 800ab6e:	1c58      	adds	r0, r3, #1
 800ab70:	6010      	str	r0, [r2, #0]
 800ab72:	7019      	strb	r1, [r3, #0]
 800ab74:	4608      	mov	r0, r1
 800ab76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <__sfputs_r>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	4614      	mov	r4, r2
 800ab84:	18d5      	adds	r5, r2, r3
 800ab86:	42ac      	cmp	r4, r5
 800ab88:	d101      	bne.n	800ab8e <__sfputs_r+0x12>
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e007      	b.n	800ab9e <__sfputs_r+0x22>
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	463a      	mov	r2, r7
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff ffda 	bl	800ab4e <__sfputc_r>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d1f3      	bne.n	800ab86 <__sfputs_r+0xa>
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aba0 <_vfiprintf_r>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	460d      	mov	r5, r1
 800aba6:	b09d      	sub	sp, #116	; 0x74
 800aba8:	4614      	mov	r4, r2
 800abaa:	4698      	mov	r8, r3
 800abac:	4606      	mov	r6, r0
 800abae:	b118      	cbz	r0, 800abb8 <_vfiprintf_r+0x18>
 800abb0:	6a03      	ldr	r3, [r0, #32]
 800abb2:	b90b      	cbnz	r3, 800abb8 <_vfiprintf_r+0x18>
 800abb4:	f7fe f8da 	bl	8008d6c <__sinit>
 800abb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d405      	bmi.n	800abca <_vfiprintf_r+0x2a>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	059a      	lsls	r2, r3, #22
 800abc2:	d402      	bmi.n	800abca <_vfiprintf_r+0x2a>
 800abc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc6:	f7fe f9e7 	bl	8008f98 <__retarget_lock_acquire_recursive>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	071b      	lsls	r3, r3, #28
 800abce:	d501      	bpl.n	800abd4 <_vfiprintf_r+0x34>
 800abd0:	692b      	ldr	r3, [r5, #16]
 800abd2:	b99b      	cbnz	r3, 800abfc <_vfiprintf_r+0x5c>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f93a 	bl	800ae50 <__swsetup_r>
 800abdc:	b170      	cbz	r0, 800abfc <_vfiprintf_r+0x5c>
 800abde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe0:	07dc      	lsls	r4, r3, #31
 800abe2:	d504      	bpl.n	800abee <_vfiprintf_r+0x4e>
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295
 800abe8:	b01d      	add	sp, #116	; 0x74
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	0598      	lsls	r0, r3, #22
 800abf2:	d4f7      	bmi.n	800abe4 <_vfiprintf_r+0x44>
 800abf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abf6:	f7fe f9d0 	bl	8008f9a <__retarget_lock_release_recursive>
 800abfa:	e7f3      	b.n	800abe4 <_vfiprintf_r+0x44>
 800abfc:	2300      	movs	r3, #0
 800abfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ac00:	2320      	movs	r3, #32
 800ac02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac0a:	2330      	movs	r3, #48	; 0x30
 800ac0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800adc0 <_vfiprintf_r+0x220>
 800ac10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac14:	f04f 0901 	mov.w	r9, #1
 800ac18:	4623      	mov	r3, r4
 800ac1a:	469a      	mov	sl, r3
 800ac1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac20:	b10a      	cbz	r2, 800ac26 <_vfiprintf_r+0x86>
 800ac22:	2a25      	cmp	r2, #37	; 0x25
 800ac24:	d1f9      	bne.n	800ac1a <_vfiprintf_r+0x7a>
 800ac26:	ebba 0b04 	subs.w	fp, sl, r4
 800ac2a:	d00b      	beq.n	800ac44 <_vfiprintf_r+0xa4>
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	4622      	mov	r2, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	4630      	mov	r0, r6
 800ac34:	f7ff ffa2 	bl	800ab7c <__sfputs_r>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f000 80a9 	beq.w	800ad90 <_vfiprintf_r+0x1f0>
 800ac3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac40:	445a      	add	r2, fp
 800ac42:	9209      	str	r2, [sp, #36]	; 0x24
 800ac44:	f89a 3000 	ldrb.w	r3, [sl]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 80a1 	beq.w	800ad90 <_vfiprintf_r+0x1f0>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac58:	f10a 0a01 	add.w	sl, sl, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac64:	931a      	str	r3, [sp, #104]	; 0x68
 800ac66:	4654      	mov	r4, sl
 800ac68:	2205      	movs	r2, #5
 800ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6e:	4854      	ldr	r0, [pc, #336]	; (800adc0 <_vfiprintf_r+0x220>)
 800ac70:	f7f5 fb2e 	bl	80002d0 <memchr>
 800ac74:	9a04      	ldr	r2, [sp, #16]
 800ac76:	b9d8      	cbnz	r0, 800acb0 <_vfiprintf_r+0x110>
 800ac78:	06d1      	lsls	r1, r2, #27
 800ac7a:	bf44      	itt	mi
 800ac7c:	2320      	movmi	r3, #32
 800ac7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac82:	0713      	lsls	r3, r2, #28
 800ac84:	bf44      	itt	mi
 800ac86:	232b      	movmi	r3, #43	; 0x2b
 800ac88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac90:	2b2a      	cmp	r3, #42	; 0x2a
 800ac92:	d015      	beq.n	800acc0 <_vfiprintf_r+0x120>
 800ac94:	9a07      	ldr	r2, [sp, #28]
 800ac96:	4654      	mov	r4, sl
 800ac98:	2000      	movs	r0, #0
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4621      	mov	r1, r4
 800aca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aca4:	3b30      	subs	r3, #48	; 0x30
 800aca6:	2b09      	cmp	r3, #9
 800aca8:	d94d      	bls.n	800ad46 <_vfiprintf_r+0x1a6>
 800acaa:	b1b0      	cbz	r0, 800acda <_vfiprintf_r+0x13a>
 800acac:	9207      	str	r2, [sp, #28]
 800acae:	e014      	b.n	800acda <_vfiprintf_r+0x13a>
 800acb0:	eba0 0308 	sub.w	r3, r0, r8
 800acb4:	fa09 f303 	lsl.w	r3, r9, r3
 800acb8:	4313      	orrs	r3, r2
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	46a2      	mov	sl, r4
 800acbe:	e7d2      	b.n	800ac66 <_vfiprintf_r+0xc6>
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	1d19      	adds	r1, r3, #4
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	9103      	str	r1, [sp, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfbb      	ittet	lt
 800accc:	425b      	neglt	r3, r3
 800acce:	f042 0202 	orrlt.w	r2, r2, #2
 800acd2:	9307      	strge	r3, [sp, #28]
 800acd4:	9307      	strlt	r3, [sp, #28]
 800acd6:	bfb8      	it	lt
 800acd8:	9204      	strlt	r2, [sp, #16]
 800acda:	7823      	ldrb	r3, [r4, #0]
 800acdc:	2b2e      	cmp	r3, #46	; 0x2e
 800acde:	d10c      	bne.n	800acfa <_vfiprintf_r+0x15a>
 800ace0:	7863      	ldrb	r3, [r4, #1]
 800ace2:	2b2a      	cmp	r3, #42	; 0x2a
 800ace4:	d134      	bne.n	800ad50 <_vfiprintf_r+0x1b0>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	9203      	str	r2, [sp, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfb8      	it	lt
 800acf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800acf6:	3402      	adds	r4, #2
 800acf8:	9305      	str	r3, [sp, #20]
 800acfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800add0 <_vfiprintf_r+0x230>
 800acfe:	7821      	ldrb	r1, [r4, #0]
 800ad00:	2203      	movs	r2, #3
 800ad02:	4650      	mov	r0, sl
 800ad04:	f7f5 fae4 	bl	80002d0 <memchr>
 800ad08:	b138      	cbz	r0, 800ad1a <_vfiprintf_r+0x17a>
 800ad0a:	9b04      	ldr	r3, [sp, #16]
 800ad0c:	eba0 000a 	sub.w	r0, r0, sl
 800ad10:	2240      	movs	r2, #64	; 0x40
 800ad12:	4082      	lsls	r2, r0
 800ad14:	4313      	orrs	r3, r2
 800ad16:	3401      	adds	r4, #1
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1e:	4829      	ldr	r0, [pc, #164]	; (800adc4 <_vfiprintf_r+0x224>)
 800ad20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad24:	2206      	movs	r2, #6
 800ad26:	f7f5 fad3 	bl	80002d0 <memchr>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d03f      	beq.n	800adae <_vfiprintf_r+0x20e>
 800ad2e:	4b26      	ldr	r3, [pc, #152]	; (800adc8 <_vfiprintf_r+0x228>)
 800ad30:	bb1b      	cbnz	r3, 800ad7a <_vfiprintf_r+0x1da>
 800ad32:	9b03      	ldr	r3, [sp, #12]
 800ad34:	3307      	adds	r3, #7
 800ad36:	f023 0307 	bic.w	r3, r3, #7
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	9303      	str	r3, [sp, #12]
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	443b      	add	r3, r7
 800ad42:	9309      	str	r3, [sp, #36]	; 0x24
 800ad44:	e768      	b.n	800ac18 <_vfiprintf_r+0x78>
 800ad46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	e7a6      	b.n	800ac9e <_vfiprintf_r+0xfe>
 800ad50:	2300      	movs	r3, #0
 800ad52:	3401      	adds	r4, #1
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	4619      	mov	r1, r3
 800ad58:	f04f 0c0a 	mov.w	ip, #10
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad62:	3a30      	subs	r2, #48	; 0x30
 800ad64:	2a09      	cmp	r2, #9
 800ad66:	d903      	bls.n	800ad70 <_vfiprintf_r+0x1d0>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0c6      	beq.n	800acfa <_vfiprintf_r+0x15a>
 800ad6c:	9105      	str	r1, [sp, #20]
 800ad6e:	e7c4      	b.n	800acfa <_vfiprintf_r+0x15a>
 800ad70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad74:	4604      	mov	r4, r0
 800ad76:	2301      	movs	r3, #1
 800ad78:	e7f0      	b.n	800ad5c <_vfiprintf_r+0x1bc>
 800ad7a:	ab03      	add	r3, sp, #12
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	462a      	mov	r2, r5
 800ad80:	4b12      	ldr	r3, [pc, #72]	; (800adcc <_vfiprintf_r+0x22c>)
 800ad82:	a904      	add	r1, sp, #16
 800ad84:	4630      	mov	r0, r6
 800ad86:	f7fd fbb1 	bl	80084ec <_printf_float>
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	1c78      	adds	r0, r7, #1
 800ad8e:	d1d6      	bne.n	800ad3e <_vfiprintf_r+0x19e>
 800ad90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad92:	07d9      	lsls	r1, r3, #31
 800ad94:	d405      	bmi.n	800ada2 <_vfiprintf_r+0x202>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	059a      	lsls	r2, r3, #22
 800ad9a:	d402      	bmi.n	800ada2 <_vfiprintf_r+0x202>
 800ad9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9e:	f7fe f8fc 	bl	8008f9a <__retarget_lock_release_recursive>
 800ada2:	89ab      	ldrh	r3, [r5, #12]
 800ada4:	065b      	lsls	r3, r3, #25
 800ada6:	f53f af1d 	bmi.w	800abe4 <_vfiprintf_r+0x44>
 800adaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adac:	e71c      	b.n	800abe8 <_vfiprintf_r+0x48>
 800adae:	ab03      	add	r3, sp, #12
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	462a      	mov	r2, r5
 800adb4:	4b05      	ldr	r3, [pc, #20]	; (800adcc <_vfiprintf_r+0x22c>)
 800adb6:	a904      	add	r1, sp, #16
 800adb8:	4630      	mov	r0, r6
 800adba:	f7fd fe3b 	bl	8008a34 <_printf_i>
 800adbe:	e7e4      	b.n	800ad8a <_vfiprintf_r+0x1ea>
 800adc0:	0801eca4 	.word	0x0801eca4
 800adc4:	0801ecae 	.word	0x0801ecae
 800adc8:	080084ed 	.word	0x080084ed
 800adcc:	0800ab7d 	.word	0x0800ab7d
 800add0:	0801ecaa 	.word	0x0801ecaa

0800add4 <__swbuf_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	460e      	mov	r6, r1
 800add8:	4614      	mov	r4, r2
 800adda:	4605      	mov	r5, r0
 800addc:	b118      	cbz	r0, 800ade6 <__swbuf_r+0x12>
 800adde:	6a03      	ldr	r3, [r0, #32]
 800ade0:	b90b      	cbnz	r3, 800ade6 <__swbuf_r+0x12>
 800ade2:	f7fd ffc3 	bl	8008d6c <__sinit>
 800ade6:	69a3      	ldr	r3, [r4, #24]
 800ade8:	60a3      	str	r3, [r4, #8]
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	071a      	lsls	r2, r3, #28
 800adee:	d525      	bpl.n	800ae3c <__swbuf_r+0x68>
 800adf0:	6923      	ldr	r3, [r4, #16]
 800adf2:	b31b      	cbz	r3, 800ae3c <__swbuf_r+0x68>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	6922      	ldr	r2, [r4, #16]
 800adf8:	1a98      	subs	r0, r3, r2
 800adfa:	6963      	ldr	r3, [r4, #20]
 800adfc:	b2f6      	uxtb	r6, r6
 800adfe:	4283      	cmp	r3, r0
 800ae00:	4637      	mov	r7, r6
 800ae02:	dc04      	bgt.n	800ae0e <__swbuf_r+0x3a>
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7ff fd9e 	bl	800a948 <_fflush_r>
 800ae0c:	b9e0      	cbnz	r0, 800ae48 <__swbuf_r+0x74>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	60a3      	str	r3, [r4, #8]
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	6022      	str	r2, [r4, #0]
 800ae1a:	701e      	strb	r6, [r3, #0]
 800ae1c:	6962      	ldr	r2, [r4, #20]
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d004      	beq.n	800ae2e <__swbuf_r+0x5a>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	07db      	lsls	r3, r3, #31
 800ae28:	d506      	bpl.n	800ae38 <__swbuf_r+0x64>
 800ae2a:	2e0a      	cmp	r6, #10
 800ae2c:	d104      	bne.n	800ae38 <__swbuf_r+0x64>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f7ff fd89 	bl	800a948 <_fflush_r>
 800ae36:	b938      	cbnz	r0, 800ae48 <__swbuf_r+0x74>
 800ae38:	4638      	mov	r0, r7
 800ae3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f000 f806 	bl	800ae50 <__swsetup_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d0d5      	beq.n	800adf4 <__swbuf_r+0x20>
 800ae48:	f04f 37ff 	mov.w	r7, #4294967295
 800ae4c:	e7f4      	b.n	800ae38 <__swbuf_r+0x64>
	...

0800ae50 <__swsetup_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4b2a      	ldr	r3, [pc, #168]	; (800aefc <__swsetup_r+0xac>)
 800ae54:	4605      	mov	r5, r0
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	460c      	mov	r4, r1
 800ae5a:	b118      	cbz	r0, 800ae64 <__swsetup_r+0x14>
 800ae5c:	6a03      	ldr	r3, [r0, #32]
 800ae5e:	b90b      	cbnz	r3, 800ae64 <__swsetup_r+0x14>
 800ae60:	f7fd ff84 	bl	8008d6c <__sinit>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae6a:	0718      	lsls	r0, r3, #28
 800ae6c:	d422      	bmi.n	800aeb4 <__swsetup_r+0x64>
 800ae6e:	06d9      	lsls	r1, r3, #27
 800ae70:	d407      	bmi.n	800ae82 <__swsetup_r+0x32>
 800ae72:	2309      	movs	r3, #9
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	e034      	b.n	800aeec <__swsetup_r+0x9c>
 800ae82:	0758      	lsls	r0, r3, #29
 800ae84:	d512      	bpl.n	800aeac <__swsetup_r+0x5c>
 800ae86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae88:	b141      	cbz	r1, 800ae9c <__swsetup_r+0x4c>
 800ae8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	d002      	beq.n	800ae98 <__swsetup_r+0x48>
 800ae92:	4628      	mov	r0, r5
 800ae94:	f7fe fefe 	bl	8009c94 <_free_r>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6363      	str	r3, [r4, #52]	; 0x34
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	2300      	movs	r3, #0
 800aea6:	6063      	str	r3, [r4, #4]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f043 0308 	orr.w	r3, r3, #8
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	b94b      	cbnz	r3, 800aecc <__swsetup_r+0x7c>
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec2:	d003      	beq.n	800aecc <__swsetup_r+0x7c>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 f884 	bl	800afd4 <__smakebuf_r>
 800aecc:	89a0      	ldrh	r0, [r4, #12]
 800aece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aed2:	f010 0301 	ands.w	r3, r0, #1
 800aed6:	d00a      	beq.n	800aeee <__swsetup_r+0x9e>
 800aed8:	2300      	movs	r3, #0
 800aeda:	60a3      	str	r3, [r4, #8]
 800aedc:	6963      	ldr	r3, [r4, #20]
 800aede:	425b      	negs	r3, r3
 800aee0:	61a3      	str	r3, [r4, #24]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	b943      	cbnz	r3, 800aef8 <__swsetup_r+0xa8>
 800aee6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aeea:	d1c4      	bne.n	800ae76 <__swsetup_r+0x26>
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
 800aeee:	0781      	lsls	r1, r0, #30
 800aef0:	bf58      	it	pl
 800aef2:	6963      	ldrpl	r3, [r4, #20]
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	e7f4      	b.n	800aee2 <__swsetup_r+0x92>
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7f7      	b.n	800aeec <__swsetup_r+0x9c>
 800aefc:	20000064 	.word	0x20000064

0800af00 <_raise_r>:
 800af00:	291f      	cmp	r1, #31
 800af02:	b538      	push	{r3, r4, r5, lr}
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	d904      	bls.n	800af14 <_raise_r+0x14>
 800af0a:	2316      	movs	r3, #22
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af16:	b112      	cbz	r2, 800af1e <_raise_r+0x1e>
 800af18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af1c:	b94b      	cbnz	r3, 800af32 <_raise_r+0x32>
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f830 	bl	800af84 <_getpid_r>
 800af24:	462a      	mov	r2, r5
 800af26:	4601      	mov	r1, r0
 800af28:	4620      	mov	r0, r4
 800af2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af2e:	f000 b817 	b.w	800af60 <_kill_r>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d00a      	beq.n	800af4c <_raise_r+0x4c>
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	d103      	bne.n	800af42 <_raise_r+0x42>
 800af3a:	2316      	movs	r3, #22
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	2001      	movs	r0, #1
 800af40:	e7e7      	b.n	800af12 <_raise_r+0x12>
 800af42:	2400      	movs	r4, #0
 800af44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af48:	4628      	mov	r0, r5
 800af4a:	4798      	blx	r3
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7e0      	b.n	800af12 <_raise_r+0x12>

0800af50 <raise>:
 800af50:	4b02      	ldr	r3, [pc, #8]	; (800af5c <raise+0xc>)
 800af52:	4601      	mov	r1, r0
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f7ff bfd3 	b.w	800af00 <_raise_r>
 800af5a:	bf00      	nop
 800af5c:	20000064 	.word	0x20000064

0800af60 <_kill_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_kill_r+0x20>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	4611      	mov	r1, r2
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	f7f7 f82f 	bl	8001fd0 <_kill>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d102      	bne.n	800af7c <_kill_r+0x1c>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	b103      	cbz	r3, 800af7c <_kill_r+0x1c>
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20008a9c 	.word	0x20008a9c

0800af84 <_getpid_r>:
 800af84:	f7f7 b81c 	b.w	8001fc0 <_getpid>

0800af88 <__swhatbuf_r>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	2900      	cmp	r1, #0
 800af92:	b096      	sub	sp, #88	; 0x58
 800af94:	4615      	mov	r5, r2
 800af96:	461e      	mov	r6, r3
 800af98:	da0d      	bge.n	800afb6 <__swhatbuf_r+0x2e>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afa0:	f04f 0100 	mov.w	r1, #0
 800afa4:	bf0c      	ite	eq
 800afa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afaa:	2340      	movne	r3, #64	; 0x40
 800afac:	2000      	movs	r0, #0
 800afae:	6031      	str	r1, [r6, #0]
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	b016      	add	sp, #88	; 0x58
 800afb4:	bd70      	pop	{r4, r5, r6, pc}
 800afb6:	466a      	mov	r2, sp
 800afb8:	f000 f848 	bl	800b04c <_fstat_r>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	dbec      	blt.n	800af9a <__swhatbuf_r+0x12>
 800afc0:	9901      	ldr	r1, [sp, #4]
 800afc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800afc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800afca:	4259      	negs	r1, r3
 800afcc:	4159      	adcs	r1, r3
 800afce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd2:	e7eb      	b.n	800afac <__swhatbuf_r+0x24>

0800afd4 <__smakebuf_r>:
 800afd4:	898b      	ldrh	r3, [r1, #12]
 800afd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afd8:	079d      	lsls	r5, r3, #30
 800afda:	4606      	mov	r6, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	d507      	bpl.n	800aff0 <__smakebuf_r+0x1c>
 800afe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	6123      	str	r3, [r4, #16]
 800afe8:	2301      	movs	r3, #1
 800afea:	6163      	str	r3, [r4, #20]
 800afec:	b002      	add	sp, #8
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	ab01      	add	r3, sp, #4
 800aff2:	466a      	mov	r2, sp
 800aff4:	f7ff ffc8 	bl	800af88 <__swhatbuf_r>
 800aff8:	9900      	ldr	r1, [sp, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	4630      	mov	r0, r6
 800affe:	f7fe febd 	bl	8009d7c <_malloc_r>
 800b002:	b948      	cbnz	r0, 800b018 <__smakebuf_r+0x44>
 800b004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b008:	059a      	lsls	r2, r3, #22
 800b00a:	d4ef      	bmi.n	800afec <__smakebuf_r+0x18>
 800b00c:	f023 0303 	bic.w	r3, r3, #3
 800b010:	f043 0302 	orr.w	r3, r3, #2
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	e7e3      	b.n	800afe0 <__smakebuf_r+0xc>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	6020      	str	r0, [r4, #0]
 800b01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	9b00      	ldr	r3, [sp, #0]
 800b024:	6163      	str	r3, [r4, #20]
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	6120      	str	r0, [r4, #16]
 800b02a:	b15b      	cbz	r3, 800b044 <__smakebuf_r+0x70>
 800b02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b030:	4630      	mov	r0, r6
 800b032:	f000 f81d 	bl	800b070 <_isatty_r>
 800b036:	b128      	cbz	r0, 800b044 <__smakebuf_r+0x70>
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	431d      	orrs	r5, r3
 800b048:	81a5      	strh	r5, [r4, #12]
 800b04a:	e7cf      	b.n	800afec <__smakebuf_r+0x18>

0800b04c <_fstat_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d07      	ldr	r5, [pc, #28]	; (800b06c <_fstat_r+0x20>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	4611      	mov	r1, r2
 800b058:	602b      	str	r3, [r5, #0]
 800b05a:	f7f7 f818 	bl	800208e <_fstat>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d102      	bne.n	800b068 <_fstat_r+0x1c>
 800b062:	682b      	ldr	r3, [r5, #0]
 800b064:	b103      	cbz	r3, 800b068 <_fstat_r+0x1c>
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	bf00      	nop
 800b06c:	20008a9c 	.word	0x20008a9c

0800b070 <_isatty_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_isatty_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7f7 f817 	bl	80020ae <_isatty>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_isatty_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_isatty_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20008a9c 	.word	0x20008a9c

0800b090 <atan2>:
 800b090:	f000 b822 	b.w	800b0d8 <__ieee754_atan2>

0800b094 <sqrtf>:
 800b094:	b508      	push	{r3, lr}
 800b096:	ed2d 8b02 	vpush	{d8}
 800b09a:	eeb0 8a40 	vmov.f32	s16, s0
 800b09e:	f000 f817 	bl	800b0d0 <__ieee754_sqrtf>
 800b0a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0aa:	d60c      	bvs.n	800b0c6 <sqrtf+0x32>
 800b0ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b0cc <sqrtf+0x38>
 800b0b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b8:	d505      	bpl.n	800b0c6 <sqrtf+0x32>
 800b0ba:	f7fd ff43 	bl	8008f44 <__errno>
 800b0be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b0c2:	2321      	movs	r3, #33	; 0x21
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	ecbd 8b02 	vpop	{d8}
 800b0ca:	bd08      	pop	{r3, pc}
 800b0cc:	00000000 	.word	0x00000000

0800b0d0 <__ieee754_sqrtf>:
 800b0d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__ieee754_atan2>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	ec57 6b11 	vmov	r6, r7, d1
 800b0e0:	4273      	negs	r3, r6
 800b0e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b260 <__ieee754_atan2+0x188>
 800b0e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b0ea:	4333      	orrs	r3, r6
 800b0ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b0f0:	4543      	cmp	r3, r8
 800b0f2:	ec51 0b10 	vmov	r0, r1, d0
 800b0f6:	ee11 5a10 	vmov	r5, s2
 800b0fa:	d80a      	bhi.n	800b112 <__ieee754_atan2+0x3a>
 800b0fc:	4244      	negs	r4, r0
 800b0fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b102:	4304      	orrs	r4, r0
 800b104:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b108:	4544      	cmp	r4, r8
 800b10a:	ee10 9a10 	vmov	r9, s0
 800b10e:	468e      	mov	lr, r1
 800b110:	d907      	bls.n	800b122 <__ieee754_atan2+0x4a>
 800b112:	4632      	mov	r2, r6
 800b114:	463b      	mov	r3, r7
 800b116:	f7f5 f939 	bl	800038c <__adddf3>
 800b11a:	ec41 0b10 	vmov	d0, r0, r1
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b12a:	4334      	orrs	r4, r6
 800b12c:	d103      	bne.n	800b136 <__ieee754_atan2+0x5e>
 800b12e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b132:	f000 b899 	b.w	800b268 <atan>
 800b136:	17bc      	asrs	r4, r7, #30
 800b138:	f004 0402 	and.w	r4, r4, #2
 800b13c:	ea53 0909 	orrs.w	r9, r3, r9
 800b140:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b144:	d107      	bne.n	800b156 <__ieee754_atan2+0x7e>
 800b146:	2c02      	cmp	r4, #2
 800b148:	d05f      	beq.n	800b20a <__ieee754_atan2+0x132>
 800b14a:	2c03      	cmp	r4, #3
 800b14c:	d1e5      	bne.n	800b11a <__ieee754_atan2+0x42>
 800b14e:	a140      	add	r1, pc, #256	; (adr r1, 800b250 <__ieee754_atan2+0x178>)
 800b150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b154:	e7e1      	b.n	800b11a <__ieee754_atan2+0x42>
 800b156:	4315      	orrs	r5, r2
 800b158:	d106      	bne.n	800b168 <__ieee754_atan2+0x90>
 800b15a:	f1be 0f00 	cmp.w	lr, #0
 800b15e:	da5f      	bge.n	800b220 <__ieee754_atan2+0x148>
 800b160:	a13d      	add	r1, pc, #244	; (adr r1, 800b258 <__ieee754_atan2+0x180>)
 800b162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b166:	e7d8      	b.n	800b11a <__ieee754_atan2+0x42>
 800b168:	4542      	cmp	r2, r8
 800b16a:	d10f      	bne.n	800b18c <__ieee754_atan2+0xb4>
 800b16c:	4293      	cmp	r3, r2
 800b16e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b172:	d107      	bne.n	800b184 <__ieee754_atan2+0xac>
 800b174:	2c02      	cmp	r4, #2
 800b176:	d84c      	bhi.n	800b212 <__ieee754_atan2+0x13a>
 800b178:	4b33      	ldr	r3, [pc, #204]	; (800b248 <__ieee754_atan2+0x170>)
 800b17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b17e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b182:	e7ca      	b.n	800b11a <__ieee754_atan2+0x42>
 800b184:	2c02      	cmp	r4, #2
 800b186:	d848      	bhi.n	800b21a <__ieee754_atan2+0x142>
 800b188:	4b30      	ldr	r3, [pc, #192]	; (800b24c <__ieee754_atan2+0x174>)
 800b18a:	e7f6      	b.n	800b17a <__ieee754_atan2+0xa2>
 800b18c:	4543      	cmp	r3, r8
 800b18e:	d0e4      	beq.n	800b15a <__ieee754_atan2+0x82>
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b196:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b19a:	da1e      	bge.n	800b1da <__ieee754_atan2+0x102>
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	da01      	bge.n	800b1a4 <__ieee754_atan2+0xcc>
 800b1a0:	323c      	adds	r2, #60	; 0x3c
 800b1a2:	db1e      	blt.n	800b1e2 <__ieee754_atan2+0x10a>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 fbd0 	bl	800094c <__aeabi_ddiv>
 800b1ac:	ec41 0b10 	vmov	d0, r0, r1
 800b1b0:	f000 f9fa 	bl	800b5a8 <fabs>
 800b1b4:	f000 f858 	bl	800b268 <atan>
 800b1b8:	ec51 0b10 	vmov	r0, r1, d0
 800b1bc:	2c01      	cmp	r4, #1
 800b1be:	d013      	beq.n	800b1e8 <__ieee754_atan2+0x110>
 800b1c0:	2c02      	cmp	r4, #2
 800b1c2:	d015      	beq.n	800b1f0 <__ieee754_atan2+0x118>
 800b1c4:	2c00      	cmp	r4, #0
 800b1c6:	d0a8      	beq.n	800b11a <__ieee754_atan2+0x42>
 800b1c8:	a317      	add	r3, pc, #92	; (adr r3, 800b228 <__ieee754_atan2+0x150>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f8db 	bl	8000388 <__aeabi_dsub>
 800b1d2:	a317      	add	r3, pc, #92	; (adr r3, 800b230 <__ieee754_atan2+0x158>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	e014      	b.n	800b204 <__ieee754_atan2+0x12c>
 800b1da:	a117      	add	r1, pc, #92	; (adr r1, 800b238 <__ieee754_atan2+0x160>)
 800b1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e0:	e7ec      	b.n	800b1bc <__ieee754_atan2+0xe4>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e7e9      	b.n	800b1bc <__ieee754_atan2+0xe4>
 800b1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	e794      	b.n	800b11a <__ieee754_atan2+0x42>
 800b1f0:	a30d      	add	r3, pc, #52	; (adr r3, 800b228 <__ieee754_atan2+0x150>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f8c7 	bl	8000388 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	a10c      	add	r1, pc, #48	; (adr r1, 800b230 <__ieee754_atan2+0x158>)
 800b200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b204:	f7f5 f8c0 	bl	8000388 <__aeabi_dsub>
 800b208:	e787      	b.n	800b11a <__ieee754_atan2+0x42>
 800b20a:	a109      	add	r1, pc, #36	; (adr r1, 800b230 <__ieee754_atan2+0x158>)
 800b20c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b210:	e783      	b.n	800b11a <__ieee754_atan2+0x42>
 800b212:	a10b      	add	r1, pc, #44	; (adr r1, 800b240 <__ieee754_atan2+0x168>)
 800b214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b218:	e77f      	b.n	800b11a <__ieee754_atan2+0x42>
 800b21a:	2000      	movs	r0, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	e77c      	b.n	800b11a <__ieee754_atan2+0x42>
 800b220:	a105      	add	r1, pc, #20	; (adr r1, 800b238 <__ieee754_atan2+0x160>)
 800b222:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b226:	e778      	b.n	800b11a <__ieee754_atan2+0x42>
 800b228:	33145c07 	.word	0x33145c07
 800b22c:	3ca1a626 	.word	0x3ca1a626
 800b230:	54442d18 	.word	0x54442d18
 800b234:	400921fb 	.word	0x400921fb
 800b238:	54442d18 	.word	0x54442d18
 800b23c:	3ff921fb 	.word	0x3ff921fb
 800b240:	54442d18 	.word	0x54442d18
 800b244:	3fe921fb 	.word	0x3fe921fb
 800b248:	0801ee00 	.word	0x0801ee00
 800b24c:	0801ee18 	.word	0x0801ee18
 800b250:	54442d18 	.word	0x54442d18
 800b254:	c00921fb 	.word	0xc00921fb
 800b258:	54442d18 	.word	0x54442d18
 800b25c:	bff921fb 	.word	0xbff921fb
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	00000000 	.word	0x00000000

0800b268 <atan>:
 800b268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	ec55 4b10 	vmov	r4, r5, d0
 800b270:	4bc3      	ldr	r3, [pc, #780]	; (800b580 <atan+0x318>)
 800b272:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b276:	429e      	cmp	r6, r3
 800b278:	46ab      	mov	fp, r5
 800b27a:	dd18      	ble.n	800b2ae <atan+0x46>
 800b27c:	4bc1      	ldr	r3, [pc, #772]	; (800b584 <atan+0x31c>)
 800b27e:	429e      	cmp	r6, r3
 800b280:	dc01      	bgt.n	800b286 <atan+0x1e>
 800b282:	d109      	bne.n	800b298 <atan+0x30>
 800b284:	b144      	cbz	r4, 800b298 <atan+0x30>
 800b286:	4622      	mov	r2, r4
 800b288:	462b      	mov	r3, r5
 800b28a:	4620      	mov	r0, r4
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7f5 f87d 	bl	800038c <__adddf3>
 800b292:	4604      	mov	r4, r0
 800b294:	460d      	mov	r5, r1
 800b296:	e006      	b.n	800b2a6 <atan+0x3e>
 800b298:	f1bb 0f00 	cmp.w	fp, #0
 800b29c:	f300 8131 	bgt.w	800b502 <atan+0x29a>
 800b2a0:	a59b      	add	r5, pc, #620	; (adr r5, 800b510 <atan+0x2a8>)
 800b2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2a6:	ec45 4b10 	vmov	d0, r4, r5
 800b2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	4bb6      	ldr	r3, [pc, #728]	; (800b588 <atan+0x320>)
 800b2b0:	429e      	cmp	r6, r3
 800b2b2:	dc14      	bgt.n	800b2de <atan+0x76>
 800b2b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b2b8:	429e      	cmp	r6, r3
 800b2ba:	dc0d      	bgt.n	800b2d8 <atan+0x70>
 800b2bc:	a396      	add	r3, pc, #600	; (adr r3, 800b518 <atan+0x2b0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	ee10 0a10 	vmov	r0, s0
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f5 f860 	bl	800038c <__adddf3>
 800b2cc:	4baf      	ldr	r3, [pc, #700]	; (800b58c <atan+0x324>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f7f5 fca2 	bl	8000c18 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <atan+0x3e>
 800b2d8:	f04f 3aff 	mov.w	sl, #4294967295
 800b2dc:	e02b      	b.n	800b336 <atan+0xce>
 800b2de:	f000 f963 	bl	800b5a8 <fabs>
 800b2e2:	4bab      	ldr	r3, [pc, #684]	; (800b590 <atan+0x328>)
 800b2e4:	429e      	cmp	r6, r3
 800b2e6:	ec55 4b10 	vmov	r4, r5, d0
 800b2ea:	f300 80bf 	bgt.w	800b46c <atan+0x204>
 800b2ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	f300 80a0 	bgt.w	800b438 <atan+0x1d0>
 800b2f8:	ee10 2a10 	vmov	r2, s0
 800b2fc:	ee10 0a10 	vmov	r0, s0
 800b300:	462b      	mov	r3, r5
 800b302:	4629      	mov	r1, r5
 800b304:	f7f5 f842 	bl	800038c <__adddf3>
 800b308:	4ba0      	ldr	r3, [pc, #640]	; (800b58c <atan+0x324>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	f7f5 f83c 	bl	8000388 <__aeabi_dsub>
 800b310:	2200      	movs	r2, #0
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	f7f5 f835 	bl	800038c <__adddf3>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	f7f5 fb0f 	bl	800094c <__aeabi_ddiv>
 800b32e:	f04f 0a00 	mov.w	sl, #0
 800b332:	4604      	mov	r4, r0
 800b334:	460d      	mov	r5, r1
 800b336:	4622      	mov	r2, r4
 800b338:	462b      	mov	r3, r5
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f5 f9db 	bl	80006f8 <__aeabi_dmul>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4680      	mov	r8, r0
 800b348:	4689      	mov	r9, r1
 800b34a:	f7f5 f9d5 	bl	80006f8 <__aeabi_dmul>
 800b34e:	a374      	add	r3, pc, #464	; (adr r3, 800b520 <atan+0x2b8>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	4606      	mov	r6, r0
 800b356:	460f      	mov	r7, r1
 800b358:	f7f5 f9ce 	bl	80006f8 <__aeabi_dmul>
 800b35c:	a372      	add	r3, pc, #456	; (adr r3, 800b528 <atan+0x2c0>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f5 f813 	bl	800038c <__adddf3>
 800b366:	4632      	mov	r2, r6
 800b368:	463b      	mov	r3, r7
 800b36a:	f7f5 f9c5 	bl	80006f8 <__aeabi_dmul>
 800b36e:	a370      	add	r3, pc, #448	; (adr r3, 800b530 <atan+0x2c8>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f5 f80a 	bl	800038c <__adddf3>
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	f7f5 f9bc 	bl	80006f8 <__aeabi_dmul>
 800b380:	a36d      	add	r3, pc, #436	; (adr r3, 800b538 <atan+0x2d0>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f5 f801 	bl	800038c <__adddf3>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f5 f9b3 	bl	80006f8 <__aeabi_dmul>
 800b392:	a36b      	add	r3, pc, #428	; (adr r3, 800b540 <atan+0x2d8>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f4 fff8 	bl	800038c <__adddf3>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	f7f5 f9aa 	bl	80006f8 <__aeabi_dmul>
 800b3a4:	a368      	add	r3, pc, #416	; (adr r3, 800b548 <atan+0x2e0>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ffef 	bl	800038c <__adddf3>
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	f7f5 f9a1 	bl	80006f8 <__aeabi_dmul>
 800b3b6:	a366      	add	r3, pc, #408	; (adr r3, 800b550 <atan+0x2e8>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	4680      	mov	r8, r0
 800b3be:	4689      	mov	r9, r1
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 f998 	bl	80006f8 <__aeabi_dmul>
 800b3c8:	a363      	add	r3, pc, #396	; (adr r3, 800b558 <atan+0x2f0>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f4 ffdb 	bl	8000388 <__aeabi_dsub>
 800b3d2:	4632      	mov	r2, r6
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f7f5 f98f 	bl	80006f8 <__aeabi_dmul>
 800b3da:	a361      	add	r3, pc, #388	; (adr r3, 800b560 <atan+0x2f8>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 ffd2 	bl	8000388 <__aeabi_dsub>
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	f7f5 f986 	bl	80006f8 <__aeabi_dmul>
 800b3ec:	a35e      	add	r3, pc, #376	; (adr r3, 800b568 <atan+0x300>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f4 ffc9 	bl	8000388 <__aeabi_dsub>
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	f7f5 f97d 	bl	80006f8 <__aeabi_dmul>
 800b3fe:	a35c      	add	r3, pc, #368	; (adr r3, 800b570 <atan+0x308>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 ffc0 	bl	8000388 <__aeabi_dsub>
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	f7f5 f974 	bl	80006f8 <__aeabi_dmul>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4640      	mov	r0, r8
 800b416:	4649      	mov	r1, r9
 800b418:	f7f4 ffb8 	bl	800038c <__adddf3>
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	f7f5 f96a 	bl	80006f8 <__aeabi_dmul>
 800b424:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	d14b      	bne.n	800b4c6 <atan+0x25e>
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f4 ffa9 	bl	8000388 <__aeabi_dsub>
 800b436:	e72c      	b.n	800b292 <atan+0x2a>
 800b438:	ee10 0a10 	vmov	r0, s0
 800b43c:	4b53      	ldr	r3, [pc, #332]	; (800b58c <atan+0x324>)
 800b43e:	2200      	movs	r2, #0
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ffa1 	bl	8000388 <__aeabi_dsub>
 800b446:	4b51      	ldr	r3, [pc, #324]	; (800b58c <atan+0x324>)
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	2200      	movs	r2, #0
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f7f4 ff9b 	bl	800038c <__adddf3>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f5 fa75 	bl	800094c <__aeabi_ddiv>
 800b462:	f04f 0a01 	mov.w	sl, #1
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	e764      	b.n	800b336 <atan+0xce>
 800b46c:	4b49      	ldr	r3, [pc, #292]	; (800b594 <atan+0x32c>)
 800b46e:	429e      	cmp	r6, r3
 800b470:	da1d      	bge.n	800b4ae <atan+0x246>
 800b472:	ee10 0a10 	vmov	r0, s0
 800b476:	4b48      	ldr	r3, [pc, #288]	; (800b598 <atan+0x330>)
 800b478:	2200      	movs	r2, #0
 800b47a:	4629      	mov	r1, r5
 800b47c:	f7f4 ff84 	bl	8000388 <__aeabi_dsub>
 800b480:	4b45      	ldr	r3, [pc, #276]	; (800b598 <atan+0x330>)
 800b482:	4606      	mov	r6, r0
 800b484:	460f      	mov	r7, r1
 800b486:	2200      	movs	r2, #0
 800b488:	4620      	mov	r0, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f5 f934 	bl	80006f8 <__aeabi_dmul>
 800b490:	4b3e      	ldr	r3, [pc, #248]	; (800b58c <atan+0x324>)
 800b492:	2200      	movs	r2, #0
 800b494:	f7f4 ff7a 	bl	800038c <__adddf3>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4630      	mov	r0, r6
 800b49e:	4639      	mov	r1, r7
 800b4a0:	f7f5 fa54 	bl	800094c <__aeabi_ddiv>
 800b4a4:	f04f 0a02 	mov.w	sl, #2
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	e743      	b.n	800b336 <atan+0xce>
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	ee10 2a10 	vmov	r2, s0
 800b4b4:	4939      	ldr	r1, [pc, #228]	; (800b59c <atan+0x334>)
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f7f5 fa48 	bl	800094c <__aeabi_ddiv>
 800b4bc:	f04f 0a03 	mov.w	sl, #3
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	e737      	b.n	800b336 <atan+0xce>
 800b4c6:	4b36      	ldr	r3, [pc, #216]	; (800b5a0 <atan+0x338>)
 800b4c8:	4e36      	ldr	r6, [pc, #216]	; (800b5a4 <atan+0x33c>)
 800b4ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 ff59 	bl	8000388 <__aeabi_dsub>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	462b      	mov	r3, r5
 800b4da:	f7f4 ff55 	bl	8000388 <__aeabi_dsub>
 800b4de:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b4ea:	f7f4 ff4d 	bl	8000388 <__aeabi_dsub>
 800b4ee:	f1bb 0f00 	cmp.w	fp, #0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	f6bf aed6 	bge.w	800b2a6 <atan+0x3e>
 800b4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4fe:	461d      	mov	r5, r3
 800b500:	e6d1      	b.n	800b2a6 <atan+0x3e>
 800b502:	a51d      	add	r5, pc, #116	; (adr r5, 800b578 <atan+0x310>)
 800b504:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b508:	e6cd      	b.n	800b2a6 <atan+0x3e>
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w
 800b510:	54442d18 	.word	0x54442d18
 800b514:	bff921fb 	.word	0xbff921fb
 800b518:	8800759c 	.word	0x8800759c
 800b51c:	7e37e43c 	.word	0x7e37e43c
 800b520:	e322da11 	.word	0xe322da11
 800b524:	3f90ad3a 	.word	0x3f90ad3a
 800b528:	24760deb 	.word	0x24760deb
 800b52c:	3fa97b4b 	.word	0x3fa97b4b
 800b530:	a0d03d51 	.word	0xa0d03d51
 800b534:	3fb10d66 	.word	0x3fb10d66
 800b538:	c54c206e 	.word	0xc54c206e
 800b53c:	3fb745cd 	.word	0x3fb745cd
 800b540:	920083ff 	.word	0x920083ff
 800b544:	3fc24924 	.word	0x3fc24924
 800b548:	5555550d 	.word	0x5555550d
 800b54c:	3fd55555 	.word	0x3fd55555
 800b550:	2c6a6c2f 	.word	0x2c6a6c2f
 800b554:	bfa2b444 	.word	0xbfa2b444
 800b558:	52defd9a 	.word	0x52defd9a
 800b55c:	3fadde2d 	.word	0x3fadde2d
 800b560:	af749a6d 	.word	0xaf749a6d
 800b564:	3fb3b0f2 	.word	0x3fb3b0f2
 800b568:	fe231671 	.word	0xfe231671
 800b56c:	3fbc71c6 	.word	0x3fbc71c6
 800b570:	9998ebc4 	.word	0x9998ebc4
 800b574:	3fc99999 	.word	0x3fc99999
 800b578:	54442d18 	.word	0x54442d18
 800b57c:	3ff921fb 	.word	0x3ff921fb
 800b580:	440fffff 	.word	0x440fffff
 800b584:	7ff00000 	.word	0x7ff00000
 800b588:	3fdbffff 	.word	0x3fdbffff
 800b58c:	3ff00000 	.word	0x3ff00000
 800b590:	3ff2ffff 	.word	0x3ff2ffff
 800b594:	40038000 	.word	0x40038000
 800b598:	3ff80000 	.word	0x3ff80000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	0801ee50 	.word	0x0801ee50
 800b5a4:	0801ee30 	.word	0x0801ee30

0800b5a8 <fabs>:
 800b5a8:	ec51 0b10 	vmov	r0, r1, d0
 800b5ac:	ee10 2a10 	vmov	r2, s0
 800b5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5b4:	ec43 2b10 	vmov	d0, r2, r3
 800b5b8:	4770      	bx	lr
	...

0800b5bc <_init>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <_fini>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr
