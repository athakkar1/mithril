
stmf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a98  0800de60  0800de60  0001de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080218f8  080218f8  00040940  2**0
                  CONTENTS
  4 .ARM          00000008  080218f8  080218f8  000318f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021900  08021900  00040940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021900  08021900  00031900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021904  08021904  00031904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000800  20000000  08021908  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000800  08022108  00040800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200008a0  080221a8  000408a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c574  20000940  08022248  00040940  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000ceb4  08022248  0004ceb4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040940  2**0
                  CONTENTS, READONLY
 14 .comment      000000b1  00000000  00000000  00040970  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001c61c  00000000  00000000  00040a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000391a  00000000  00000000  0005d03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001688  00000000  00000000  00060958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000010e8  00000000  00000000  00061fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a2df  00000000  00000000  000630c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ba34  00000000  00000000  0008d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00104408  00000000  00000000  000a8ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000073cc  00000000  00000000  001ad1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001b45b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00003325  00000000  00000000  001b4611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  001b7936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000940 	.word	0x20000940
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de48 	.word	0x0800de48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000944 	.word	0x20000944
 800020c:	0800de48 	.word	0x0800de48

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b970 	b.w	8001040 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	0000      	movs	r0, r0
	...

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800104c:	b092      	sub	sp, #72	; 0x48
 800104e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f001 fb83 	bl	800275a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 fada 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 fd10 	bl	8001a7c <MX_GPIO_Init>
  MX_DMA_Init();
 800105c:	f000 fcd4 	bl	8001a08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001060:	f000 fc74 	bl	800194c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001064:	f000 fca2 	bl	80019ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001068:	f000 fbee 	bl	8001848 <MX_TIM2_Init>
  MX_ADC1_Init();
 800106c:	f000 fb3e 	bl	80016ec <MX_ADC1_Init>
  MX_ETH_Init();
 8001070:	f000 fb9c 	bl	80017ac <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, 2);
 8001074:	2202      	movs	r2, #2
 8001076:	4974      	ldr	r1, [pc, #464]	; (8001248 <main+0x200>)
 8001078:	4874      	ldr	r0, [pc, #464]	; (800124c <main+0x204>)
 800107a:	f001 fd43 	bl	8002b04 <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fftHandler, FFT_SIZE);
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	4873      	ldr	r0, [pc, #460]	; (8001250 <main+0x208>)
 8001084:	f007 fd62 	bl	8008b4c <arm_rfft_fast_init_f32>
  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4872      	ldr	r0, [pc, #456]	; (8001254 <main+0x20c>)
 800108a:	f004 fe0b 	bl	8005ca4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4870      	ldr	r0, [pc, #448]	; (8001254 <main+0x20c>)
 8001092:	f004 fee1 	bl	8005e58 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001096:	2104      	movs	r1, #4
 8001098:	486e      	ldr	r0, [pc, #440]	; (8001254 <main+0x20c>)
 800109a:	f004 fedd 	bl	8005e58 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float peakVal = 0.0;
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t peakFreq = 0.0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
    float peakVal1 = 0.0;
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t peakFreq1 = 0.0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
    float phase = 0.0;
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    float phase1 = 0.0;
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    float phasedif = 0.0;
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(&huart3, rawRX, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	4964      	ldr	r1, [pc, #400]	; (8001258 <main+0x210>)
 80010c8:	4864      	ldr	r0, [pc, #400]	; (800125c <main+0x214>)
 80010ca:	f006 f85b 	bl	8007184 <HAL_UART_Receive_DMA>
    for(uint16_t i = 0; i < FFT_SIZE; i++){
 80010ce:	2300      	movs	r3, #0
 80010d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010d2:	e038      	b.n	8001146 <main+0xfe>
  	  hamming[i] = (.5-(.5*cos((2.0*M_PI*i)/(FFT_SIZE - 1))));
 80010d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff faa4 	bl	8000624 <__aeabi_i2d>
 80010dc:	a356      	add	r3, pc, #344	; (adr r3, 8001238 <main+0x1f0>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fb09 	bl	80006f8 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	a354      	add	r3, pc, #336	; (adr r3, 8001240 <main+0x1f8>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fc2a 	bl	800094c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	ec43 2b17 	vmov	d7, r2, r3
 8001100:	eeb0 0a47 	vmov.f32	s0, s14
 8001104:	eef0 0a67 	vmov.f32	s1, s15
 8001108:	f00b fbd2 	bl	800c8b0 <cos>
 800110c:	ec51 0b10 	vmov	r0, r1, d0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b52      	ldr	r3, [pc, #328]	; (8001260 <main+0x218>)
 8001116:	f7ff faef 	bl	80006f8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	494f      	ldr	r1, [pc, #316]	; (8001260 <main+0x218>)
 8001124:	f7ff f930 	bl	8000388 <__aeabi_dsub>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fdb9 	bl	8000ca8 <__aeabi_d2f>
 8001136:	4602      	mov	r2, r0
 8001138:	494a      	ldr	r1, [pc, #296]	; (8001264 <main+0x21c>)
 800113a:	00a3      	lsls	r3, r4, #2
 800113c:	440b      	add	r3, r1
 800113e:	601a      	str	r2, [r3, #0]
    for(uint16_t i = 0; i < FFT_SIZE; i++){
 8001140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001142:	3301      	adds	r3, #1
 8001144:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001146:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800114c:	d3c2      	bcc.n	80010d4 <main+0x8c>
    }
  while (1)
  {
	  if(newBeam){
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <main+0x220>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d050      	beq.n	80011f8 <main+0x1b0>
	  		  antenna1Phase = sepPhases[indexPoo*2];
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <main+0x224>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4a44      	ldr	r2, [pc, #272]	; (8001270 <main+0x228>)
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a43      	ldr	r2, [pc, #268]	; (8001274 <main+0x22c>)
 8001166:	6013      	str	r3, [r2, #0]
	  		  antenna2Phase = sepPhases[indexPoo*2 + 1];
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <main+0x224>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	3301      	adds	r3, #1
 8001170:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <main+0x228>)
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a3f      	ldr	r2, [pc, #252]	; (8001278 <main+0x230>)
 800117a:	6013      	str	r3, [r2, #0]
	  		  for(int i = 0; i < lenPhases; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	e026      	b.n	80011d0 <main+0x188>
	  			  if(phases[i] == antenna1Phase){
 8001182:	4a3e      	ldr	r2, [pc, #248]	; (800127c <main+0x234>)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <main+0x22c>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb4 7a67 	vcmp.f32	s14, s15
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	d103      	bne.n	80011a6 <main+0x15e>
	  				  indexPhase1 = i;
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <main+0x238>)
 80011a4:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  if(phases[i] == antenna2Phase){
 80011a6:	4a35      	ldr	r2, [pc, #212]	; (800127c <main+0x234>)
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <main+0x230>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d103      	bne.n	80011ca <main+0x182>
	  				  indexPhase2 = i;
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <main+0x23c>)
 80011c8:	701a      	strb	r2, [r3, #0]
	  		  for(int i = 0; i < lenPhases; i++){
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	3301      	adds	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	2bff      	cmp	r3, #255	; 0xff
 80011d4:	ddd5      	ble.n	8001182 <main+0x13a>
	  			  }
	  		  }
	  		  binary1 = binCode[indexPhase1];
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <main+0x238>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <main+0x240>)
 80011de:	5c9a      	ldrb	r2, [r3, r2]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <main+0x244>)
 80011e2:	701a      	strb	r2, [r3, #0]
	  		  binary2 = binCode[indexPhase2];
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <main+0x23c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <main+0x240>)
 80011ec:	5c9a      	ldrb	r2, [r3, r2]
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <main+0x248>)
 80011f0:	701a      	strb	r2, [r3, #0]
	  		  newBeam = 0;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <main+0x220>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(increment == 2048){
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <main+0x24c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001200:	d1a5      	bne.n	800114e <main+0x106>
	  		  timeFFT = HAL_GetTick();
 8001202:	f001 fafb 	bl	80027fc <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <main+0x250>)
 800120a:	6013      	str	r3, [r2, #0]
	  		  arm_rfft_fast_f32(&fftHandler, &fftin, &fftout, 0);
 800120c:	2300      	movs	r3, #0
 800120e:	4a23      	ldr	r2, [pc, #140]	; (800129c <main+0x254>)
 8001210:	4923      	ldr	r1, [pc, #140]	; (80012a0 <main+0x258>)
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <main+0x208>)
 8001214:	f007 fd4e 	bl	8008cb4 <arm_rfft_fast_f32>
	  		  arm_rfft_fast_f32(&fftHandler, &fftin1, &fftout1, 0);
 8001218:	2300      	movs	r3, #0
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <main+0x25c>)
 800121c:	4922      	ldr	r1, [pc, #136]	; (80012a8 <main+0x260>)
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <main+0x208>)
 8001220:	f007 fd48 	bl	8008cb4 <arm_rfft_fast_f32>
	  		  increment = 0;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <main+0x24c>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
	  		  uint16_t freqincrement = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	83fb      	strh	r3, [r7, #30]
	  		  for(uint16_t increment = 0; increment < FFT_SIZE; increment+=2){
 800122e:	2300      	movs	r3, #0
 8001230:	83bb      	strh	r3, [r7, #28]
 8001232:	e11c      	b.n	800146e <main+0x426>
 8001234:	f3af 8000 	nop.w
 8001238:	54442d18 	.word	0x54442d18
 800123c:	401921fb 	.word	0x401921fb
 8001240:	00000000 	.word	0x00000000
 8001244:	409ffc00 	.word	0x409ffc00
 8001248:	20003188 	.word	0x20003188
 800124c:	20000994 	.word	0x20000994
 8001250:	2000cd20 	.word	0x2000cd20
 8001254:	20000aec 	.word	0x20000aec
 8001258:	2000318c 	.word	0x2000318c
 800125c:	20000b38 	.word	0x20000b38
 8001260:	3fe00000 	.word	0x3fe00000
 8001264:	20001188 	.word	0x20001188
 8001268:	20000629 	.word	0x20000629
 800126c:	20000628 	.word	0x20000628
 8001270:	20000500 	.word	0x20000500
 8001274:	2000cd48 	.word	0x2000cd48
 8001278:	2000cd4c 	.word	0x2000cd4c
 800127c:	20000000 	.word	0x20000000
 8001280:	2000cd54 	.word	0x2000cd54
 8001284:	2000cd55 	.word	0x2000cd55
 8001288:	20000400 	.word	0x20000400
 800128c:	2000cd56 	.word	0x2000cd56
 8001290:	2000cd57 	.word	0x2000cd57
 8001294:	2000cd1c 	.word	0x2000cd1c
 8001298:	2000cd40 	.word	0x2000cd40
 800129c:	20006d1c 	.word	0x20006d1c
 80012a0:	20004d1c 	.word	0x20004d1c
 80012a4:	2000ad1c 	.word	0x2000ad1c
 80012a8:	20008d1c 	.word	0x20008d1c
	  			  float curVal = sqrtf((fftout[increment] * fftout[increment]) + (fftout[increment+1]*fftout[increment+1]));
 80012ac:	8bbb      	ldrh	r3, [r7, #28]
 80012ae:	4a8e      	ldr	r2, [pc, #568]	; (80014e8 <main+0x4a0>)
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	ed93 7a00 	vldr	s14, [r3]
 80012b8:	8bbb      	ldrh	r3, [r7, #28]
 80012ba:	4a8b      	ldr	r2, [pc, #556]	; (80014e8 <main+0x4a0>)
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a86      	ldr	r2, [pc, #536]	; (80014e8 <main+0x4a0>)
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	edd3 6a00 	vldr	s13, [r3]
 80012d6:	8bbb      	ldrh	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a83      	ldr	r2, [pc, #524]	; (80014e8 <main+0x4a0>)
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	f00b fb32 	bl	800c958 <sqrtf>
 80012f4:	ed87 0a02 	vstr	s0, [r7, #8]
	  			  if(freqincrement < 1024){
 80012f8:	8bfb      	ldrh	r3, [r7, #30]
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d20a      	bcs.n	8001316 <main+0x2ce>
	  				  values[freqincrement] = (uint16_t)curVal;
 8001300:	8bfb      	ldrh	r3, [r7, #30]
 8001302:	edd7 7a02 	vldr	s15, [r7, #8]
 8001306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130a:	ee17 2a90 	vmov	r2, s15
 800130e:	b291      	uxth	r1, r2
 8001310:	4a76      	ldr	r2, [pc, #472]	; (80014ec <main+0x4a4>)
 8001312:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			  }
	  			  float curVal1 = sqrtf((fftout1[increment] * fftout1[increment]) + (fftout1[increment+1]*fftout1[increment+1]));
 8001316:	8bbb      	ldrh	r3, [r7, #28]
 8001318:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <main+0x4a8>)
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	8bbb      	ldrh	r3, [r7, #28]
 8001324:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <main+0x4a8>)
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	8bbb      	ldrh	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <main+0x4a8>)
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	edd3 6a00 	vldr	s13, [r3]
 8001340:	8bbb      	ldrh	r3, [r7, #28]
 8001342:	3301      	adds	r3, #1
 8001344:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <main+0x4a8>)
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f00b fafd 	bl	800c958 <sqrtf>
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
	  			  if(curVal > peakVal){
 8001362:	ed97 7a02 	vldr	s14, [r7, #8]
 8001366:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800136a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	dd36      	ble.n	80013e2 <main+0x39a>
	  				  peakVal = curVal;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
	  				  peakFreq = (uint32_t) (freqincrement * 56179)/((float) FFT_SIZE);
 8001378:	8bfb      	ldrh	r3, [r7, #30]
 800137a:	f64d 3273 	movw	r2, #56179	; 0xdb73
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80014f4 <main+0x4ac>
 800138e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001396:	ee17 3a90 	vmov	r3, s15
 800139a:	617b      	str	r3, [r7, #20]
	  				  phase = atan2(fftout[increment+1], fftout[increment]);
 800139c:	8bbb      	ldrh	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <main+0x4a0>)
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f94d 	bl	8000648 <__aeabi_f2d>
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
 80013b2:	8bbb      	ldrh	r3, [r7, #28]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <main+0x4a0>)
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f943 	bl	8000648 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	ec43 2b11 	vmov	d1, r2, r3
 80013ca:	ec45 4b10 	vmov	d0, r4, r5
 80013ce:	f00b fa6b 	bl	800c8a8 <atan2>
 80013d2:	ec53 2b10 	vmov	r2, r3, d0
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc65 	bl	8000ca8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  			  }
	  			  if(curVal1 > peakVal1){
 80013e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd36      	ble.n	8001462 <main+0x41a>
	  				  peakVal1 = curVal1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
	  				  peakFreq1 = (uint32_t) (freqincrement * 46729)/((float) FFT_SIZE);
 80013f8:	8bfb      	ldrh	r3, [r7, #30]
 80013fa:	f24b 6289 	movw	r2, #46729	; 0xb689
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800140a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80014f4 <main+0x4ac>
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 3a90 	vmov	r3, s15
 800141a:	613b      	str	r3, [r7, #16]
	  				  phase1 = atan2(fftout1[increment+1], fftout1[increment]);
 800141c:	8bbb      	ldrh	r3, [r7, #28]
 800141e:	3301      	adds	r3, #1
 8001420:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <main+0x4a8>)
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f90d 	bl	8000648 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	8bbb      	ldrh	r3, [r7, #28]
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <main+0x4a8>)
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f903 	bl	8000648 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b11 	vmov	d1, r2, r3
 800144a:	ec45 4b10 	vmov	d0, r4, r5
 800144e:	f00b fa2b 	bl	800c8a8 <atan2>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fc25 	bl	8000ca8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
	  			  }
	  			  freqincrement++;
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	3301      	adds	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
	  		  for(uint16_t increment = 0; increment < FFT_SIZE; increment+=2){
 8001468:	8bbb      	ldrh	r3, [r7, #28]
 800146a:	3302      	adds	r3, #2
 800146c:	83bb      	strh	r3, [r7, #28]
 800146e:	8bbb      	ldrh	r3, [r7, #28]
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001474:	f4ff af1a 	bcc.w	80012ac <main+0x264>
	  		  }
	  		  phasedif = phase1 - phase;
 8001478:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800147c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	edc7 7a03 	vstr	s15, [r7, #12]
	  		  timeFFT = HAL_GetTick() - timeFFT;
 8001488:	f001 f9b8 	bl	80027fc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <main+0x4b0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <main+0x4b0>)
 8001496:	6013      	str	r3, [r2, #0]
	  		  if(!transmitting){
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <main+0x4b4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 808e 	bne.w	80015be <main+0x576>
	  			  for(int i=0;i<1024;i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e076      	b.n	8001596 <main+0x54e>
	  				  	  	if(i < 1023){
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014ae:	4293      	cmp	r3, r2
 80014b0:	dc2c      	bgt.n	800150c <main+0x4c4>
	  				  	  		len+=snprintf(&msg[len],sizeof(msg)-len,"%d,",values[i]);
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <main+0x4b8>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <main+0x4bc>)
 80014ba:	18d0      	adds	r0, r2, r3
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <main+0x4b8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80014c4:	1ac9      	subs	r1, r1, r3
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <main+0x4a4>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <main+0x4c0>)
 80014d0:	f009 f85c 	bl	800a58c <sniprintf>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <main+0x4b8>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <main+0x4b8>)
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e054      	b.n	8001590 <main+0x548>
 80014e6:	bf00      	nop
 80014e8:	20006d1c 	.word	0x20006d1c
 80014ec:	20003190 	.word	0x20003190
 80014f0:	2000ad1c 	.word	0x2000ad1c
 80014f4:	45000000 	.word	0x45000000
 80014f8:	2000cd40 	.word	0x2000cd40
 80014fc:	20004d18 	.word	0x20004d18
 8001500:	2000cd44 	.word	0x2000cd44
 8001504:	20003990 	.word	0x20003990
 8001508:	0800de60 	.word	0x0800de60
	  				  	  	}
	  				  	  	else{
	  			  		  		len+=snprintf(&msg[len],sizeof(msg)-len,"%d:",values[i]);
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <main+0x598>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <main+0x59c>)
 8001514:	18d0      	adds	r0, r2, r3
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <main+0x598>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f241 3188 	movw	r1, #5000	; 0x1388
 800151e:	1ac9      	subs	r1, r1, r3
 8001520:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <main+0x5a0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001528:	4a30      	ldr	r2, [pc, #192]	; (80015ec <main+0x5a4>)
 800152a:	f009 f82f 	bl	800a58c <sniprintf>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <main+0x598>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <main+0x598>)
 800153c:	801a      	strh	r2, [r3, #0]
	  			  		  		len+=snprintf(&msg[len],sizeof(msg)-len,"%7.4f,%7.4f\r\n", antenna1Phase, antenna2Phase);
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <main+0x598>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <main+0x59c>)
 8001546:	18d5      	adds	r5, r2, r3
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <main+0x598>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001550:	1ae4      	subs	r4, r4, r3
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <main+0x5a8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f876 	bl	8000648 <__aeabi_f2d>
 800155c:	4680      	mov	r8, r0
 800155e:	4689      	mov	r9, r1
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <main+0x5ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f86f 	bl	8000648 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001572:	e9cd 8900 	strd	r8, r9, [sp]
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <main+0x5b0>)
 8001578:	4621      	mov	r1, r4
 800157a:	4628      	mov	r0, r5
 800157c:	f009 f806 	bl	800a58c <sniprintf>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <main+0x598>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <main+0x598>)
 800158e:	801a      	strh	r2, [r3, #0]
	  			  for(int i=0;i<1024;i++) {
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	3301      	adds	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159c:	db84      	blt.n	80014a8 <main+0x460>
	  			  		  	}
	  			  		  }

	  			  //sprintf(msg, "FFT Time: %d UART Time: %d Missed: %d F1: %d F2: %d\r\n", timeFFT, timeUART, missedTransmit, peakFreq, peakFreq1);
	  			  //HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
	  			  HAL_UART_Transmit_DMA(&huart3,(uint8_t*)msg,len);
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <main+0x598>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	490f      	ldr	r1, [pc, #60]	; (80015e4 <main+0x59c>)
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <main+0x5b4>)
 80015a8:	f005 fd70 	bl	800708c <HAL_UART_Transmit_DMA>
	  			  transmitting = 1;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <main+0x5b8>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
	  			  timeUART = HAL_GetTick();
 80015b2:	f001 f923 	bl	80027fc <HAL_GetTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <main+0x5bc>)
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e004      	b.n	80015c8 <main+0x580>
	  		  } else {
	  			  missedTransmit++;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <main+0x5c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <main+0x5c0>)
 80015c6:	6013      	str	r3, [r2, #0]
	  		  }
	  		  peakVal = 0.0;
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
	  		  peakFreq = 0.0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
	  		  peakVal1 = 0.0;
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
	  		  peakFreq1 = 0.0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
	  if(newBeam){
 80015dc:	e5b7      	b.n	800114e <main+0x106>
 80015de:	bf00      	nop
 80015e0:	2000cd44 	.word	0x2000cd44
 80015e4:	20003990 	.word	0x20003990
 80015e8:	20003190 	.word	0x20003190
 80015ec:	0800de64 	.word	0x0800de64
 80015f0:	2000cd48 	.word	0x2000cd48
 80015f4:	2000cd4c 	.word	0x2000cd4c
 80015f8:	0800de68 	.word	0x0800de68
 80015fc:	20000b38 	.word	0x20000b38
 8001600:	20004d18 	.word	0x20004d18
 8001604:	2000cd3c 	.word	0x2000cd3c
 8001608:	2000cd38 	.word	0x2000cd38

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	; 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f009 f84d 	bl	800a6ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001630:	f003 f9c6 	bl	80049c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <SystemClock_Config+0xd8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <SystemClock_Config+0xd8>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <SystemClock_Config+0xd8>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <SystemClock_Config+0xdc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001654:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <SystemClock_Config+0xdc>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <SystemClock_Config+0xdc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800166c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001672:	2302      	movs	r3, #2
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800167c:	2304      	movs	r3, #4
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001680:	23d8      	movs	r3, #216	; 0xd8
 8001682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001684:	2302      	movs	r3, #2
 8001686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001688:	2309      	movs	r3, #9
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4618      	mov	r0, r3
 8001692:	f003 f9f5 	bl	8004a80 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800169c:	f000 fbf6 	bl	8001e8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016a0:	f003 f99e 	bl	80049e0 <HAL_PWREx_EnableOverDrive>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80016aa:	f000 fbef 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ae:	230f      	movs	r3, #15
 80016b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b2:	2302      	movs	r3, #2
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2103      	movs	r1, #3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fc7b 	bl	8004fc8 <HAL_RCC_ClockConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016d8:	f000 fbd8 	bl	8001e8c <Error_Handler>
  }
}
 80016dc:	bf00      	nop
 80016de:	3750      	adds	r7, #80	; 0x50
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000

080016ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <MX_ADC1_Init+0xbc>)
 8001702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_ADC1_Init+0xb8>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001714:	2201      	movs	r2, #1
 8001716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_ADC1_Init+0xb8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001728:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001730:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_ADC1_Init+0xb8>)
 800173e:	2202      	movs	r2, #2
 8001740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_ADC1_Init+0xb8>)
 800174c:	2201      	movs	r2, #1
 800174e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001750:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001752:	f001 f883 	bl	800285c <HAL_ADC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800175c:	f000 fb96 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001764:	2301      	movs	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_ADC1_Init+0xb8>)
 8001772:	f001 fadf 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800177c:	f000 fb86 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001780:	2303      	movs	r3, #3
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001784:	2302      	movs	r3, #2
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_ADC1_Init+0xb8>)
 800178e:	f001 fad1 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001798:	f000 fb78 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000994 	.word	0x20000994
 80017a8:	40012000 	.word	0x40012000

080017ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_ETH_Init+0x84>)
 80017b2:	4a20      	ldr	r2, [pc, #128]	; (8001834 <MX_ETH_Init+0x88>)
 80017b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_ETH_Init+0x8c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_ETH_Init+0x8c>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_ETH_Init+0x8c>)
 80017c4:	22e1      	movs	r2, #225	; 0xe1
 80017c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_ETH_Init+0x8c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_ETH_Init+0x8c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_ETH_Init+0x8c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_ETH_Init+0x84>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <MX_ETH_Init+0x8c>)
 80017de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_ETH_Init+0x84>)
 80017e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_ETH_Init+0x84>)
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <MX_ETH_Init+0x90>)
 80017ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_ETH_Init+0x84>)
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_ETH_Init+0x94>)
 80017f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_ETH_Init+0x84>)
 80017f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <MX_ETH_Init+0x84>)
 80017fe:	f002 fa91 	bl	8003d24 <HAL_ETH_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001808:	f000 fb40 	bl	8001e8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800180c:	2238      	movs	r2, #56	; 0x38
 800180e:	2100      	movs	r1, #0
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_ETH_Init+0x98>)
 8001812:	f008 ff52 	bl	800a6ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_ETH_Init+0x98>)
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_ETH_Init+0x98>)
 800181e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001822:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_ETH_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000a3c 	.word	0x20000a3c
 8001834:	40028000 	.word	0x40028000
 8001838:	2000cd58 	.word	0x2000cd58
 800183c:	200008a0 	.word	0x200008a0
 8001840:	20000800 	.word	0x20000800
 8001844:	2000095c 	.word	0x2000095c

08001848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <MX_TIM2_Init+0x100>)
 800187c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <MX_TIM2_Init+0x100>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <MX_TIM2_Init+0x100>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <MX_TIM2_Init+0x100>)
 8001890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <MX_TIM2_Init+0x100>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_TIM2_Init+0x100>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a2:	4829      	ldr	r0, [pc, #164]	; (8001948 <MX_TIM2_Init+0x100>)
 80018a4:	f004 f9a6 	bl	8005bf4 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018ae:	f000 faed 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018bc:	4619      	mov	r1, r3
 80018be:	4822      	ldr	r0, [pc, #136]	; (8001948 <MX_TIM2_Init+0x100>)
 80018c0:	f004 fdac 	bl	800641c <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018ca:	f000 fadf 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <MX_TIM2_Init+0x100>)
 80018d0:	f004 fa60 	bl	8005d94 <HAL_TIM_OC_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80018da:	f000 fad7 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018de:	2320      	movs	r3, #32
 80018e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4816      	ldr	r0, [pc, #88]	; (8001948 <MX_TIM2_Init+0x100>)
 80018ee:	f005 fa4f 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018f8:	f000 fac8 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80018fc:	2330      	movs	r3, #48	; 0x30
 80018fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_TIM2_Init+0x100>)
 8001914:	f004 fd08 	bl	8006328 <HAL_TIM_OC_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800191e:	f000 fab5 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	2204      	movs	r2, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM2_Init+0x100>)
 800192a:	f004 fcfd 	bl	8006328 <HAL_TIM_OC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001934:	f000 faaa 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM2_Init+0x100>)
 800193a:	f000 fc29 	bl	8002190 <HAL_TIM_MspPostInit>

}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	; 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000aec 	.word	0x20000aec

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <MX_USART3_UART_Init+0x5c>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001958:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001990:	f005 faaa 	bl	8006ee8 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800199a:	f000 fa77 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000b38 	.word	0x20000b38
 80019a8:	40004800 	.word	0x40004800

080019ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ba:	2206      	movs	r2, #6
 80019bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f0:	f002 fe9d 	bl	800472e <HAL_PCD_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019fa:	f000 fa47 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000c80 	.word	0x20000c80

08001a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_DMA_Init+0x70>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200c      	movs	r0, #12
 8001a44:	f001 fd2d 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a48:	200c      	movs	r0, #12
 8001a4a:	f001 fd46 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200e      	movs	r0, #14
 8001a54:	f001 fd25 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a58:	200e      	movs	r0, #14
 8001a5a:	f001 fd3e 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2038      	movs	r0, #56	; 0x38
 8001a64:	f001 fd1d 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a68:	2038      	movs	r0, #56	; 0x38
 8001a6a:	f001 fd36 	bl	80034da <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_GPIO_Init+0x134>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f244 1181 	movw	r1, #16769	; 0x4181
 8001b28:	4822      	ldr	r0, [pc, #136]	; (8001bb4 <MX_GPIO_Init+0x138>)
 8001b2a:	f002 fdcd 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001b34:	f002 fdc8 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481b      	ldr	r0, [pc, #108]	; (8001bbc <MX_GPIO_Init+0x140>)
 8001b50:	f002 fc0e 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8;
 8001b54:	f244 1381 	movw	r3, #16769	; 0x4181
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <MX_GPIO_Init+0x138>)
 8001b6e:	f002 fbff 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b72:	2340      	movs	r3, #64	; 0x40
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001b8a:	f002 fbf1 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ba2:	f002 fbe5 	bl	8004370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3730      	adds	r7, #48	; 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	40020800 	.word	0x40020800

08001bc0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bcc:	4830      	ldr	r0, [pc, #192]	; (8001c90 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001bce:	f002 fd94 	bl	80046fa <HAL_GPIO_TogglePin>
	if(increment < 2048){
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bda:	d255      	bcs.n	8001c88 <HAL_ADC_ConvCpltCallback+0xc8>
		float in1 = raw[0];
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be8:	edc7 7a03 	vstr	s15, [r7, #12]
		in1 = (in1-2048)/2048;
 8001bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001c9c <HAL_ADC_ConvCpltCallback+0xdc>
 8001bf4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bf8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001c9c <HAL_ADC_ConvCpltCallback+0xdc>
 8001bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c00:	edc7 7a03 	vstr	s15, [r7, #12]
		in1 = in1 * hamming[increment];
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	edc7 7a03 	vstr	s15, [r7, #12]
		float in2 = raw[1];
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001c20:	885b      	ldrh	r3, [r3, #2]
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2a:	edc7 7a02 	vstr	s15, [r7, #8]
		in2 = (in2-2048)/2048;
 8001c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c9c <HAL_ADC_ConvCpltCallback+0xdc>
 8001c36:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c3a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001c9c <HAL_ADC_ConvCpltCallback+0xdc>
 8001c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c42:	edc7 7a02 	vstr	s15, [r7, #8]
		in2 = in2 * hamming[increment];
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5c:	edc7 7a02 	vstr	s15, [r7, #8]
		fftin[increment] = in1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]
		fftin1[increment] = in2;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	601a      	str	r2, [r3, #0]
		increment++;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c86:	801a      	strh	r2, [r3, #0]
	}
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020400 	.word	0x40020400
 8001c94:	2000cd1c 	.word	0x2000cd1c
 8001c98:	20003188 	.word	0x20003188
 8001c9c:	45000000 	.word	0x45000000
 8001ca0:	20001188 	.word	0x20001188
 8001ca4:	20004d1c 	.word	0x20004d1c
 8001ca8:	20008d1c 	.word	0x20008d1c

08001cac <HAL_UART_TxCpltCallback>:
	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
		transmitting = 0;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_UART_TxCpltCallback+0x38>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
		timeUART = HAL_GetTick() - timeUART;
 8001cba:	f000 fd9f 	bl	80027fc <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_UART_TxCpltCallback+0x3c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_UART_TxCpltCallback+0x3c>)
 8001cc8:	6013      	str	r3, [r2, #0]
		len = 0;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_UART_TxCpltCallback+0x40>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
		memset(msg, 0, sizeof(msg));
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <HAL_UART_TxCpltCallback+0x44>)
 8001cd8:	f008 fcef 	bl	800a6ba <memset>
	}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20004d18 	.word	0x20004d18
 8001ce8:	2000cd3c 	.word	0x2000cd3c
 8001cec:	2000cd44 	.word	0x2000cd44
 8001cf0:	20003990 	.word	0x20003990

08001cf4 <HAL_UART_RxCpltCallback>:
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
		if(rawRX[0] == 97){
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_UART_RxCpltCallback+0x88>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b61      	cmp	r3, #97	; 0x61
 8001d02:	d11a      	bne.n	8001d3a <HAL_UART_RxCpltCallback+0x46>
			if(indexPoo > 0 && indexPoo < beamAngles){
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d030      	beq.n	8001d6e <HAL_UART_RxCpltCallback+0x7a>
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b24      	cmp	r3, #36	; 0x24
 8001d12:	d82c      	bhi.n	8001d6e <HAL_UART_RxCpltCallback+0x7a>
				indexPoo--;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d1e:	701a      	strb	r2, [r3, #0]
				curAngle = -90 + (indexPoo * beamAngleInc);
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b5a      	subs	r3, #90	; 0x5a
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_UART_RxCpltCallback+0x90>)
 8001d30:	6013      	str	r3, [r2, #0]
				newBeam = 1;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_RxCpltCallback+0x94>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
				indexPoo++;
				curAngle = -90 + (indexPoo * beamAngleInc);
				newBeam = 1;
			}
		}
	}
 8001d38:	e019      	b.n	8001d6e <HAL_UART_RxCpltCallback+0x7a>
		} else if(rawRX[0] == 100){
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_UART_RxCpltCallback+0x88>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d115      	bne.n	8001d6e <HAL_UART_RxCpltCallback+0x7a>
			if(indexPoo >= 0 && indexPoo < beamAngles - 1){
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b23      	cmp	r3, #35	; 0x23
 8001d48:	d811      	bhi.n	8001d6e <HAL_UART_RxCpltCallback+0x7a>
				indexPoo++;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d54:	701a      	strb	r2, [r3, #0]
				curAngle = -90 + (indexPoo * beamAngleInc);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_UART_RxCpltCallback+0x8c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b5a      	subs	r3, #90	; 0x5a
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_UART_RxCpltCallback+0x90>)
 8001d66:	6013      	str	r3, [r2, #0]
				newBeam = 1;
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_UART_RxCpltCallback+0x94>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
	}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000318c 	.word	0x2000318c
 8001d80:	20000628 	.word	0x20000628
 8001d84:	2000cd50 	.word	0x2000cd50
 8001d88:	20000629 	.word	0x20000629

08001d8c <HAL_UART_ErrorCallback>:

	void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	  char msgError[30];
	  if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <HAL_UART_ErrorCallback+0x32>
		  sprintf(msgError, "Parity Error\r\n");
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	4932      	ldr	r1, [pc, #200]	; (8001e70 <HAL_UART_ErrorCallback+0xe4>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 fc23 	bl	800a5f4 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	492f      	ldr	r1, [pc, #188]	; (8001e74 <HAL_UART_ErrorCallback+0xe8>)
 8001db8:	482f      	ldr	r0, [pc, #188]	; (8001e78 <HAL_UART_ErrorCallback+0xec>)
 8001dba:	f005 f8e3 	bl	8006f84 <HAL_UART_Transmit>
	  }
	  if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <HAL_UART_ErrorCallback+0x5c>
		  sprintf(msgError, "Frame Error\r\n");
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	492a      	ldr	r1, [pc, #168]	; (8001e7c <HAL_UART_ErrorCallback+0xf0>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f008 fc0e 	bl	800a5f4 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4924      	ldr	r1, [pc, #144]	; (8001e74 <HAL_UART_ErrorCallback+0xe8>)
 8001de2:	4825      	ldr	r0, [pc, #148]	; (8001e78 <HAL_UART_ErrorCallback+0xec>)
 8001de4:	f005 f8ce 	bl	8006f84 <HAL_UART_Transmit>
	  }
	  if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <HAL_UART_ErrorCallback+0x86>
	  	  sprintf(msgError, "Noise Error\r\n");
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4921      	ldr	r1, [pc, #132]	; (8001e80 <HAL_UART_ErrorCallback+0xf4>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f008 fbf9 	bl	800a5f4 <siprintf>
	  	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	491a      	ldr	r1, [pc, #104]	; (8001e74 <HAL_UART_ErrorCallback+0xe8>)
 8001e0c:	481a      	ldr	r0, [pc, #104]	; (8001e78 <HAL_UART_ErrorCallback+0xec>)
 8001e0e:	f005 f8b9 	bl	8006f84 <HAL_UART_Transmit>
	  }
	  if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_UART_ErrorCallback+0xb0>
	    	  sprintf(msgError, "Overrun Error\r\n");
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_UART_ErrorCallback+0xf8>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 fbe4 	bl	800a5f4 <siprintf>
	    	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	490f      	ldr	r1, [pc, #60]	; (8001e74 <HAL_UART_ErrorCallback+0xe8>)
 8001e36:	4810      	ldr	r0, [pc, #64]	; (8001e78 <HAL_UART_ErrorCallback+0xec>)
 8001e38:	f005 f8a4 	bl	8006f84 <HAL_UART_Transmit>
	  }
	  if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <HAL_UART_ErrorCallback+0xda>
	    	  sprintf(msgError, "DMA Error\r\n");
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_UART_ErrorCallback+0xfc>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f008 fbcf 	bl	800a5f4 <siprintf>
	    	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4905      	ldr	r1, [pc, #20]	; (8001e74 <HAL_UART_ErrorCallback+0xe8>)
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_UART_ErrorCallback+0xec>)
 8001e62:	f005 f88f 	bl	8006f84 <HAL_UART_Transmit>
	  }
	  // etc...
	}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	0800de78 	.word	0x0800de78
 8001e74:	20003990 	.word	0x20003990
 8001e78:	20000b38 	.word	0x20000b38
 8001e7c:	0800de88 	.word	0x0800de88
 8001e80:	0800de98 	.word	0x0800de98
 8001e84:	0800dea8 	.word	0x0800dea8
 8001e88:	0800deb8 	.word	0x0800deb8

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>
	...

08001e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x44>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x44>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x44>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x44>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x44>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x44>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_ADC_MspInit+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d15b      	bne.n	8001fba <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_ADC_MspInit+0xe8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001f32:	2309      	movs	r3, #9
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4821      	ldr	r0, [pc, #132]	; (8001fcc <HAL_ADC_MspInit+0xec>)
 8001f46:	f002 fa13 	bl	8004370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_ADC_MspInit+0xf4>)
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001f90:	f001 fabe 	bl	8003510 <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001f9a:	f7ff ff77 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_ADC_MspInit+0xf0>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2012      	movs	r0, #18
 8001fb0:	f001 fa77 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fb4:	2012      	movs	r0, #18
 8001fb6:	f001 fa90 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	200009dc 	.word	0x200009dc
 8001fd4:	40026410 	.word	0x40026410

08001fd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_ETH_MspInit+0x158>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f040 8096 	bne.w	8002128 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002006:	6313      	str	r3, [r2, #48]	; 0x30
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	623b      	str	r3, [r7, #32]
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a46      	ldr	r2, [pc, #280]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800201a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a34      	ldr	r2, [pc, #208]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4a28      	ldr	r2, [pc, #160]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 8002092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002096:	6313      	str	r3, [r2, #48]	; 0x30
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_ETH_MspInit+0x15c>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020a4:	2332      	movs	r3, #50	; 0x32
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b4:	230b      	movs	r3, #11
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <HAL_ETH_MspInit+0x160>)
 80020c0:	f002 f956 	bl	8004370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020c4:	2386      	movs	r3, #134	; 0x86
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d4:	230b      	movs	r3, #11
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4817      	ldr	r0, [pc, #92]	; (800213c <HAL_ETH_MspInit+0x164>)
 80020e0:	f002 f946 	bl	8004370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020f6:	230b      	movs	r3, #11
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	480f      	ldr	r0, [pc, #60]	; (8002140 <HAL_ETH_MspInit+0x168>)
 8002102:	f002 f935 	bl	8004370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002106:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002118:	230b      	movs	r3, #11
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <HAL_ETH_MspInit+0x16c>)
 8002124:	f002 f924 	bl	8004370 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3738      	adds	r7, #56	; 0x38
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40028000 	.word	0x40028000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020800 	.word	0x40020800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40021800 	.word	0x40021800

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d113      	bne.n	8002182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	201c      	movs	r0, #28
 8002178:	f001 f993 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800217c:	201c      	movs	r0, #28
 800217e:	f001 f9ac 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d11b      	bne.n	80021ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_TIM_MspPostInit+0x64>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_TIM_MspPostInit+0x64>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_TIM_MspPostInit+0x64>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ca:	2320      	movs	r3, #32
 80021cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021e6:	f002 f8c3 	bl	8004370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0aa      	sub	sp, #168	; 0xa8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2284      	movs	r2, #132	; 0x84
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f008 fa4c 	bl	800a6ba <memset>
  if(huart->Instance==USART3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_UART_MspInit+0x180>)
 8002228:	4293      	cmp	r3, r2
 800222a:	f040 80a2 	bne.w	8002372 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002234:	2300      	movs	r3, #0
 8002236:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f8e9 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002248:	f7ff fe20 	bl	8001e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_UART_MspInit+0x184>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_UART_MspInit+0x184>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002256:	6413      	str	r3, [r2, #64]	; 0x40
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_UART_MspInit+0x184>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_UART_MspInit+0x184>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a45      	ldr	r2, [pc, #276]	; (8002380 <HAL_UART_MspInit+0x184>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_UART_MspInit+0x184>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800227c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002296:	2307      	movs	r3, #7
 8002298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022a0:	4619      	mov	r1, r3
 80022a2:	4838      	ldr	r0, [pc, #224]	; (8002384 <HAL_UART_MspInit+0x188>)
 80022a4:	f002 f864 	bl	8004370 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022aa:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_UART_MspInit+0x190>)
 80022ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80022ae:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022b8:	2240      	movs	r2, #64	; 0x40
 80022ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022ea:	f001 f911 	bl	8003510 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80022f4:	f7ff fdca 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_UART_MspInit+0x18c>)
 80022fc:	671a      	str	r2, [r3, #112]	; 0x70
 80022fe:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_UART_MspInit+0x18c>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_UART_MspInit+0x198>)
 8002308:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_UART_MspInit+0x194>)
 800230c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002310:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_UART_MspInit+0x194>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x194>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002338:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x194>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <HAL_UART_MspInit+0x194>)
 8002348:	f001 f8e2 	bl	8003510 <HAL_DMA_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8002352:	f7ff fd9b 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_UART_MspInit+0x194>)
 800235a:	675a      	str	r2, [r3, #116]	; 0x74
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_UART_MspInit+0x194>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2027      	movs	r0, #39	; 0x27
 8002368:	f001 f89b 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800236c:	2027      	movs	r0, #39	; 0x27
 800236e:	f001 f8b4 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	37a8      	adds	r7, #168	; 0xa8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40004800 	.word	0x40004800
 8002380:	40023800 	.word	0x40023800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	20000bc0 	.word	0x20000bc0
 800238c:	40026058 	.word	0x40026058
 8002390:	20000c20 	.word	0x20000c20
 8002394:	40026028 	.word	0x40026028

08002398 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0ac      	sub	sp, #176	; 0xb0
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	2284      	movs	r2, #132	; 0x84
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f008 f97e 	bl	800a6ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c6:	d159      	bne.n	800247c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80023c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 f81b 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80023e4:	f7ff fd52 	bl	8001e8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_PCD_MspInit+0xec>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a25      	ldr	r2, [pc, #148]	; (8002484 <HAL_PCD_MspInit+0xec>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6313      	str	r3, [r2, #48]	; 0x30
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_PCD_MspInit+0xec>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002400:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800241a:	230a      	movs	r3, #10
 800241c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002424:	4619      	mov	r1, r3
 8002426:	4818      	ldr	r0, [pc, #96]	; (8002488 <HAL_PCD_MspInit+0xf0>)
 8002428:	f001 ffa2 	bl	8004370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800242c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002444:	4619      	mov	r1, r3
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <HAL_PCD_MspInit+0xf0>)
 8002448:	f001 ff92 	bl	8004370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_PCD_MspInit+0xec>)
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <HAL_PCD_MspInit+0xec>)
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	6353      	str	r3, [r2, #52]	; 0x34
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_PCD_MspInit+0xec>)
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_PCD_MspInit+0xec>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <HAL_PCD_MspInit+0xec>)
 800246a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246e:	6453      	str	r3, [r2, #68]	; 0x44
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_PCD_MspInit+0xec>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	37b0      	adds	r7, #176	; 0xb0
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f97c 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <DMA1_Stream1_IRQHandler+0x10>)
 80024e6:	f001 f9b3 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000c20 	.word	0x20000c20

080024f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <DMA1_Stream3_IRQHandler+0x10>)
 80024fa:	f001 f9a9 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000bc0 	.word	0x20000bc0

08002508 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <ADC_IRQHandler+0x10>)
 800250e:	f000 f9e9 	bl	80028e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000994 	.word	0x20000994

0800251c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM2_IRQHandler+0x10>)
 8002522:	f003 fde1 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000aec 	.word	0x20000aec

08002530 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <USART3_IRQHandler+0x10>)
 8002536:	f004 fe69 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000b38 	.word	0x20000b38

08002544 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA2_Stream0_IRQHandler+0x10>)
 800254a:	f001 f981 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200009dc 	.word	0x200009dc

08002558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_kill>:

int _kill(int pid, int sig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002572:	f008 f8f5 	bl	800a760 <__errno>
 8002576:	4603      	mov	r3, r0
 8002578:	2216      	movs	r2, #22
 800257a:	601a      	str	r2, [r3, #0]
  return -1;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_exit>:

void _exit (int status)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ffe7 	bl	8002568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800259a:	e7fe      	b.n	800259a <_exit+0x12>

0800259c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e00a      	b.n	80025c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ae:	f3af 8000 	nop.w
 80025b2:	4601      	mov	r1, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf0      	blt.n	80025ae <_read+0x12>
  }

  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e009      	b.n	80025fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf1      	blt.n	80025e8 <_write+0x12>
  }
  return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_close>:

int _close(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002636:	605a      	str	r2, [r3, #4]
  return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_isatty>:

int _isatty(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f008 f85a 	bl	800a760 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20050000 	.word	0x20050000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	2000cd60 	.word	0x2000cd60
 80026e0:	2000ceb8 	.word	0x2000ceb8

080026e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002724:	4c0b      	ldr	r4, [pc, #44]	; (8002754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002732:	f7ff ffd7 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f008 f819 	bl	800a76c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273a:	f7fe fc85 	bl	8001048 <main>
  bx  lr    
 800273e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002740:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002748:	20000800 	.word	0x20000800
  ldr r2, =_sidata
 800274c:	08021908 	.word	0x08021908
  ldr r2, =_sbss
 8002750:	20000940 	.word	0x20000940
  ldr r4, =_ebss
 8002754:	2000ceb4 	.word	0x2000ceb4

08002758 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <CAN1_RX0_IRQHandler>

0800275a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275e:	2003      	movs	r0, #3
 8002760:	f000 fe94 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002764:	2000      	movs	r0, #0
 8002766:	f000 f805 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276a:	f7ff fb95 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 feaf 	bl	80034f6 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f000 fe77 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000062c 	.word	0x2000062c
 80027cc:	20000634 	.word	0x20000634
 80027d0:	20000630 	.word	0x20000630

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000634 	.word	0x20000634
 80027f8:	2000cd64 	.word	0x2000cd64

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	2000cd64 	.word	0x2000cd64

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000634 	.word	0x20000634

0800285c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e031      	b.n	80028d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fb30 	bl	8001ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_ADC_Init+0x84>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fb98 	bl	8002fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
 80028c6:	e001      	b.n	80028cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	ffffeefd 	.word	0xffffeefd

080028e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d049      	beq.n	80029ae <HAL_ADC_IRQHandler+0xca>
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d046      	beq.n	80029ae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d12b      	bne.n	800299e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d127      	bne.n	800299e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0220 	bic.w	r2, r2, #32
 8002978:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff f90e 	bl	8001bc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0212 	mvn.w	r2, #18
 80029ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d057      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x190>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d054      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d139      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d12b      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d124      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11d      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d119      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fc37 	bl	80032d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 020c 	mvn.w	r2, #12
 8002a72:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_ADC_IRQHandler+0x1d6>
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d014      	beq.n	8002aba <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f92e 	bl	8002d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_ADC_IRQHandler+0x218>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f917 	bl	8002d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0220 	mvn.w	r2, #32
 8002afa:	601a      	str	r2, [r3, #0]
  }
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start_DMA+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0d4      	b.n	8002ccc <HAL_ADC_Start_DMA+0x1c8>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b48:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <HAL_ADC_Start_DMA+0x1d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_ADC_Start_DMA+0x1d4>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f040 809c 	bne.w	8002cb2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <HAL_ADC_Start_DMA+0x1d8>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f023 0206 	bic.w	r2, r3, #6
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_ADC_Start_DMA+0x1dc>)
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_ADC_Start_DMA+0x1e0>)
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_ADC_Start_DMA+0x1e4>)
 8002be8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	334c      	adds	r3, #76	; 0x4c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f000 fd22 	bl	800366c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_ADC_Start_DMA+0x1e8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d143      	bne.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	e03a      	b.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <HAL_ADC_Start_DMA+0x1ec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10e      	bne.n	8002c7c <HAL_ADC_Start_DMA+0x178>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c7a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_ADC_Start_DMA+0x1e8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d120      	bne.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_ADC_Start_DMA+0x1f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d11b      	bne.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d114      	bne.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e00b      	b.n	8002cca <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000062c 	.word	0x2000062c
 8002cd8:	431bde83 	.word	0x431bde83
 8002cdc:	fffff8fe 	.word	0xfffff8fe
 8002ce0:	080031d5 	.word	0x080031d5
 8002ce4:	0800328f 	.word	0x0800328f
 8002ce8:	080032ab 	.word	0x080032ab
 8002cec:	40012300 	.word	0x40012300
 8002cf0:	40012000 	.word	0x40012000
 8002cf4:	40012200 	.word	0x40012200

08002cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e136      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x28a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b09      	cmp	r3, #9
 8002d5e:	d93a      	bls.n	8002dd6 <HAL_ADC_ConfigChannel+0xa2>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d68:	d035      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68d9      	ldr	r1, [r3, #12]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b1e      	subs	r3, #30
 8002d80:	2207      	movs	r2, #7
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8d      	ldr	r2, [pc, #564]	; (8002fcc <HAL_ADC_ConfigChannel+0x298>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68d9      	ldr	r1, [r3, #12]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	061a      	lsls	r2, r3, #24
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dae:	e035      	b.n	8002e1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd4:	e022      	b.n	8002e1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6919      	ldr	r1, [r3, #16]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	409a      	lsls	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d824      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b05      	subs	r3, #5
 8002e36:	221f      	movs	r2, #31
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	400a      	ands	r2, r1
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b05      	subs	r3, #5
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6c:	e04c      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d824      	bhi.n	8002ec0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b23      	subs	r3, #35	; 0x23
 8002e88:	221f      	movs	r2, #31
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b23      	subs	r3, #35	; 0x23
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebe:	e023      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b41      	subs	r3, #65	; 0x41
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b41      	subs	r3, #65	; 0x41
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10a      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1f4>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10f      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x21e>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d10b      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f44:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d12b      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x280>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_ADC_ConfigChannel+0x298>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x23a>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b11      	cmp	r3, #17
 8002f6c:	d122      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f78:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_ADC_ConfigChannel+0x298>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <HAL_ADC_ConfigChannel+0x2a8>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9a      	lsrs	r2, r3, #18
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f9      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	10000012 	.word	0x10000012
 8002fd0:	40012000 	.word	0x40012000
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	2000062c 	.word	0x2000062c
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe8:	4b78      	ldr	r3, [pc, #480]	; (80031cc <ADC_Init+0x1ec>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a77      	ldr	r2, [pc, #476]	; (80031cc <ADC_Init+0x1ec>)
 8002fee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ff2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ff4:	4b75      	ldr	r3, [pc, #468]	; (80031cc <ADC_Init+0x1ec>)
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4973      	ldr	r1, [pc, #460]	; (80031cc <ADC_Init+0x1ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <ADC_Init+0x1f0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e00f      	b.n	80030da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0202 	bic.w	r2, r2, #2
 80030e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	005a      	lsls	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	3b01      	subs	r3, #1
 8003134:	035a      	lsls	r2, r3, #13
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e007      	b.n	8003150 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	3b01      	subs	r3, #1
 800316c:	051a      	lsls	r2, r3, #20
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003192:	025a      	lsls	r2, r3, #9
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	029a      	lsls	r2, r3, #10
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40012300 	.word	0x40012300
 80031d0:	0f000001 	.word	0x0f000001

080031d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d13c      	bne.n	8003268 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d12b      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d127      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003228:	2b00      	cmp	r3, #0
 800322a:	d119      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0220 	bic.w	r2, r2, #32
 800323a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7fe fcad 	bl	8001bc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003266:	e00e      	b.n	8003286 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff fd53 	bl	8002d20 <HAL_ADC_ErrorCallback>
}
 800327a:	e004      	b.n	8003286 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fd2b 	bl	8002cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fd28 	bl	8002d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	05fa0000 	.word	0x05fa0000

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff f96e 	bl	80027fc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e099      	b.n	8003660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	e00f      	b.n	800356e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354e:	f7ff f955 	bl	80027fc <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b05      	cmp	r3, #5
 800355a:	d908      	bls.n	800356e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e078      	b.n	8003660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e8      	bne.n	800354e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_DMA_Init+0x158>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4313      	orrs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d117      	bne.n	8003632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb09 	bl	8003c2c <DMA_CheckFifoParam>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800362e:	2301      	movs	r3, #1
 8003630:	e016      	b.n	8003660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fac0 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 8003640:	4603      	mov	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	f010803f 	.word	0xf010803f

0800366c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Start_IT+0x26>
 800368e:	2302      	movs	r3, #2
 8003690:	e048      	b.n	8003724 <HAL_DMA_Start_IT+0xb8>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d137      	bne.n	8003716 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fa52 	bl	8003b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0216 	orr.w	r2, r2, #22
 80036da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e005      	b.n	8003722 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800373a:	f7ff f85f 	bl	80027fc <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d008      	beq.n	800375e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e052      	b.n	8003804 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0216 	bic.w	r2, r2, #22
 800376c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_DMA_Abort+0x62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0208 	bic.w	r2, r2, #8
 800379c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ae:	e013      	b.n	80037d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b0:	f7ff f824 	bl	80027fc <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d90c      	bls.n	80037d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e015      	b.n	8003804 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e4      	bne.n	80037b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	223f      	movs	r2, #63	; 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d004      	beq.n	800382a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00c      	b.n	8003844 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2205      	movs	r2, #5
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800385c:	4b8e      	ldr	r3, [pc, #568]	; (8003a98 <HAL_DMA_IRQHandler+0x248>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8e      	ldr	r2, [pc, #568]	; (8003a9c <HAL_DMA_IRQHandler+0x24c>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	2208      	movs	r2, #8
 800387c:	409a      	lsls	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2201      	movs	r2, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2204      	movs	r2, #4
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2210      	movs	r2, #16
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2210      	movs	r2, #16
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e01f      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e016      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0208 	bic.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2220      	movs	r2, #32
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 808f 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8087 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2220      	movs	r2, #32
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d136      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0216 	bic.w	r2, r2, #22
 8003a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x1da>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	223f      	movs	r2, #63	; 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d07e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
        }
        return;
 8003a66:	e079      	b.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e02c      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
 8003a96:	bf00      	nop
 8003a98:	2000062c 	.word	0x2000062c
 8003a9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01e      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d032      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d307      	bcc.n	8003b38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x2cc>
 8003b36:	e000      	b.n	8003b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b5c:	bf00      	nop
    }
  }
}
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d108      	bne.n	8003ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba2:	e007      	b.n	8003bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3b10      	subs	r3, #16
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <DMA_CalcBaseAndBitshift+0x60>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <DMA_CalcBaseAndBitshift+0x64>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d908      	bls.n	8003c00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	1d1a      	adds	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8003bfe:	e006      	b.n	8003c0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	aaaaaaab 	.word	0xaaaaaaab
 8003c24:	0800dedc 	.word	0x0800dedc
 8003c28:	fffffc00 	.word	0xfffffc00

08003c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d856      	bhi.n	8003cfa <DMA_CheckFifoParam+0xce>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <DMA_CheckFifoParam+0x28>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003cfb 	.word	0x08003cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e043      	b.n	8003cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c7e:	d140      	bne.n	8003d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c84:	e03d      	b.n	8003d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	d121      	bne.n	8003cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d837      	bhi.n	8003d06 <DMA_CheckFifoParam+0xda>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x70>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb3 	.word	0x08003cb3
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003cc5 	.word	0x08003cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e030      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e022      	b.n	8003d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd2:	e01c      	b.n	8003d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d903      	bls.n	8003ce2 <DMA_CheckFifoParam+0xb6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce0:	e018      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e015      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e00b      	b.n	8003d12 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e00a      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e008      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e006      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e004      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
    }
  } 
  
  return status; 
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06a      	b.n	8003e0c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2223      	movs	r2, #35	; 0x23
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fe f945 	bl	8001fd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_ETH_Init+0xf0>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_ETH_Init+0xf0>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_ETH_Init+0xf0>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d66:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_ETH_Init+0xf4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_ETH_Init+0xf4>)
 8003d6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_ETH_Init+0xf4>)
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4927      	ldr	r1, [pc, #156]	; (8003e18 <HAL_ETH_Init+0xf4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_ETH_Init+0xf4>)
 8003d82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d9c:	f7fe fd2e 	bl	80027fc <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003da2:	e011      	b.n	8003dc8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003da4:	f7fe fd2a 	bl	80027fc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003db2:	d909      	bls.n	8003dc8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	22e0      	movs	r2, #224	; 0xe0
 8003dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e021      	b.n	8003e0c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e4      	bne.n	8003da4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f958 	bl	8004090 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f9ff 	bl	80041e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa55 	bl	8004296 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	461a      	mov	r2, r3
 8003df2:	2100      	movs	r1, #0
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f9bd 	bl	8004174 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2210      	movs	r2, #16
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800

08003e1c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <ETH_SetMACConfig+0x15c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7c1b      	ldrb	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <ETH_SetMACConfig+0x28>
 8003e3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e42:	e000      	b.n	8003e46 <ETH_SetMACConfig+0x2a>
 8003e44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	7c5b      	ldrb	r3, [r3, #17]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <ETH_SetMACConfig+0x38>
 8003e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e52:	e000      	b.n	8003e56 <ETH_SetMACConfig+0x3a>
 8003e54:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7fdb      	ldrb	r3, [r3, #31]
 8003e62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	7f92      	ldrb	r2, [r2, #30]
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d102      	bne.n	8003e7a <ETH_SetMACConfig+0x5e>
 8003e74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e78:	e000      	b.n	8003e7c <ETH_SetMACConfig+0x60>
 8003e7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003e7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7f1b      	ldrb	r3, [r3, #28]
 8003e82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	791b      	ldrb	r3, [r3, #4]
 8003e90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003e92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d102      	bne.n	8003ea4 <ETH_SetMACConfig+0x88>
 8003e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea2:	e000      	b.n	8003ea6 <ETH_SetMACConfig+0x8a>
 8003ea4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ea6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	7bdb      	ldrb	r3, [r3, #15]
 8003eac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003eae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ebc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7fe fc9c 	bl	8002814 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	d101      	bne.n	8003f0a <ETH_SetMACConfig+0xee>
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	e000      	b.n	8003f0c <ETH_SetMACConfig+0xf0>
 8003f0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f0c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	d101      	bne.n	8003f22 <ETH_SetMACConfig+0x106>
 8003f1e:	2208      	movs	r2, #8
 8003f20:	e000      	b.n	8003f24 <ETH_SetMACConfig+0x108>
 8003f22:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f24:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003f2c:	2a01      	cmp	r2, #1
 8003f2e:	d101      	bne.n	8003f34 <ETH_SetMACConfig+0x118>
 8003f30:	2204      	movs	r2, #4
 8003f32:	e000      	b.n	8003f36 <ETH_SetMACConfig+0x11a>
 8003f34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003f3e:	2a01      	cmp	r2, #1
 8003f40:	d101      	bne.n	8003f46 <ETH_SetMACConfig+0x12a>
 8003f42:	2202      	movs	r2, #2
 8003f44:	e000      	b.n	8003f48 <ETH_SetMACConfig+0x12c>
 8003f46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f60:	2001      	movs	r0, #1
 8003f62:	f7fe fc57 	bl	8002814 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	ff20810f 	.word	0xff20810f

08003f7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <ETH_SetDMAConfig+0x110>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	7b1b      	ldrb	r3, [r3, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <ETH_SetDMAConfig+0x2c>
 8003fa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fa6:	e000      	b.n	8003faa <ETH_SetDMAConfig+0x2e>
 8003fa8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	7b5b      	ldrb	r3, [r3, #13]
 8003fae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fb0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	7f52      	ldrb	r2, [r2, #29]
 8003fb6:	2a00      	cmp	r2, #0
 8003fb8:	d102      	bne.n	8003fc0 <ETH_SetDMAConfig+0x44>
 8003fba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fbe:	e000      	b.n	8003fc2 <ETH_SetDMAConfig+0x46>
 8003fc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	7b9b      	ldrb	r3, [r3, #14]
 8003fc8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	7f1b      	ldrb	r3, [r3, #28]
 8003fd6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7f9b      	ldrb	r3, [r3, #30]
 8003fde:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fe0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fe6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004000:	461a      	mov	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004012:	2001      	movs	r0, #1
 8004014:	f7fe fbfe 	bl	8002814 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	461a      	mov	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	791b      	ldrb	r3, [r3, #4]
 800402a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004030:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004036:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800403c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004044:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004046:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800404e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004054:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004062:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004070:	2001      	movs	r0, #1
 8004072:	f7fe fbcf 	bl	8002814 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	f8de3f23 	.word	0xf8de3f23

08004090 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b0a6      	sub	sp, #152	; 0x98
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80040a4:	2300      	movs	r3, #0
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040cc:	2300      	movs	r3, #0
 80040ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80040f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004104:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fe86 	bl	8003e1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004110:	2301      	movs	r3, #1
 8004112:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004114:	2301      	movs	r3, #1
 8004116:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800411e:	2301      	movs	r3, #1
 8004120:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004132:	2300      	movs	r3, #0
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800413c:	2301      	movs	r3, #1
 800413e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004144:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800414a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800414c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004150:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004158:	2300      	movs	r3, #0
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ff08 	bl	8003f7c <ETH_SetDMAConfig>
}
 800416c:	bf00      	nop
 800416e:	3798      	adds	r7, #152	; 0x98
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3305      	adds	r3, #5
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	3204      	adds	r2, #4
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <ETH_MACAddressConfig+0x68>)
 8004196:	4413      	add	r3, r2
 8004198:	461a      	mov	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3303      	adds	r3, #3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	061a      	lsls	r2, r3, #24
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3302      	adds	r3, #2
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3301      	adds	r3, #1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	4313      	orrs	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <ETH_MACAddressConfig+0x6c>)
 80041c6:	4413      	add	r3, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40028040 	.word	0x40028040
 80041e0:	40028044 	.word	0x40028044

080041e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e03e      	b.n	8004270 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68d9      	ldr	r1, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	3206      	adds	r2, #6
 8004224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d80c      	bhi.n	8004254 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68d9      	ldr	r1, [r3, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e004      	b.n	800425e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d9bd      	bls.n	80041f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	611a      	str	r2, [r3, #16]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e046      	b.n	8004332 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6919      	ldr	r1, [r3, #16]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2200      	movs	r2, #0
 80042d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80042e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	3212      	adds	r2, #18
 80042fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d80c      	bhi.n	8004322 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	e004      	b.n	800432c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d9b5      	bls.n	80042a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	60da      	str	r2, [r3, #12]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e175      	b.n	800467c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f040 8164 	bne.w	8004676 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d005      	beq.n	80043c6 <HAL_GPIO_Init+0x56>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d130      	bne.n	8004428 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043fc:	2201      	movs	r2, #1
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 0201 	and.w	r2, r3, #1
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b03      	cmp	r3, #3
 8004432:	d017      	beq.n	8004464 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	2203      	movs	r2, #3
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d123      	bne.n	80044b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	08da      	lsrs	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3208      	adds	r2, #8
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	08da      	lsrs	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3208      	adds	r2, #8
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80be 	beq.w	8004676 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fa:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_GPIO_Init+0x324>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	4a65      	ldr	r2, [pc, #404]	; (8004694 <HAL_GPIO_Init+0x324>)
 8004500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004504:	6453      	str	r3, [r2, #68]	; 0x44
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_GPIO_Init+0x324>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004512:	4a61      	ldr	r2, [pc, #388]	; (8004698 <HAL_GPIO_Init+0x328>)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	220f      	movs	r2, #15
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a58      	ldr	r2, [pc, #352]	; (800469c <HAL_GPIO_Init+0x32c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d037      	beq.n	80045ae <HAL_GPIO_Init+0x23e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_GPIO_Init+0x330>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d031      	beq.n	80045aa <HAL_GPIO_Init+0x23a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a56      	ldr	r2, [pc, #344]	; (80046a4 <HAL_GPIO_Init+0x334>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02b      	beq.n	80045a6 <HAL_GPIO_Init+0x236>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a55      	ldr	r2, [pc, #340]	; (80046a8 <HAL_GPIO_Init+0x338>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d025      	beq.n	80045a2 <HAL_GPIO_Init+0x232>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a54      	ldr	r2, [pc, #336]	; (80046ac <HAL_GPIO_Init+0x33c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01f      	beq.n	800459e <HAL_GPIO_Init+0x22e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a53      	ldr	r2, [pc, #332]	; (80046b0 <HAL_GPIO_Init+0x340>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d019      	beq.n	800459a <HAL_GPIO_Init+0x22a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_GPIO_Init+0x344>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_GPIO_Init+0x226>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a51      	ldr	r2, [pc, #324]	; (80046b8 <HAL_GPIO_Init+0x348>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00d      	beq.n	8004592 <HAL_GPIO_Init+0x222>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a50      	ldr	r2, [pc, #320]	; (80046bc <HAL_GPIO_Init+0x34c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <HAL_GPIO_Init+0x21e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a4f      	ldr	r2, [pc, #316]	; (80046c0 <HAL_GPIO_Init+0x350>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_GPIO_Init+0x21a>
 8004586:	2309      	movs	r3, #9
 8004588:	e012      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 800458a:	230a      	movs	r3, #10
 800458c:	e010      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 800458e:	2308      	movs	r3, #8
 8004590:	e00e      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 8004592:	2307      	movs	r3, #7
 8004594:	e00c      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 8004596:	2306      	movs	r3, #6
 8004598:	e00a      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 800459a:	2305      	movs	r3, #5
 800459c:	e008      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 800459e:	2304      	movs	r3, #4
 80045a0:	e006      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 80045a2:	2303      	movs	r3, #3
 80045a4:	e004      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e002      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_GPIO_Init+0x240>
 80045ae:	2300      	movs	r3, #0
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	f002 0203 	and.w	r2, r2, #3
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	4093      	lsls	r3, r2
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045c0:	4935      	ldr	r1, [pc, #212]	; (8004698 <HAL_GPIO_Init+0x328>)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	3302      	adds	r3, #2
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ce:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <HAL_GPIO_Init+0x354>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_GPIO_Init+0x354>)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_GPIO_Init+0x354>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800461c:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <HAL_GPIO_Init+0x354>)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_GPIO_Init+0x354>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <HAL_GPIO_Init+0x354>)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_GPIO_Init+0x354>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <HAL_GPIO_Init+0x354>)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	f67f ae86 	bls.w	8004390 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40013800 	.word	0x40013800
 800469c:	40020000 	.word	0x40020000
 80046a0:	40020400 	.word	0x40020400
 80046a4:	40020800 	.word	0x40020800
 80046a8:	40020c00 	.word	0x40020c00
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40021400 	.word	0x40021400
 80046b4:	40021800 	.word	0x40021800
 80046b8:	40021c00 	.word	0x40021c00
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40022400 	.word	0x40022400
 80046c4:	40013c00 	.word	0x40013c00

080046c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
 80046d4:	4613      	mov	r3, r2
 80046d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d8:	787b      	ldrb	r3, [r7, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046e4:	e003      	b.n	80046ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	041a      	lsls	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	619a      	str	r2, [r3, #24]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4013      	ands	r3, r2
 8004712:	041a      	lsls	r2, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43d9      	mvns	r1, r3
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	400b      	ands	r3, r1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	619a      	str	r2, [r3, #24]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800472e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004730:	b08f      	sub	sp, #60	; 0x3c
 8004732:	af0a      	add	r7, sp, #40	; 0x28
 8004734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e116      	b.n	800496e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fe1c 	bl	8002398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2203      	movs	r2, #3
 8004764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f003 ff48 	bl	8008614 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	687e      	ldr	r6, [r7, #4]
 800478c:	466d      	mov	r5, sp
 800478e:	f106 0410 	add.w	r4, r6, #16
 8004792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800479a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800479e:	e885 0003 	stmia.w	r5, {r0, r1}
 80047a2:	1d33      	adds	r3, r6, #4
 80047a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a6:	6838      	ldr	r0, [r7, #0]
 80047a8:	f003 fedc 	bl	8008564 <USB_CoreInit>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0d7      	b.n	800496e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 ff36 	bl	8008636 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
 80047ce:	e04a      	b.n	8004866 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	333d      	adds	r3, #61	; 0x3d
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	333c      	adds	r3, #60	; 0x3c
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	b298      	uxth	r0, r3
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3344      	adds	r3, #68	; 0x44
 800480c:	4602      	mov	r2, r0
 800480e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3340      	adds	r3, #64	; 0x40
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3348      	adds	r3, #72	; 0x48
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	334c      	adds	r3, #76	; 0x4c
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3354      	adds	r3, #84	; 0x54
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	3301      	adds	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d3af      	bcc.n	80047d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e044      	b.n	8004900 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800488c:	7bfa      	ldrb	r2, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048b8:	7bfa      	ldrb	r2, [r7, #15]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	3301      	adds	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3b5      	bcc.n	8004876 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	687e      	ldr	r6, [r7, #4]
 8004912:	466d      	mov	r5, sp
 8004914:	f106 0410 	add.w	r4, r6, #16
 8004918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004924:	e885 0003 	stmia.w	r5, {r0, r1}
 8004928:	1d33      	adds	r3, r6, #4
 800492a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492c:	6838      	ldr	r0, [r7, #0]
 800492e:	f003 fecf 	bl	80086d0 <USB_DevInit>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e014      	b.n	800496e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f80b 	bl	8004978 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f004 f88d 	bl	8008a86 <USB_DevDisconnect>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004978 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_PCDEx_ActivateLPM+0x44>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	10000003 	.word	0x10000003

080049c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40007000 	.word	0x40007000

080049e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_PWREx_EnableOverDrive+0x98>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6413      	str	r3, [r2, #64]	; 0x40
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a02:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a0e:	f7fd fef5 	bl	80027fc <HAL_GetTick>
 8004a12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a14:	e009      	b.n	8004a2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a16:	f7fd fef1 	bl	80027fc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a24:	d901      	bls.n	8004a2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e022      	b.n	8004a70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d1ee      	bne.n	8004a16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a0f      	ldr	r2, [pc, #60]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a44:	f7fd feda 	bl	80027fc <HAL_GetTick>
 8004a48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a4a:	e009      	b.n	8004a60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a4c:	f7fd fed6 	bl	80027fc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5a:	d901      	bls.n	8004a60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e007      	b.n	8004a70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40007000 	.word	0x40007000

08004a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e291      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8087 	beq.w	8004bb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa4:	4b96      	ldr	r3, [pc, #600]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d00c      	beq.n	8004aca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab0:	4b93      	ldr	r3, [pc, #588]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d112      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x62>
 8004abc:	4b90      	ldr	r3, [pc, #576]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aca:	4b8d      	ldr	r3, [pc, #564]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d06c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x130>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d168      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e26b      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x7a>
 8004aec:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a83      	ldr	r2, [pc, #524]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e02e      	b.n	8004b58 <HAL_RCC_OscConfig+0xd8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x9c>
 8004b02:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7e      	ldr	r2, [pc, #504]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a7b      	ldr	r2, [pc, #492]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e01d      	b.n	8004b58 <HAL_RCC_OscConfig+0xd8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0xc0>
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a75      	ldr	r2, [pc, #468]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a72      	ldr	r2, [pc, #456]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCC_OscConfig+0xd8>
 8004b40:	4b6f      	ldr	r3, [pc, #444]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6e      	ldr	r2, [pc, #440]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a6b      	ldr	r2, [pc, #428]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fe4c 	bl	80027fc <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fd fe48 	bl	80027fc <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e21f      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0xe8>
 8004b86:	e014      	b.n	8004bb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd fe38 	bl	80027fc <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fd fe34 	bl	80027fc <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e20b      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	4b57      	ldr	r3, [pc, #348]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x110>
 8004bae:	e000      	b.n	8004bb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d069      	beq.n	8004c92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bbe:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d11c      	bne.n	8004c10 <HAL_RCC_OscConfig+0x190>
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d116      	bne.n	8004c10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	4b47      	ldr	r3, [pc, #284]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_RCC_OscConfig+0x17a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e1df      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfa:	4b41      	ldr	r3, [pc, #260]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	493d      	ldr	r1, [pc, #244]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	e040      	b.n	8004c92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d023      	beq.n	8004c60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c18:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fd fdea 	bl	80027fc <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2c:	f7fd fde6 	bl	80027fc <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1bd      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b2d      	ldr	r3, [pc, #180]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4929      	ldr	r1, [pc, #164]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
 8004c5e:	e018      	b.n	8004c92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fdc6 	bl	80027fc <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c74:	f7fd fdc2 	bl	80027fc <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e199      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d038      	beq.n	8004d10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d019      	beq.n	8004cda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fd fda3 	bl	80027fc <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fd fd9f 	bl	80027fc <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e176      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x23a>
 8004cd8:	e01a      	b.n	8004d10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fd89 	bl	80027fc <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cee:	f7fd fd85 	bl	80027fc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d903      	bls.n	8004d04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e15c      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
 8004d00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b91      	ldr	r3, [pc, #580]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80a4 	beq.w	8004e66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4b8b      	ldr	r3, [pc, #556]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a87      	ldr	r2, [pc, #540]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d46:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d52:	4b7f      	ldr	r3, [pc, #508]	; (8004f50 <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7e      	ldr	r2, [pc, #504]	; (8004f50 <HAL_RCC_OscConfig+0x4d0>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fd4d 	bl	80027fc <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd fd49 	bl	80027fc <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	; 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e120      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d78:	4b75      	ldr	r3, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4d0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x31a>
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a6e      	ldr	r2, [pc, #440]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e02d      	b.n	8004df6 <HAL_RCC_OscConfig+0x376>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x33c>
 8004da2:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b67      	ldr	r3, [pc, #412]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a66      	ldr	r2, [pc, #408]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e01c      	b.n	8004df6 <HAL_RCC_OscConfig+0x376>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d10c      	bne.n	8004dde <HAL_RCC_OscConfig+0x35e>
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a60      	ldr	r2, [pc, #384]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004dca:	f043 0304 	orr.w	r3, r3, #4
 8004dce:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	; 0x70
 8004ddc:	e00b      	b.n	8004df6 <HAL_RCC_OscConfig+0x376>
 8004dde:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a5a      	ldr	r2, [pc, #360]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dea:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d015      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfe:	f7fd fcfd 	bl	80027fc <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fd fcf9 	bl	80027fc <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e0ce      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ee      	beq.n	8004e06 <HAL_RCC_OscConfig+0x386>
 8004e28:	e014      	b.n	8004e54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fd fce7 	bl	80027fc <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fd fce3 	bl	80027fc <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0b8      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e48:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ee      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80a4 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e70:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d06b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d149      	bne.n	8004f18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e84:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a30      	ldr	r2, [pc, #192]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fd fcb4 	bl	80027fc <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fcb0 	bl	80027fc <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e087      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	019b      	lsls	r3, r3, #6
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	4313      	orrs	r3, r2
 8004edc:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fc84 	bl	80027fc <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd fc80 	bl	80027fc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e057      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x478>
 8004f16:	e04f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd fc6a 	bl	80027fc <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fd fc66 	bl	80027fc <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e03d      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4ac>
 8004f4a:	e035      	b.n	8004fb8 <HAL_RCC_OscConfig+0x538>
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCC_OscConfig+0x544>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d028      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d121      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d11a      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0d0      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b6a      	ldr	r3, [pc, #424]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d910      	bls.n	8005010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b67      	ldr	r3, [pc, #412]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 020f 	bic.w	r2, r3, #15
 8004ff6:	4965      	ldr	r1, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d040      	beq.n	80050ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b41      	ldr	r3, [pc, #260]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e073      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06b      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4936      	ldr	r1, [pc, #216]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fd fb9e 	bl	80027fc <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fd fb9a 	bl	80027fc <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e053      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d210      	bcs.n	800511c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 020f 	bic.w	r2, r3, #15
 8005102:	4922      	ldr	r1, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1cc>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1d0>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1d4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fafa 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	0800dec4 	.word	0x0800dec4
 8005198:	2000062c 	.word	0x2000062c
 800519c:	20000630 	.word	0x20000630

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b094      	sub	sp, #80	; 0x50
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	2300      	movs	r3, #0
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	2300      	movs	r3, #0
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b79      	ldr	r3, [pc, #484]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80e1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e0db      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051d8:	e0db      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051de:	e0d8      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051ea:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
 800520e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f04f 0000 	mov.w	r0, #0
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	0159      	lsls	r1, r3, #5
 8005220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005224:	0150      	lsls	r0, r2, #5
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4621      	mov	r1, r4
 800522c:	1a51      	subs	r1, r2, r1
 800522e:	6139      	str	r1, [r7, #16]
 8005230:	4629      	mov	r1, r5
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524e:	4651      	mov	r1, sl
 8005250:	018a      	lsls	r2, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ebb2 0801 	subs.w	r8, r2, r1
 8005258:	4659      	mov	r1, fp
 800525a:	eb63 0901 	sbc.w	r9, r3, r1
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005272:	4690      	mov	r8, r2
 8005274:	4699      	mov	r9, r3
 8005276:	4623      	mov	r3, r4
 8005278:	eb18 0303 	adds.w	r3, r8, r3
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	462b      	mov	r3, r5
 8005280:	eb49 0303 	adc.w	r3, r9, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005292:	4629      	mov	r1, r5
 8005294:	024b      	lsls	r3, r1, #9
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800529c:	4621      	mov	r1, r4
 800529e:	024a      	lsls	r2, r1, #9
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052b0:	f7fb fd4a 	bl	8000d48 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e058      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	4611      	mov	r1, r2
 80052ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ea:	0150      	lsls	r0, r2, #5
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4641      	mov	r1, r8
 80052f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800530c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005310:	ebb2 040a 	subs.w	r4, r2, sl
 8005314:	eb63 050b 	sbc.w	r5, r3, fp
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	464b      	mov	r3, r9
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	2200      	movs	r2, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	f7fb fcf0 	bl	8000d48 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005394:	4618      	mov	r0, r3
 8005396:	3750      	adds	r7, #80	; 0x50
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	2000062c 	.word	0x2000062c

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff0 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	0800ded4 	.word	0x0800ded4

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffdc 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0b5b      	lsrs	r3, r3, #13
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	0800ded4 	.word	0x0800ded4

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800543c:	4b69      	ldr	r3, [pc, #420]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005446:	6093      	str	r3, [r2, #8]
 8005448:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005450:	4964      	ldr	r1, [pc, #400]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800546e:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	4959      	ldr	r1, [pc, #356]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548c:	d101      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	494a      	ldr	r1, [pc, #296]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c8:	d101      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808b 	beq.w	800560e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	6413      	str	r3, [r2, #64]	; 0x40
 8005504:	4b37      	ldr	r3, [pc, #220]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551c:	f7fd f96e 	bl	80027fc <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005524:	f7fd f96a 	bl	80027fc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e357      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005542:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d035      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d02e      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800556a:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d114      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd f932 	bl	80027fc <HAL_GetTick>
 8005598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fd f92e 	bl	80027fc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e319      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d111      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055da:	400b      	ands	r3, r1
 80055dc:	4901      	ldr	r1, [pc, #4]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	e00b      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40007000 	.word	0x40007000
 80055ec:	0ffffcff 	.word	0x0ffffcff
 80055f0:	4baa      	ldr	r3, [pc, #680]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4aa9      	ldr	r2, [pc, #676]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055fa:	6093      	str	r3, [r2, #8]
 80055fc:	4ba7      	ldr	r3, [pc, #668]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005608:	49a4      	ldr	r1, [pc, #656]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560a:	4313      	orrs	r3, r2
 800560c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800561a:	4ba0      	ldr	r3, [pc, #640]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005620:	4a9e      	ldr	r2, [pc, #632]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005626:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800562a:	4b9c      	ldr	r3, [pc, #624]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	4999      	ldr	r1, [pc, #612]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005648:	4b94      	ldr	r3, [pc, #592]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005656:	4991      	ldr	r1, [pc, #580]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800566a:	4b8c      	ldr	r3, [pc, #560]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	4988      	ldr	r1, [pc, #544]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800568c:	4b83      	ldr	r3, [pc, #524]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569a:	4980      	ldr	r1, [pc, #512]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ae:	4b7b      	ldr	r3, [pc, #492]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4977      	ldr	r1, [pc, #476]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d0:	4b72      	ldr	r3, [pc, #456]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f023 0203 	bic.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	496f      	ldr	r1, [pc, #444]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f023 020c 	bic.w	r2, r3, #12
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005700:	4966      	ldr	r1, [pc, #408]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005714:	4b61      	ldr	r3, [pc, #388]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	495e      	ldr	r1, [pc, #376]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005736:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	4955      	ldr	r1, [pc, #340]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005758:	4b50      	ldr	r3, [pc, #320]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	494d      	ldr	r1, [pc, #308]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800577a:	4b48      	ldr	r3, [pc, #288]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	4944      	ldr	r1, [pc, #272]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800579c:	4b3f      	ldr	r3, [pc, #252]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	493c      	ldr	r1, [pc, #240]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057be:	4b37      	ldr	r3, [pc, #220]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	4933      	ldr	r1, [pc, #204]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057e0:	4b2e      	ldr	r3, [pc, #184]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	492b      	ldr	r1, [pc, #172]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	4922      	ldr	r1, [pc, #136]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d101      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005822:	2301      	movs	r3, #1
 8005824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005842:	4b16      	ldr	r3, [pc, #88]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	4912      	ldr	r1, [pc, #72]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005874:	4909      	ldr	r1, [pc, #36]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d006      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80d9 	beq.w	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a01      	ldr	r2, [pc, #4]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800589a:	e001      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800589c:	40023800 	.word	0x40023800
 80058a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a2:	f7fc ffab 	bl	80027fc <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058aa:	f7fc ffa7 	bl	80027fc <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b64      	cmp	r3, #100	; 0x64
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e194      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058bc:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d021      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11d      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058dc:	4b64      	ldr	r3, [pc, #400]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ea:	4b61      	ldr	r3, [pc, #388]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	019a      	lsls	r2, r3, #6
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	071b      	lsls	r3, r3, #28
 8005910:	4957      	ldr	r1, [pc, #348]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592c:	d00a      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005936:	2b00      	cmp	r3, #0
 8005938:	d02e      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005942:	d129      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005944:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	0c1b      	lsrs	r3, r3, #16
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005958:	0f1b      	lsrs	r3, r3, #28
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	019a      	lsls	r2, r3, #6
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	071b      	lsls	r3, r3, #28
 8005978:	493d      	ldr	r1, [pc, #244]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005980:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005986:	f023 021f 	bic.w	r2, r3, #31
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	3b01      	subs	r3, #1
 8005990:	4937      	ldr	r1, [pc, #220]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01d      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a4:	4b32      	ldr	r3, [pc, #200]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059aa:	0e1b      	lsrs	r3, r3, #24
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b2:	4b2f      	ldr	r3, [pc, #188]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b8:	0f1b      	lsrs	r3, r3, #28
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	019a      	lsls	r2, r3, #6
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	431a      	orrs	r2, r3
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	071b      	lsls	r3, r3, #28
 80059d8:	4925      	ldr	r1, [pc, #148]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	019a      	lsls	r2, r3, #6
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	071b      	lsls	r3, r3, #28
 8005a08:	4919      	ldr	r1, [pc, #100]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1c:	f7fc feee 	bl	80027fc <HAL_GetTick>
 8005a20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a24:	f7fc feea 	bl	80027fc <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0d7      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 80cd 	bne.w	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a56:	f7fc fed1 	bl	80027fc <HAL_GetTick>
 8005a5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a5c:	e00a      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a5e:	f7fc fecd 	bl	80027fc <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b64      	cmp	r3, #100	; 0x64
 8005a6a:	d903      	bls.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0ba      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a74:	4b5e      	ldr	r3, [pc, #376]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a80:	d0ed      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d12a      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aaa:	4b51      	ldr	r3, [pc, #324]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	0f1b      	lsrs	r3, r3, #28
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	4944      	ldr	r1, [pc, #272]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ae6:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	493d      	ldr	r1, [pc, #244]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b14:	d11d      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	0e1b      	lsrs	r3, r3, #24
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b24:	4b32      	ldr	r3, [pc, #200]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	0f1b      	lsrs	r3, r3, #28
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	019a      	lsls	r2, r3, #6
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	061b      	lsls	r3, r3, #24
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	4929      	ldr	r1, [pc, #164]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b6c:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	019a      	lsls	r2, r3, #6
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	4917      	ldr	r1, [pc, #92]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	4911      	ldr	r1, [pc, #68]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0e      	ldr	r2, [pc, #56]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bbc:	f7fc fe1e 	bl	80027fc <HAL_GetTick>
 8005bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bc4:	f7fc fe1a 	bl	80027fc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	; 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e007      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be2:	d1ef      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800

08005bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e049      	b.n	8005c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fc fa94 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 fcee 	bl	8006614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d001      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e054      	b.n	8005d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d022      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d01d      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d115      	bne.n	8005d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <HAL_TIM_Base_Start_IT+0xec>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d015      	beq.n	8005d62 <HAL_TIM_Base_Start_IT+0xbe>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3c:	d011      	beq.n	8005d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0201 	orr.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	e008      	b.n	8005d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e000      	b.n	8005d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800
 8005d90:	00010007 	.word	0x00010007

08005d94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e049      	b.n	8005e3a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f841 	bl	8005e42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f000 fc1e 	bl	8006614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_TIM_OC_Start_IT+0x28>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e03c      	b.n	8005efa <HAL_TIM_OC_Start_IT+0xa2>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d109      	bne.n	8005e9a <HAL_TIM_OC_Start_IT+0x42>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	2300      	moveq	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	e02f      	b.n	8005efa <HAL_TIM_OC_Start_IT+0xa2>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d109      	bne.n	8005eb4 <HAL_TIM_OC_Start_IT+0x5c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	e022      	b.n	8005efa <HAL_TIM_OC_Start_IT+0xa2>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d109      	bne.n	8005ece <HAL_TIM_OC_Start_IT+0x76>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	bf14      	ite	ne
 8005ec6:	2301      	movne	r3, #1
 8005ec8:	2300      	moveq	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e015      	b.n	8005efa <HAL_TIM_OC_Start_IT+0xa2>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d109      	bne.n	8005ee8 <HAL_TIM_OC_Start_IT+0x90>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e008      	b.n	8005efa <HAL_TIM_OC_Start_IT+0xa2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf14      	ite	ne
 8005ef4:	2301      	movne	r3, #1
 8005ef6:	2300      	moveq	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e0dd      	b.n	80060be <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_OC_Start_IT+0xba>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f10:	e023      	b.n	8005f5a <HAL_TIM_OC_Start_IT+0x102>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_OC_Start_IT+0xca>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f20:	e01b      	b.n	8005f5a <HAL_TIM_OC_Start_IT+0x102>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_OC_Start_IT+0xda>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f30:	e013      	b.n	8005f5a <HAL_TIM_OC_Start_IT+0x102>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_OC_Start_IT+0xea>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f40:	e00b      	b.n	8005f5a <HAL_TIM_OC_Start_IT+0x102>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_OC_Start_IT+0xfa>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f50:	e003      	b.n	8005f5a <HAL_TIM_OC_Start_IT+0x102>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	d841      	bhi.n	8005fe4 <HAL_TIM_OC_Start_IT+0x18c>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_TIM_OC_Start_IT+0x110>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fe5 	.word	0x08005fe5
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fd3 	.word	0x08005fd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0202 	orr.w	r2, r2, #2
 8005faa:	60da      	str	r2, [r3, #12]
      break;
 8005fac:	e01d      	b.n	8005fea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0204 	orr.w	r2, r2, #4
 8005fbc:	60da      	str	r2, [r3, #12]
      break;
 8005fbe:	e014      	b.n	8005fea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0208 	orr.w	r2, r2, #8
 8005fce:	60da      	str	r2, [r3, #12]
      break;
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0210 	orr.w	r2, r2, #16
 8005fe0:	60da      	str	r2, [r3, #12]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d165      	bne.n	80060bc <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fea3 	bl	8006d44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a31      	ldr	r2, [pc, #196]	; (80060c8 <HAL_TIM_OC_Start_IT+0x270>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_OC_Start_IT+0x1ba>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <HAL_TIM_OC_Start_IT+0x274>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_TIM_OC_Start_IT+0x1be>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <HAL_TIM_OC_Start_IT+0x1c0>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800602a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <HAL_TIM_OC_Start_IT+0x270>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d01d      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_TIM_OC_Start_IT+0x278>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a21      	ldr	r2, [pc, #132]	; (80060d4 <HAL_TIM_OC_Start_IT+0x27c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1f      	ldr	r2, [pc, #124]	; (80060d8 <HAL_TIM_OC_Start_IT+0x280>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <HAL_TIM_OC_Start_IT+0x274>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_TIM_OC_Start_IT+0x284>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIM_OC_Start_IT+0x224>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <HAL_TIM_OC_Start_IT+0x288>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d115      	bne.n	80060a8 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <HAL_TIM_OC_Start_IT+0x28c>)
 8006084:	4013      	ands	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b06      	cmp	r3, #6
 800608c:	d015      	beq.n	80060ba <HAL_TIM_OC_Start_IT+0x262>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006094:	d011      	beq.n	80060ba <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	e008      	b.n	80060ba <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e000      	b.n	80060bc <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40001800 	.word	0x40001800
 80060e4:	00010007 	.word	0x00010007

080060e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d122      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d11b      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0202 	mvn.w	r2, #2
 8006114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa54 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa46 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa57 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b04      	cmp	r3, #4
 8006150:	d122      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	d11b      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0204 	mvn.w	r2, #4
 8006168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa2a 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006184:	e005      	b.n	8006192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa1c 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa2d 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d122      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d11b      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0208 	mvn.w	r2, #8
 80061bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa00 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9f2 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa03 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0210 	mvn.w	r2, #16
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2208      	movs	r2, #8
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9d6 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9c8 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f9d9 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10e      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9a2 	bl	80065b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fe14 	bl	8006ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d10e      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fe07 	bl	8006ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d10e      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f987 	bl	8006600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d10e      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d107      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0220 	mvn.w	r2, #32
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fdc7 	bl	8006eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e066      	b.n	8006414 <HAL_TIM_OC_ConfigChannel+0xec>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b14      	cmp	r3, #20
 8006352:	d857      	bhi.n	8006404 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063b1 	.word	0x080063b1
 8006360:	08006405 	.word	0x08006405
 8006364:	08006405 	.word	0x08006405
 8006368:	08006405 	.word	0x08006405
 800636c:	080063bf 	.word	0x080063bf
 8006370:	08006405 	.word	0x08006405
 8006374:	08006405 	.word	0x08006405
 8006378:	08006405 	.word	0x08006405
 800637c:	080063cd 	.word	0x080063cd
 8006380:	08006405 	.word	0x08006405
 8006384:	08006405 	.word	0x08006405
 8006388:	08006405 	.word	0x08006405
 800638c:	080063db 	.word	0x080063db
 8006390:	08006405 	.word	0x08006405
 8006394:	08006405 	.word	0x08006405
 8006398:	08006405 	.word	0x08006405
 800639c:	080063e9 	.word	0x080063e9
 80063a0:	08006405 	.word	0x08006405
 80063a4:	08006405 	.word	0x08006405
 80063a8:	08006405 	.word	0x08006405
 80063ac:	080063f7 	.word	0x080063f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f9cc 	bl	8006754 <TIM_OC1_SetConfig>
      break;
 80063bc:	e025      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fa37 	bl	8006838 <TIM_OC2_SetConfig>
      break;
 80063ca:	e01e      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 faa8 	bl	8006928 <TIM_OC3_SetConfig>
      break;
 80063d8:	e017      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fb17 	bl	8006a14 <TIM_OC4_SetConfig>
      break;
 80063e6:	e010      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fb68 	bl	8006ac4 <TIM_OC5_SetConfig>
      break;
 80063f4:	e009      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fbb3 	bl	8006b68 <TIM_OC6_SetConfig>
      break;
 8006402:	e002      	b.n	800640a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	75fb      	strb	r3, [r7, #23]
      break;
 8006408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIM_ConfigClockSource+0x1c>
 8006434:	2302      	movs	r3, #2
 8006436:	e0b4      	b.n	80065a2 <HAL_TIM_ConfigClockSource+0x186>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	4b56      	ldr	r3, [pc, #344]	; (80065ac <HAL_TIM_ConfigClockSource+0x190>)
 8006454:	4013      	ands	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006470:	d03e      	beq.n	80064f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	f200 8087 	bhi.w	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	f000 8086 	beq.w	800658e <HAL_TIM_ConfigClockSource+0x172>
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d87f      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b70      	cmp	r3, #112	; 0x70
 800648a:	d01a      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0xa6>
 800648c:	2b70      	cmp	r3, #112	; 0x70
 800648e:	d87b      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b60      	cmp	r3, #96	; 0x60
 8006492:	d050      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x11a>
 8006494:	2b60      	cmp	r3, #96	; 0x60
 8006496:	d877      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b50      	cmp	r3, #80	; 0x50
 800649a:	d03c      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0xfa>
 800649c:	2b50      	cmp	r3, #80	; 0x50
 800649e:	d873      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d058      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x13a>
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d86f      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 80064a8:	2b30      	cmp	r3, #48	; 0x30
 80064aa:	d064      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x15a>
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d86b      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d060      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d867      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05c      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x15a>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d05a      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x15a>
 80064c0:	e062      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064d2:	f000 fc17 	bl	8006d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]
      break;
 80064ee:	e04f      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006500:	f000 fc00 	bl	8006d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006512:	609a      	str	r2, [r3, #8]
      break;
 8006514:	e03c      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	461a      	mov	r2, r3
 8006524:	f000 fb74 	bl	8006c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2150      	movs	r1, #80	; 0x50
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fbcd 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006534:	e02c      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006542:	461a      	mov	r2, r3
 8006544:	f000 fb93 	bl	8006c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2160      	movs	r1, #96	; 0x60
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fbbd 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006554:	e01c      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	461a      	mov	r2, r3
 8006564:	f000 fb54 	bl	8006c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2140      	movs	r1, #64	; 0x40
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbad 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006574:	e00c      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f000 fba4 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006586:	e003      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e000      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800658e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	fffeff88 	.word	0xfffeff88

080065b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a40      	ldr	r2, [pc, #256]	; (8006728 <TIM_Base_SetConfig+0x114>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d00f      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3d      	ldr	r2, [pc, #244]	; (800672c <TIM_Base_SetConfig+0x118>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3c      	ldr	r2, [pc, #240]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <TIM_Base_SetConfig+0x120>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a3a      	ldr	r2, [pc, #232]	; (8006738 <TIM_Base_SetConfig+0x124>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2f      	ldr	r2, [pc, #188]	; (8006728 <TIM_Base_SetConfig+0x114>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d02b      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d027      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2c      	ldr	r2, [pc, #176]	; (800672c <TIM_Base_SetConfig+0x118>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d023      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01f      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <TIM_Base_SetConfig+0x120>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01b      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a29      	ldr	r2, [pc, #164]	; (8006738 <TIM_Base_SetConfig+0x124>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d017      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a28      	ldr	r2, [pc, #160]	; (800673c <TIM_Base_SetConfig+0x128>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d013      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a27      	ldr	r2, [pc, #156]	; (8006740 <TIM_Base_SetConfig+0x12c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00f      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a26      	ldr	r2, [pc, #152]	; (8006744 <TIM_Base_SetConfig+0x130>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00b      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a25      	ldr	r2, [pc, #148]	; (8006748 <TIM_Base_SetConfig+0x134>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d007      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a24      	ldr	r2, [pc, #144]	; (800674c <TIM_Base_SetConfig+0x138>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d003      	beq.n	80066c6 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a23      	ldr	r2, [pc, #140]	; (8006750 <TIM_Base_SetConfig+0x13c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d108      	bne.n	80066d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <TIM_Base_SetConfig+0x114>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_Base_SetConfig+0xf8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <TIM_Base_SetConfig+0x124>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d103      	bne.n	8006714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	615a      	str	r2, [r3, #20]
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40010400 	.word	0x40010400
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800
 8006748:	40001800 	.word	0x40001800
 800674c:	40001c00 	.word	0x40001c00
 8006750:	40002000 	.word	0x40002000

08006754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b2b      	ldr	r3, [pc, #172]	; (800682c <TIM_OC1_SetConfig+0xd8>)
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0303 	bic.w	r3, r3, #3
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f023 0302 	bic.w	r3, r3, #2
 800679c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <TIM_OC1_SetConfig+0xdc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC1_SetConfig+0x64>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a20      	ldr	r2, [pc, #128]	; (8006834 <TIM_OC1_SetConfig+0xe0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10c      	bne.n	80067d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0308 	bic.w	r3, r3, #8
 80067be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <TIM_OC1_SetConfig+0xdc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC1_SetConfig+0x8e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a15      	ldr	r2, [pc, #84]	; (8006834 <TIM_OC1_SetConfig+0xe0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d111      	bne.n	8006806 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	fffeff8f 	.word	0xfffeff8f
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0210 	bic.w	r2, r3, #16
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4b2e      	ldr	r3, [pc, #184]	; (800691c <TIM_OC2_SetConfig+0xe4>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0320 	bic.w	r3, r3, #32
 8006882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <TIM_OC2_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC2_SetConfig+0x68>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a22      	ldr	r2, [pc, #136]	; (8006924 <TIM_OC2_SetConfig+0xec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10d      	bne.n	80068bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a18      	ldr	r2, [pc, #96]	; (8006920 <TIM_OC2_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC2_SetConfig+0x94>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a17      	ldr	r2, [pc, #92]	; (8006924 <TIM_OC2_SetConfig+0xec>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d113      	bne.n	80068f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	feff8fff 	.word	0xfeff8fff
 8006920:	40010000 	.word	0x40010000
 8006924:	40010400 	.word	0x40010400

08006928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <TIM_OC3_SetConfig+0xe0>)
 8006954:	4013      	ands	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <TIM_OC3_SetConfig+0xe4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x66>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <TIM_OC3_SetConfig+0xe8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10d      	bne.n	80069aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <TIM_OC3_SetConfig+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_OC3_SetConfig+0x92>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <TIM_OC3_SetConfig+0xe8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d113      	bne.n	80069e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	fffeff8f 	.word	0xfffeff8f
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <TIM_OC4_SetConfig+0xa4>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	031b      	lsls	r3, r3, #12
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a13      	ldr	r2, [pc, #76]	; (8006abc <TIM_OC4_SetConfig+0xa8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_OC4_SetConfig+0x68>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <TIM_OC4_SetConfig+0xac>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d109      	bne.n	8006a90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	019b      	lsls	r3, r3, #6
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	feff8fff 	.word	0xfeff8fff
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <TIM_OC5_SetConfig+0x98>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <TIM_OC5_SetConfig+0x9c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_OC5_SetConfig+0x5e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <TIM_OC5_SetConfig+0xa0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d109      	bne.n	8006b36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	fffeff8f 	.word	0xfffeff8f
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400

08006b68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <TIM_OC6_SetConfig+0x9c>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	051b      	lsls	r3, r3, #20
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <TIM_OC6_SetConfig+0xa0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC6_SetConfig+0x60>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <TIM_OC6_SetConfig+0xa4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d109      	bne.n	8006bdc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	feff8fff 	.word	0xfeff8fff
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400

08006c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0201 	bic.w	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 030a 	bic.w	r3, r3, #10
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b087      	sub	sp, #28
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0210 	bic.w	r2, r3, #16
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f043 0307 	orr.w	r3, r3, #7
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	021a      	lsls	r2, r3, #8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	2201      	movs	r2, #1
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1a      	ldr	r2, [r3, #32]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	401a      	ands	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e06d      	b.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a30      	ldr	r2, [pc, #192]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d108      	bne.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006de2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d022      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d01d      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d018      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1a      	ldr	r2, [pc, #104]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d009      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d10c      	bne.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40010400 	.word	0x40010400
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40001800 	.word	0x40001800

08006eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e040      	b.n	8006f7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fb f976 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2224      	movs	r2, #36	; 0x24
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fc62 	bl	80077f0 <UART_SetConfig>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e022      	b.n	8006f7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 feba 	bl	8007cb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 ff41 	bl	8007dfc <UART_CheckIdleState>
 8006f7a:	4603      	mov	r3, r0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d171      	bne.n	8007080 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_UART_Transmit+0x24>
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e06a      	b.n	8007082 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2221      	movs	r2, #33	; 0x21
 8006fb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fba:	f7fb fc1f 	bl	80027fc <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd8:	d108      	bne.n	8006fec <HAL_UART_Transmit+0x68>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e003      	b.n	8006ff4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ff4:	e02c      	b.n	8007050 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 ff32 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e038      	b.n	8007082 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	3302      	adds	r3, #2
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e007      	b.n	800703e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	3301      	adds	r3, #1
 800703c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1cc      	bne.n	8006ff6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	2140      	movs	r1, #64	; 0x40
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 feff 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e005      	b.n	8007082 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007080:	2302      	movs	r3, #2
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d165      	bne.n	800716e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_UART_Transmit_DMA+0x22>
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e05e      	b.n	8007170 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2221      	movs	r2, #33	; 0x21
 80070d4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d027      	beq.n	800712e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a25      	ldr	r2, [pc, #148]	; (8007178 <HAL_UART_Transmit_DMA+0xec>)
 80070e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	4a24      	ldr	r2, [pc, #144]	; (800717c <HAL_UART_Transmit_DMA+0xf0>)
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4a23      	ldr	r2, [pc, #140]	; (8007180 <HAL_UART_Transmit_DMA+0xf4>)
 80070f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	2200      	movs	r2, #0
 80070fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	4619      	mov	r1, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	461a      	mov	r2, r3
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	f7fc faab 	bl	800366c <HAL_DMA_Start_IT>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2210      	movs	r2, #16
 8007120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e020      	b.n	8007170 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2240      	movs	r2, #64	; 0x40
 8007134:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	613b      	str	r3, [r7, #16]
   return(result);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007156:	623a      	str	r2, [r7, #32]
 8007158:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	69f9      	ldr	r1, [r7, #28]
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	61bb      	str	r3, [r7, #24]
   return(result);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	e000      	b.n	8007170 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800716e:	2302      	movs	r3, #2
  }
}
 8007170:	4618      	mov	r0, r3
 8007172:	3728      	adds	r7, #40	; 0x28
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	0800824d 	.word	0x0800824d
 800717c:	080082e3 	.word	0x080082e3
 8007180:	08008465 	.word	0x08008465

08007184 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08a      	sub	sp, #40	; 0x28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007198:	2b20      	cmp	r3, #32
 800719a:	d132      	bne.n	8007202 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Receive_DMA+0x24>
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e02b      	b.n	8007204 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d018      	beq.n	80071f2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	613b      	str	r3, [r7, #16]
   return(result);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69f9      	ldr	r1, [r7, #28]
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e6      	bne.n	80071c0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fefd 	bl	8007ff8 <UART_Start_Receive_DMA>
 80071fe:	4603      	mov	r3, r0
 8007200:	e000      	b.n	8007204 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3728      	adds	r7, #40	; 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0ba      	sub	sp, #232	; 0xe8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007232:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007236:	f640 030f 	movw	r3, #2063	; 0x80f
 800723a:	4013      	ands	r3, r2
 800723c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d115      	bne.n	8007274 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00f      	beq.n	8007274 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8297 	beq.w	8007798 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4798      	blx	r3
      }
      return;
 8007272:	e291      	b.n	8007798 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8117 	beq.w	80074ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800728a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800728e:	4b85      	ldr	r3, [pc, #532]	; (80074a4 <HAL_UART_IRQHandler+0x298>)
 8007290:	4013      	ands	r3, r2
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 810a 	beq.w	80074ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d011      	beq.n	80072c8 <HAL_UART_IRQHandler+0xbc>
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072be:	f043 0201 	orr.w	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d011      	beq.n	80072f8 <HAL_UART_IRQHandler+0xec>
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2202      	movs	r2, #2
 80072e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ee:	f043 0204 	orr.w	r2, r3, #4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d011      	beq.n	8007328 <HAL_UART_IRQHandler+0x11c>
 8007304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2204      	movs	r2, #4
 8007316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731e:	f043 0202 	orr.w	r2, r3, #2
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d017      	beq.n	8007364 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007344:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2208      	movs	r2, #8
 8007352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	f043 0208 	orr.w	r2, r3, #8
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736c:	2b00      	cmp	r3, #0
 800736e:	d012      	beq.n	8007396 <HAL_UART_IRQHandler+0x18a>
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 81fd 	beq.w	800779c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80073a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d005      	beq.n	80073ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04f      	beq.n	800748e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fec8 	bl	8008184 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d141      	bne.n	8007486 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800741c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800742e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800743a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d9      	bne.n	8007402 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <HAL_UART_IRQHandler+0x29c>)
 800745c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc f9d2 	bl	800380c <HAL_DMA_Abort_IT>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d017      	beq.n	800749e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	e00f      	b.n	800749e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fa fc84 	bl	8001d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00b      	b.n	800749e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa fc80 	bl	8001d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e007      	b.n	800749e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fa fc7c 	bl	8001d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800749c:	e17e      	b.n	800779c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749e:	bf00      	nop
    return;
 80074a0:	e17c      	b.n	800779c <HAL_UART_IRQHandler+0x590>
 80074a2:	bf00      	nop
 80074a4:	04000120 	.word	0x04000120
 80074a8:	080084e3 	.word	0x080084e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f040 814c 	bne.w	800774e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8145 	beq.w	800774e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 813e 	beq.w	800774e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2210      	movs	r2, #16
 80074d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	f040 80b6 	bne.w	8007656 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 8150 	beq.w	80077a0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800750a:	429a      	cmp	r2, r3
 800750c:	f080 8148 	bcs.w	80077a0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007524:	f000 8086 	beq.w	8007634 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800753c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007556:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800755e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800756a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1da      	bne.n	8007528 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800759a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800759e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e1      	bne.n	8007572 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3308      	adds	r3, #8
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3308      	adds	r3, #8
 80075ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	f023 0310 	bic.w	r3, r3, #16
 8007608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007616:	65bb      	str	r3, [r7, #88]	; 0x58
 8007618:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800761c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e4      	bne.n	80075f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762e:	4618      	mov	r0, r3
 8007630:	f7fc f87c 	bl	800372c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007646:	b29b      	uxth	r3, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	b29b      	uxth	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f8c2 	bl	80077d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007654:	e0a4      	b.n	80077a0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007662:	b29b      	uxth	r3, r3
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8096 	beq.w	80077a4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8091 	beq.w	80077a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076a4:	647b      	str	r3, [r7, #68]	; 0x44
 80076a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e4      	bne.n	8007682 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	623b      	str	r3, [r7, #32]
   return(result);
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076dc:	633a      	str	r2, [r7, #48]	; 0x30
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e3      	bne.n	80076b8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60fb      	str	r3, [r7, #12]
   return(result);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f023 0310 	bic.w	r3, r3, #16
 8007718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	617b      	str	r3, [r7, #20]
   return(result);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e4      	bne.n	8007704 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f846 	bl	80077d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800774c:	e02a      	b.n	80077a4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00e      	beq.n	8007778 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800775a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01c      	beq.n	80077a8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
    }
    return;
 8007776:	e017      	b.n	80077a8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_UART_IRQHandler+0x59e>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00c      	beq.n	80077aa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 febc 	bl	800850e <UART_EndTransmit_IT>
    return;
 8007796:	e008      	b.n	80077aa <HAL_UART_IRQHandler+0x59e>
      return;
 8007798:	bf00      	nop
 800779a:	e006      	b.n	80077aa <HAL_UART_IRQHandler+0x59e>
    return;
 800779c:	bf00      	nop
 800779e:	e004      	b.n	80077aa <HAL_UART_IRQHandler+0x59e>
      return;
 80077a0:	bf00      	nop
 80077a2:	e002      	b.n	80077aa <HAL_UART_IRQHandler+0x59e>
      return;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <HAL_UART_IRQHandler+0x59e>
    return;
 80077a8:	bf00      	nop
  }

}
 80077aa:	37e8      	adds	r7, #232	; 0xe8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4ba6      	ldr	r3, [pc, #664]	; (8007ab4 <UART_SetConfig+0x2c4>)
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	430b      	orrs	r3, r1
 8007826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	430a      	orrs	r2, r1
 8007860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a94      	ldr	r2, [pc, #592]	; (8007ab8 <UART_SetConfig+0x2c8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d120      	bne.n	80078ae <UART_SetConfig+0xbe>
 800786c:	4b93      	ldr	r3, [pc, #588]	; (8007abc <UART_SetConfig+0x2cc>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d816      	bhi.n	80078a8 <UART_SetConfig+0xb8>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0x90>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007891 	.word	0x08007891
 8007884:	0800789d 	.word	0x0800789d
 8007888:	08007897 	.word	0x08007897
 800788c:	080078a3 	.word	0x080078a3
 8007890:	2301      	movs	r3, #1
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e150      	b.n	8007b38 <UART_SetConfig+0x348>
 8007896:	2302      	movs	r3, #2
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e14d      	b.n	8007b38 <UART_SetConfig+0x348>
 800789c:	2304      	movs	r3, #4
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e14a      	b.n	8007b38 <UART_SetConfig+0x348>
 80078a2:	2308      	movs	r3, #8
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e147      	b.n	8007b38 <UART_SetConfig+0x348>
 80078a8:	2310      	movs	r3, #16
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e144      	b.n	8007b38 <UART_SetConfig+0x348>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a83      	ldr	r2, [pc, #524]	; (8007ac0 <UART_SetConfig+0x2d0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d132      	bne.n	800791e <UART_SetConfig+0x12e>
 80078b8:	4b80      	ldr	r3, [pc, #512]	; (8007abc <UART_SetConfig+0x2cc>)
 80078ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d828      	bhi.n	8007918 <UART_SetConfig+0x128>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0xdc>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007901 	.word	0x08007901
 80078d0:	08007919 	.word	0x08007919
 80078d4:	08007919 	.word	0x08007919
 80078d8:	08007919 	.word	0x08007919
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	08007919 	.word	0x08007919
 80078e4:	08007919 	.word	0x08007919
 80078e8:	08007919 	.word	0x08007919
 80078ec:	08007907 	.word	0x08007907
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007919 	.word	0x08007919
 80078f8:	08007919 	.word	0x08007919
 80078fc:	08007913 	.word	0x08007913
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e118      	b.n	8007b38 <UART_SetConfig+0x348>
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e115      	b.n	8007b38 <UART_SetConfig+0x348>
 800790c:	2304      	movs	r3, #4
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e112      	b.n	8007b38 <UART_SetConfig+0x348>
 8007912:	2308      	movs	r3, #8
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e10f      	b.n	8007b38 <UART_SetConfig+0x348>
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e10c      	b.n	8007b38 <UART_SetConfig+0x348>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a68      	ldr	r2, [pc, #416]	; (8007ac4 <UART_SetConfig+0x2d4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d120      	bne.n	800796a <UART_SetConfig+0x17a>
 8007928:	4b64      	ldr	r3, [pc, #400]	; (8007abc <UART_SetConfig+0x2cc>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	d013      	beq.n	800795e <UART_SetConfig+0x16e>
 8007936:	2b30      	cmp	r3, #48	; 0x30
 8007938:	d814      	bhi.n	8007964 <UART_SetConfig+0x174>
 800793a:	2b20      	cmp	r3, #32
 800793c:	d009      	beq.n	8007952 <UART_SetConfig+0x162>
 800793e:	2b20      	cmp	r3, #32
 8007940:	d810      	bhi.n	8007964 <UART_SetConfig+0x174>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <UART_SetConfig+0x15c>
 8007946:	2b10      	cmp	r3, #16
 8007948:	d006      	beq.n	8007958 <UART_SetConfig+0x168>
 800794a:	e00b      	b.n	8007964 <UART_SetConfig+0x174>
 800794c:	2300      	movs	r3, #0
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e0f2      	b.n	8007b38 <UART_SetConfig+0x348>
 8007952:	2302      	movs	r3, #2
 8007954:	77fb      	strb	r3, [r7, #31]
 8007956:	e0ef      	b.n	8007b38 <UART_SetConfig+0x348>
 8007958:	2304      	movs	r3, #4
 800795a:	77fb      	strb	r3, [r7, #31]
 800795c:	e0ec      	b.n	8007b38 <UART_SetConfig+0x348>
 800795e:	2308      	movs	r3, #8
 8007960:	77fb      	strb	r3, [r7, #31]
 8007962:	e0e9      	b.n	8007b38 <UART_SetConfig+0x348>
 8007964:	2310      	movs	r3, #16
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e0e6      	b.n	8007b38 <UART_SetConfig+0x348>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a56      	ldr	r2, [pc, #344]	; (8007ac8 <UART_SetConfig+0x2d8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d120      	bne.n	80079b6 <UART_SetConfig+0x1c6>
 8007974:	4b51      	ldr	r3, [pc, #324]	; (8007abc <UART_SetConfig+0x2cc>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800797e:	2bc0      	cmp	r3, #192	; 0xc0
 8007980:	d013      	beq.n	80079aa <UART_SetConfig+0x1ba>
 8007982:	2bc0      	cmp	r3, #192	; 0xc0
 8007984:	d814      	bhi.n	80079b0 <UART_SetConfig+0x1c0>
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d009      	beq.n	800799e <UART_SetConfig+0x1ae>
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d810      	bhi.n	80079b0 <UART_SetConfig+0x1c0>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <UART_SetConfig+0x1a8>
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d006      	beq.n	80079a4 <UART_SetConfig+0x1b4>
 8007996:	e00b      	b.n	80079b0 <UART_SetConfig+0x1c0>
 8007998:	2300      	movs	r3, #0
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e0cc      	b.n	8007b38 <UART_SetConfig+0x348>
 800799e:	2302      	movs	r3, #2
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e0c9      	b.n	8007b38 <UART_SetConfig+0x348>
 80079a4:	2304      	movs	r3, #4
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e0c6      	b.n	8007b38 <UART_SetConfig+0x348>
 80079aa:	2308      	movs	r3, #8
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e0c3      	b.n	8007b38 <UART_SetConfig+0x348>
 80079b0:	2310      	movs	r3, #16
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e0c0      	b.n	8007b38 <UART_SetConfig+0x348>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a44      	ldr	r2, [pc, #272]	; (8007acc <UART_SetConfig+0x2dc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d125      	bne.n	8007a0c <UART_SetConfig+0x21c>
 80079c0:	4b3e      	ldr	r3, [pc, #248]	; (8007abc <UART_SetConfig+0x2cc>)
 80079c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ce:	d017      	beq.n	8007a00 <UART_SetConfig+0x210>
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d4:	d817      	bhi.n	8007a06 <UART_SetConfig+0x216>
 80079d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079da:	d00b      	beq.n	80079f4 <UART_SetConfig+0x204>
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e0:	d811      	bhi.n	8007a06 <UART_SetConfig+0x216>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <UART_SetConfig+0x1fe>
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ea:	d006      	beq.n	80079fa <UART_SetConfig+0x20a>
 80079ec:	e00b      	b.n	8007a06 <UART_SetConfig+0x216>
 80079ee:	2300      	movs	r3, #0
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e0a1      	b.n	8007b38 <UART_SetConfig+0x348>
 80079f4:	2302      	movs	r3, #2
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e09e      	b.n	8007b38 <UART_SetConfig+0x348>
 80079fa:	2304      	movs	r3, #4
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e09b      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a00:	2308      	movs	r3, #8
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e098      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a06:	2310      	movs	r3, #16
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e095      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a2f      	ldr	r2, [pc, #188]	; (8007ad0 <UART_SetConfig+0x2e0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d125      	bne.n	8007a62 <UART_SetConfig+0x272>
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <UART_SetConfig+0x2cc>)
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a24:	d017      	beq.n	8007a56 <UART_SetConfig+0x266>
 8007a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a2a:	d817      	bhi.n	8007a5c <UART_SetConfig+0x26c>
 8007a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a30:	d00b      	beq.n	8007a4a <UART_SetConfig+0x25a>
 8007a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a36:	d811      	bhi.n	8007a5c <UART_SetConfig+0x26c>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <UART_SetConfig+0x254>
 8007a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a40:	d006      	beq.n	8007a50 <UART_SetConfig+0x260>
 8007a42:	e00b      	b.n	8007a5c <UART_SetConfig+0x26c>
 8007a44:	2301      	movs	r3, #1
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e076      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	e073      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a50:	2304      	movs	r3, #4
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e070      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a56:	2308      	movs	r3, #8
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e06d      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e06a      	b.n	8007b38 <UART_SetConfig+0x348>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <UART_SetConfig+0x2e4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d138      	bne.n	8007ade <UART_SetConfig+0x2ee>
 8007a6c:	4b13      	ldr	r3, [pc, #76]	; (8007abc <UART_SetConfig+0x2cc>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a7a:	d017      	beq.n	8007aac <UART_SetConfig+0x2bc>
 8007a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a80:	d82a      	bhi.n	8007ad8 <UART_SetConfig+0x2e8>
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a86:	d00b      	beq.n	8007aa0 <UART_SetConfig+0x2b0>
 8007a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8c:	d824      	bhi.n	8007ad8 <UART_SetConfig+0x2e8>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <UART_SetConfig+0x2aa>
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	d006      	beq.n	8007aa6 <UART_SetConfig+0x2b6>
 8007a98:	e01e      	b.n	8007ad8 <UART_SetConfig+0x2e8>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e04b      	b.n	8007b38 <UART_SetConfig+0x348>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e048      	b.n	8007b38 <UART_SetConfig+0x348>
 8007aa6:	2304      	movs	r3, #4
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e045      	b.n	8007b38 <UART_SetConfig+0x348>
 8007aac:	2308      	movs	r3, #8
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e042      	b.n	8007b38 <UART_SetConfig+0x348>
 8007ab2:	bf00      	nop
 8007ab4:	efff69f3 	.word	0xefff69f3
 8007ab8:	40011000 	.word	0x40011000
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	40004400 	.word	0x40004400
 8007ac4:	40004800 	.word	0x40004800
 8007ac8:	40004c00 	.word	0x40004c00
 8007acc:	40005000 	.word	0x40005000
 8007ad0:	40011400 	.word	0x40011400
 8007ad4:	40007800 	.word	0x40007800
 8007ad8:	2310      	movs	r3, #16
 8007ada:	77fb      	strb	r3, [r7, #31]
 8007adc:	e02c      	b.n	8007b38 <UART_SetConfig+0x348>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a72      	ldr	r2, [pc, #456]	; (8007cac <UART_SetConfig+0x4bc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d125      	bne.n	8007b34 <UART_SetConfig+0x344>
 8007ae8:	4b71      	ldr	r3, [pc, #452]	; (8007cb0 <UART_SetConfig+0x4c0>)
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007af2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007af6:	d017      	beq.n	8007b28 <UART_SetConfig+0x338>
 8007af8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007afc:	d817      	bhi.n	8007b2e <UART_SetConfig+0x33e>
 8007afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b02:	d00b      	beq.n	8007b1c <UART_SetConfig+0x32c>
 8007b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b08:	d811      	bhi.n	8007b2e <UART_SetConfig+0x33e>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <UART_SetConfig+0x326>
 8007b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b12:	d006      	beq.n	8007b22 <UART_SetConfig+0x332>
 8007b14:	e00b      	b.n	8007b2e <UART_SetConfig+0x33e>
 8007b16:	2300      	movs	r3, #0
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e00d      	b.n	8007b38 <UART_SetConfig+0x348>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e00a      	b.n	8007b38 <UART_SetConfig+0x348>
 8007b22:	2304      	movs	r3, #4
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e007      	b.n	8007b38 <UART_SetConfig+0x348>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e004      	b.n	8007b38 <UART_SetConfig+0x348>
 8007b2e:	2310      	movs	r3, #16
 8007b30:	77fb      	strb	r3, [r7, #31]
 8007b32:	e001      	b.n	8007b38 <UART_SetConfig+0x348>
 8007b34:	2310      	movs	r3, #16
 8007b36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b40:	d15b      	bne.n	8007bfa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007b42:	7ffb      	ldrb	r3, [r7, #31]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d828      	bhi.n	8007b9a <UART_SetConfig+0x3aa>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0x360>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b7d 	.word	0x08007b7d
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	08007b9b 	.word	0x08007b9b
 8007b60:	08007b8b 	.word	0x08007b8b
 8007b64:	08007b9b 	.word	0x08007b9b
 8007b68:	08007b9b 	.word	0x08007b9b
 8007b6c:	08007b9b 	.word	0x08007b9b
 8007b70:	08007b93 	.word	0x08007b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b74:	f7fd fc26 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8007b78:	61b8      	str	r0, [r7, #24]
        break;
 8007b7a:	e013      	b.n	8007ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7c:	f7fd fc36 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8007b80:	61b8      	str	r0, [r7, #24]
        break;
 8007b82:	e00f      	b.n	8007ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b84:	4b4b      	ldr	r3, [pc, #300]	; (8007cb4 <UART_SetConfig+0x4c4>)
 8007b86:	61bb      	str	r3, [r7, #24]
        break;
 8007b88:	e00c      	b.n	8007ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8a:	f7fd fb09 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8007b8e:	61b8      	str	r0, [r7, #24]
        break;
 8007b90:	e008      	b.n	8007ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b96:	61bb      	str	r3, [r7, #24]
        break;
 8007b98:	e004      	b.n	8007ba4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d074      	beq.n	8007c94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	005a      	lsls	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	2b0f      	cmp	r3, #15
 8007bc4:	d916      	bls.n	8007bf4 <UART_SetConfig+0x404>
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bcc:	d212      	bcs.n	8007bf4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f023 030f 	bic.w	r3, r3, #15
 8007bd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	085b      	lsrs	r3, r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	89fa      	ldrh	r2, [r7, #14]
 8007bf0:	60da      	str	r2, [r3, #12]
 8007bf2:	e04f      	b.n	8007c94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	77bb      	strb	r3, [r7, #30]
 8007bf8:	e04c      	b.n	8007c94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bfa:	7ffb      	ldrb	r3, [r7, #31]
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d828      	bhi.n	8007c52 <UART_SetConfig+0x462>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0x418>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c2d 	.word	0x08007c2d
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c3d 	.word	0x08007c3d
 8007c14:	08007c53 	.word	0x08007c53
 8007c18:	08007c43 	.word	0x08007c43
 8007c1c:	08007c53 	.word	0x08007c53
 8007c20:	08007c53 	.word	0x08007c53
 8007c24:	08007c53 	.word	0x08007c53
 8007c28:	08007c4b 	.word	0x08007c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c2c:	f7fd fbca 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8007c30:	61b8      	str	r0, [r7, #24]
        break;
 8007c32:	e013      	b.n	8007c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c34:	f7fd fbda 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8007c38:	61b8      	str	r0, [r7, #24]
        break;
 8007c3a:	e00f      	b.n	8007c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c3c:	4b1d      	ldr	r3, [pc, #116]	; (8007cb4 <UART_SetConfig+0x4c4>)
 8007c3e:	61bb      	str	r3, [r7, #24]
        break;
 8007c40:	e00c      	b.n	8007c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c42:	f7fd faad 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8007c46:	61b8      	str	r0, [r7, #24]
        break;
 8007c48:	e008      	b.n	8007c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c4e:	61bb      	str	r3, [r7, #24]
        break;
 8007c50:	e004      	b.n	8007c5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	77bb      	strb	r3, [r7, #30]
        break;
 8007c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d018      	beq.n	8007c94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085a      	lsrs	r2, r3, #1
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	441a      	add	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b0f      	cmp	r3, #15
 8007c7a:	d909      	bls.n	8007c90 <UART_SetConfig+0x4a0>
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c82:	d205      	bcs.n	8007c90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	e001      	b.n	8007c94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ca0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40007c00 	.word	0x40007c00
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	00f42400 	.word	0x00f42400

08007cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01a      	beq.n	8007dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db6:	d10a      	bne.n	8007dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	605a      	str	r2, [r3, #4]
  }
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e0c:	f7fa fcf6 	bl	80027fc <HAL_GetTick>
 8007e10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d10e      	bne.n	8007e3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f81b 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e011      	b.n	8007e62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b09c      	sub	sp, #112	; 0x70
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	603b      	str	r3, [r7, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7a:	e0a7      	b.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	f000 80a3 	beq.w	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e86:	f7fa fcb9 	bl	80027fc <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8007e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d13f      	bne.n	8007f1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ebc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2220      	movs	r2, #32
 8007f06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e068      	b.n	8007fee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d050      	beq.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f38:	d148      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
 8007f64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e6      	bne.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	613b      	str	r3, [r7, #16]
   return(result);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f96:	623a      	str	r2, [r7, #32]
 8007f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	69f9      	ldr	r1, [r7, #28]
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e5      	bne.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e010      	b.n	8007fee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	f43f af48 	beq.w	8007e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3770      	adds	r7, #112	; 0x70
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b096      	sub	sp, #88	; 0x58
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2222      	movs	r2, #34	; 0x22
 8008020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008028:	2b00      	cmp	r3, #0
 800802a:	d028      	beq.n	800807e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008030:	4a3e      	ldr	r2, [pc, #248]	; (800812c <UART_Start_Receive_DMA+0x134>)
 8008032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008038:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <UART_Start_Receive_DMA+0x138>)
 800803a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008040:	4a3c      	ldr	r2, [pc, #240]	; (8008134 <UART_Start_Receive_DMA+0x13c>)
 8008042:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	2200      	movs	r2, #0
 800804a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	4619      	mov	r1, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805c:	461a      	mov	r2, r3
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	f7fb fb04 	bl	800366c <HAL_DMA_Start_IT>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2210      	movs	r2, #16
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e051      	b.n	8008122 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d018      	beq.n	80080b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800809a:	657b      	str	r3, [r7, #84]	; 0x54
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3308      	adds	r3, #8
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080d8:	637a      	str	r2, [r7, #52]	; 0x34
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e5      	bne.n	80080b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	613b      	str	r3, [r7, #16]
   return(result);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800810c:	623a      	str	r2, [r7, #32]
 800810e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	61bb      	str	r3, [r7, #24]
   return(result);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3758      	adds	r7, #88	; 0x58
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	080082ff 	.word	0x080082ff
 8008130:	08008427 	.word	0x08008427
 8008134:	08008465 	.word	0x08008465

08008138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	; 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	60bb      	str	r3, [r7, #8]
   return(result);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6979      	ldr	r1, [r7, #20]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	613b      	str	r3, [r7, #16]
   return(result);
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e6      	bne.n	8008140 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008178:	bf00      	nop
 800817a:	3724      	adds	r7, #36	; 0x24
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b095      	sub	sp, #84	; 0x54
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	643b      	str	r3, [r7, #64]	; 0x40
 80081ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e6      	bne.n	800818c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f023 0301 	bic.w	r3, r3, #1
 80081d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e5      	bne.n	80081be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d118      	bne.n	800822c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	60bb      	str	r3, [r7, #8]
   return(result);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f023 0310 	bic.w	r3, r3, #16
 800820e:	647b      	str	r3, [r7, #68]	; 0x44
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6979      	ldr	r1, [r7, #20]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	613b      	str	r3, [r7, #16]
   return(result);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e6      	bne.n	80081fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008240:	bf00      	nop
 8008242:	3754      	adds	r7, #84	; 0x54
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b090      	sub	sp, #64	; 0x40
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d037      	beq.n	80082d4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	2200      	movs	r2, #0
 8008268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	623b      	str	r3, [r7, #32]
   return(result);
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008282:	63bb      	str	r3, [r7, #56]	; 0x38
 8008284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800828c:	633a      	str	r2, [r7, #48]	; 0x30
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
 80082b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	617b      	str	r3, [r7, #20]
   return(result);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e6      	bne.n	80082a0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082d2:	e002      	b.n	80082da <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80082d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082d6:	f7f9 fce9 	bl	8001cac <HAL_UART_TxCpltCallback>
}
 80082da:	bf00      	nop
 80082dc:	3740      	adds	r7, #64	; 0x40
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fa5d 	bl	80077b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b09c      	sub	sp, #112	; 0x70
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008314:	d071      	beq.n	80083fa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	2200      	movs	r2, #0
 800831a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800832c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800832e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008332:	66bb      	str	r3, [r7, #104]	; 0x68
 8008334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800833c:	65bb      	str	r3, [r7, #88]	; 0x58
 800833e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800834a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e6      	bne.n	800831e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	667b      	str	r3, [r7, #100]	; 0x64
 8008368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008370:	647a      	str	r2, [r7, #68]	; 0x44
 8008372:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3308      	adds	r3, #8
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	623b      	str	r3, [r7, #32]
   return(result);
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839a:	663b      	str	r3, [r7, #96]	; 0x60
 800839c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083a4:	633a      	str	r2, [r7, #48]	; 0x30
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e5      	bne.n	8008384 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ba:	2220      	movs	r2, #32
 80083bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d118      	bne.n	80083fa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f023 0310 	bic.w	r3, r3, #16
 80083dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e6:	61fb      	str	r3, [r7, #28]
 80083e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	69b9      	ldr	r1, [r7, #24]
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	617b      	str	r3, [r7, #20]
   return(result);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e6      	bne.n	80083c8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fc:	2200      	movs	r2, #0
 80083fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008404:	2b01      	cmp	r3, #1
 8008406:	d107      	bne.n	8008418 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800840e:	4619      	mov	r1, r3
 8008410:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008412:	f7ff f9e1 	bl	80077d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008416:	e002      	b.n	800841e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008418:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800841a:	f7f9 fc6b 	bl	8001cf4 <HAL_UART_RxCpltCallback>
}
 800841e:	bf00      	nop
 8008420:	3770      	adds	r7, #112	; 0x70
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843e:	2b01      	cmp	r3, #1
 8008440:	d109      	bne.n	8008456 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	b29b      	uxth	r3, r3
 800844c:	4619      	mov	r1, r3
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff f9c2 	bl	80077d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008454:	e002      	b.n	800845c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff f9b4 	bl	80077c4 <HAL_UART_RxHalfCpltCallback>
}
 800845c:	bf00      	nop
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b80      	cmp	r3, #128	; 0x80
 800848c:	d109      	bne.n	80084a2 <UART_DMAError+0x3e>
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b21      	cmp	r3, #33	; 0x21
 8008492:	d106      	bne.n	80084a2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	f7ff fe4b 	bl	8008138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d109      	bne.n	80084c4 <UART_DMAError+0x60>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b22      	cmp	r3, #34	; 0x22
 80084b4:	d106      	bne.n	80084c4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f7ff fe60 	bl	8008184 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ca:	f043 0210 	orr.w	r2, r3, #16
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f7f9 fc59 	bl	8001d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084da:	bf00      	nop
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7f9 fc43 	bl	8001d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b088      	sub	sp, #32
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	60bb      	str	r3, [r7, #8]
   return(result);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6979      	ldr	r1, [r7, #20]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	613b      	str	r3, [r7, #16]
   return(result);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e6      	bne.n	8008516 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7f9 fba9 	bl	8001cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800855a:	bf00      	nop
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008564:	b084      	sub	sp, #16
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	f107 001c 	add.w	r0, r7, #28
 8008572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2b01      	cmp	r3, #1
 800857a:	d120      	bne.n	80085be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	4b20      	ldr	r3, [pc, #128]	; (8008610 <USB_CoreInit+0xac>)
 800858e:	4013      	ands	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d105      	bne.n	80085b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa96 	bl	8008ae4 <USB_CoreReset>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e010      	b.n	80085e0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa8a 	bl	8008ae4 <USB_CoreReset>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d10b      	bne.n	80085fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f043 0206 	orr.w	r2, r3, #6
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f043 0220 	orr.w	r2, r3, #32
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800860a:	b004      	add	sp, #16
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	ffbdffbf 	.word	0xffbdffbf

08008614 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f023 0201 	bic.w	r2, r3, #1
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d115      	bne.n	8008684 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008664:	2001      	movs	r0, #1
 8008666:	f7fa f8d5 	bl	8002814 <HAL_Delay>
      ms++;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fa29 	bl	8008ac8 <USB_GetMode>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	d01e      	beq.n	80086ba <USB_SetCurrentMode+0x84>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b31      	cmp	r3, #49	; 0x31
 8008680:	d9f0      	bls.n	8008664 <USB_SetCurrentMode+0x2e>
 8008682:	e01a      	b.n	80086ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d115      	bne.n	80086b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008696:	2001      	movs	r0, #1
 8008698:	f7fa f8bc 	bl	8002814 <HAL_Delay>
      ms++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa10 	bl	8008ac8 <USB_GetMode>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <USB_SetCurrentMode+0x84>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b31      	cmp	r3, #49	; 0x31
 80086b2:	d9f0      	bls.n	8008696 <USB_SetCurrentMode+0x60>
 80086b4:	e001      	b.n	80086ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e005      	b.n	80086c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b32      	cmp	r3, #50	; 0x32
 80086be:	d101      	bne.n	80086c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086d0:	b084      	sub	sp, #16
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b086      	sub	sp, #24
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086ea:	2300      	movs	r3, #0
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	e009      	b.n	8008704 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3340      	adds	r3, #64	; 0x40
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	2200      	movs	r2, #0
 80086fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3301      	adds	r3, #1
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2b0e      	cmp	r3, #14
 8008708:	d9f2      	bls.n	80086f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800870a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11c      	bne.n	800874a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800871e:	f043 0302 	orr.w	r3, r3, #2
 8008722:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e005      	b.n	8008756 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800875c:	461a      	mov	r2, r3
 800875e:	2300      	movs	r3, #0
 8008760:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	4619      	mov	r1, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008770:	461a      	mov	r2, r3
 8008772:	680b      	ldr	r3, [r1, #0]
 8008774:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10c      	bne.n	8008796 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008782:	2100      	movs	r1, #0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f965 	bl	8008a54 <USB_SetDevSpeed>
 800878a:	e008      	b.n	800879e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800878c:	2101      	movs	r1, #1
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f960 	bl	8008a54 <USB_SetDevSpeed>
 8008794:	e003      	b.n	800879e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008796:	2103      	movs	r1, #3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f95b 	bl	8008a54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800879e:	2110      	movs	r1, #16
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8f3 	bl	800898c <USB_FlushTxFifo>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f91f 	bl	80089f4 <USB_FlushRxFifo>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c6:	461a      	mov	r2, r3
 80087c8:	2300      	movs	r3, #0
 80087ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	461a      	mov	r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	461a      	mov	r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e043      	b.n	8008872 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008800:	d118      	bne.n	8008834 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	461a      	mov	r2, r3
 8008816:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	e013      	b.n	8008846 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	461a      	mov	r2, r3
 800882c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e008      	b.n	8008846 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	461a      	mov	r2, r3
 8008842:	2300      	movs	r3, #0
 8008844:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008852:	461a      	mov	r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	461a      	mov	r2, r3
 8008866:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800886a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	3301      	adds	r3, #1
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	429a      	cmp	r2, r3
 8008878:	d3b7      	bcc.n	80087ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800887a:	2300      	movs	r3, #0
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	e043      	b.n	8008908 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008896:	d118      	bne.n	80088ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	461a      	mov	r2, r3
 80088ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e013      	b.n	80088dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	e008      	b.n	80088dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	461a      	mov	r2, r3
 80088d8:	2300      	movs	r3, #0
 80088da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	461a      	mov	r2, r3
 80088ea:	2300      	movs	r3, #0
 80088ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	461a      	mov	r2, r3
 80088fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008900:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	3301      	adds	r3, #1
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3b7      	bcc.n	8008880 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800891e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008922:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008930:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d105      	bne.n	8008944 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f043 0210 	orr.w	r2, r3, #16
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <USB_DevInit+0x2b4>)
 800894a:	4313      	orrs	r3, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	f043 0208 	orr.w	r2, r3, #8
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d105      	bne.n	8008974 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699a      	ldr	r2, [r3, #24]
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <USB_DevInit+0x2b8>)
 800896e:	4313      	orrs	r3, r2
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008980:	b004      	add	sp, #16
 8008982:	4770      	bx	lr
 8008984:	803c3800 	.word	0x803c3800
 8008988:	40000004 	.word	0x40000004

0800898c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a13      	ldr	r2, [pc, #76]	; (80089f0 <USB_FlushTxFifo+0x64>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e01b      	b.n	80089e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	daf2      	bge.n	800899a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	019b      	lsls	r3, r3, #6
 80089bc:	f043 0220 	orr.w	r2, r3, #32
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a08      	ldr	r2, [pc, #32]	; (80089f0 <USB_FlushTxFifo+0x64>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e006      	b.n	80089e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b20      	cmp	r3, #32
 80089e0:	d0f0      	beq.n	80089c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	00030d40 	.word	0x00030d40

080089f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <USB_FlushRxFifo+0x5c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d901      	bls.n	8008a12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e018      	b.n	8008a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	daf2      	bge.n	8008a00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2210      	movs	r2, #16
 8008a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4a08      	ldr	r2, [pc, #32]	; (8008a50 <USB_FlushRxFifo+0x5c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d901      	bls.n	8008a36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e006      	b.n	8008a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0310 	and.w	r3, r3, #16
 8008a3e:	2b10      	cmp	r3, #16
 8008a40:	d0f0      	beq.n	8008a24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	00030d40 	.word	0x00030d40

08008a54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a74:	4313      	orrs	r3, r2
 8008a76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
 8008ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <USB_CoreReset+0x64>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d901      	bls.n	8008b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e01b      	b.n	8008b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	daf2      	bge.n	8008af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f043 0201 	orr.w	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a09      	ldr	r2, [pc, #36]	; (8008b48 <USB_CoreReset+0x64>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d901      	bls.n	8008b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e006      	b.n	8008b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d0f0      	beq.n	8008b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	00030d40 	.word	0x00030d40

08008b4c <arm_rfft_fast_init_f32>:
 8008b4c:	084b      	lsrs	r3, r1, #1
 8008b4e:	2b80      	cmp	r3, #128	; 0x80
 8008b50:	b430      	push	{r4, r5}
 8008b52:	8201      	strh	r1, [r0, #16]
 8008b54:	8003      	strh	r3, [r0, #0]
 8008b56:	d070      	beq.n	8008c3a <arm_rfft_fast_init_f32+0xee>
 8008b58:	d916      	bls.n	8008b88 <arm_rfft_fast_init_f32+0x3c>
 8008b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5e:	d05f      	beq.n	8008c20 <arm_rfft_fast_init_f32+0xd4>
 8008b60:	d936      	bls.n	8008bd0 <arm_rfft_fast_init_f32+0x84>
 8008b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b66:	d026      	beq.n	8008bb6 <arm_rfft_fast_init_f32+0x6a>
 8008b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b6c:	d112      	bne.n	8008b94 <arm_rfft_fast_init_f32+0x48>
 8008b6e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8008b72:	4c38      	ldr	r4, [pc, #224]	; (8008c54 <arm_rfft_fast_init_f32+0x108>)
 8008b74:	4938      	ldr	r1, [pc, #224]	; (8008c58 <arm_rfft_fast_init_f32+0x10c>)
 8008b76:	2300      	movs	r3, #0
 8008b78:	4a38      	ldr	r2, [pc, #224]	; (8008c5c <arm_rfft_fast_init_f32+0x110>)
 8008b7a:	8185      	strh	r5, [r0, #12]
 8008b7c:	6084      	str	r4, [r0, #8]
 8008b7e:	6041      	str	r1, [r0, #4]
 8008b80:	6142      	str	r2, [r0, #20]
 8008b82:	4618      	mov	r0, r3
 8008b84:	bc30      	pop	{r4, r5}
 8008b86:	4770      	bx	lr
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d031      	beq.n	8008bf0 <arm_rfft_fast_init_f32+0xa4>
 8008b8c:	2b40      	cmp	r3, #64	; 0x40
 8008b8e:	d006      	beq.n	8008b9e <arm_rfft_fast_init_f32+0x52>
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d039      	beq.n	8008c08 <arm_rfft_fast_init_f32+0xbc>
 8008b94:	f04f 33ff 	mov.w	r3, #4294967295
 8008b98:	bc30      	pop	{r4, r5}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	4770      	bx	lr
 8008b9e:	2538      	movs	r5, #56	; 0x38
 8008ba0:	4c2f      	ldr	r4, [pc, #188]	; (8008c60 <arm_rfft_fast_init_f32+0x114>)
 8008ba2:	4930      	ldr	r1, [pc, #192]	; (8008c64 <arm_rfft_fast_init_f32+0x118>)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4a30      	ldr	r2, [pc, #192]	; (8008c68 <arm_rfft_fast_init_f32+0x11c>)
 8008ba8:	8185      	strh	r5, [r0, #12]
 8008baa:	6084      	str	r4, [r0, #8]
 8008bac:	6041      	str	r1, [r0, #4]
 8008bae:	6142      	str	r2, [r0, #20]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bc30      	pop	{r4, r5}
 8008bb4:	4770      	bx	lr
 8008bb6:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8008bba:	4c2c      	ldr	r4, [pc, #176]	; (8008c6c <arm_rfft_fast_init_f32+0x120>)
 8008bbc:	492c      	ldr	r1, [pc, #176]	; (8008c70 <arm_rfft_fast_init_f32+0x124>)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4a2c      	ldr	r2, [pc, #176]	; (8008c74 <arm_rfft_fast_init_f32+0x128>)
 8008bc2:	8185      	strh	r5, [r0, #12]
 8008bc4:	6084      	str	r4, [r0, #8]
 8008bc6:	6041      	str	r1, [r0, #4]
 8008bc8:	6142      	str	r2, [r0, #20]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	bc30      	pop	{r4, r5}
 8008bce:	4770      	bx	lr
 8008bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd4:	d1de      	bne.n	8008b94 <arm_rfft_fast_init_f32+0x48>
 8008bd6:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8008bda:	4c27      	ldr	r4, [pc, #156]	; (8008c78 <arm_rfft_fast_init_f32+0x12c>)
 8008bdc:	4927      	ldr	r1, [pc, #156]	; (8008c7c <arm_rfft_fast_init_f32+0x130>)
 8008bde:	2300      	movs	r3, #0
 8008be0:	4a27      	ldr	r2, [pc, #156]	; (8008c80 <arm_rfft_fast_init_f32+0x134>)
 8008be2:	8185      	strh	r5, [r0, #12]
 8008be4:	6084      	str	r4, [r0, #8]
 8008be6:	6041      	str	r1, [r0, #4]
 8008be8:	6142      	str	r2, [r0, #20]
 8008bea:	4618      	mov	r0, r3
 8008bec:	bc30      	pop	{r4, r5}
 8008bee:	4770      	bx	lr
 8008bf0:	2530      	movs	r5, #48	; 0x30
 8008bf2:	4c24      	ldr	r4, [pc, #144]	; (8008c84 <arm_rfft_fast_init_f32+0x138>)
 8008bf4:	4924      	ldr	r1, [pc, #144]	; (8008c88 <arm_rfft_fast_init_f32+0x13c>)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4a24      	ldr	r2, [pc, #144]	; (8008c8c <arm_rfft_fast_init_f32+0x140>)
 8008bfa:	8185      	strh	r5, [r0, #12]
 8008bfc:	6084      	str	r4, [r0, #8]
 8008bfe:	6041      	str	r1, [r0, #4]
 8008c00:	6142      	str	r2, [r0, #20]
 8008c02:	4618      	mov	r0, r3
 8008c04:	bc30      	pop	{r4, r5}
 8008c06:	4770      	bx	lr
 8008c08:	2514      	movs	r5, #20
 8008c0a:	4c21      	ldr	r4, [pc, #132]	; (8008c90 <arm_rfft_fast_init_f32+0x144>)
 8008c0c:	4921      	ldr	r1, [pc, #132]	; (8008c94 <arm_rfft_fast_init_f32+0x148>)
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4a21      	ldr	r2, [pc, #132]	; (8008c98 <arm_rfft_fast_init_f32+0x14c>)
 8008c12:	8185      	strh	r5, [r0, #12]
 8008c14:	6084      	str	r4, [r0, #8]
 8008c16:	6041      	str	r1, [r0, #4]
 8008c18:	6142      	str	r2, [r0, #20]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	bc30      	pop	{r4, r5}
 8008c1e:	4770      	bx	lr
 8008c20:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8008c24:	4c1d      	ldr	r4, [pc, #116]	; (8008c9c <arm_rfft_fast_init_f32+0x150>)
 8008c26:	491e      	ldr	r1, [pc, #120]	; (8008ca0 <arm_rfft_fast_init_f32+0x154>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ca4 <arm_rfft_fast_init_f32+0x158>)
 8008c2c:	8185      	strh	r5, [r0, #12]
 8008c2e:	6084      	str	r4, [r0, #8]
 8008c30:	6041      	str	r1, [r0, #4]
 8008c32:	6142      	str	r2, [r0, #20]
 8008c34:	4618      	mov	r0, r3
 8008c36:	bc30      	pop	{r4, r5}
 8008c38:	4770      	bx	lr
 8008c3a:	25d0      	movs	r5, #208	; 0xd0
 8008c3c:	4c1a      	ldr	r4, [pc, #104]	; (8008ca8 <arm_rfft_fast_init_f32+0x15c>)
 8008c3e:	491b      	ldr	r1, [pc, #108]	; (8008cac <arm_rfft_fast_init_f32+0x160>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <arm_rfft_fast_init_f32+0x164>)
 8008c44:	8185      	strh	r5, [r0, #12]
 8008c46:	6084      	str	r4, [r0, #8]
 8008c48:	6041      	str	r1, [r0, #4]
 8008c4a:	6142      	str	r2, [r0, #20]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bc30      	pop	{r4, r5}
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	0801ccec 	.word	0x0801ccec
 8008c58:	0800dee4 	.word	0x0800dee4
 8008c5c:	08014054 	.word	0x08014054
 8008c60:	08011fe4 	.word	0x08011fe4
 8008c64:	0801eaac 	.word	0x0801eaac
 8008c68:	08020f9c 	.word	0x08020f9c
 8008c6c:	0801a9d4 	.word	0x0801a9d4
 8008c70:	080188d4 	.word	0x080188d4
 8008c74:	08012054 	.word	0x08012054
 8008c78:	08020c2c 	.word	0x08020c2c
 8008c7c:	08018054 	.word	0x08018054
 8008c80:	0801ecac 	.word	0x0801ecac
 8008c84:	0801b88c 	.word	0x0801b88c
 8008c88:	0801a8d4 	.word	0x0801a8d4
 8008c8c:	08011ee4 	.word	0x08011ee4
 8008c90:	0801b7e4 	.word	0x0801b7e4
 8008c94:	08018854 	.word	0x08018854
 8008c98:	0801b80c 	.word	0x0801b80c
 8008c9c:	0801f4ac 	.word	0x0801f4ac
 8008ca0:	0801bcec 	.word	0x0801bcec
 8008ca4:	0801f82c 	.word	0x0801f82c
 8008ca8:	0802119c 	.word	0x0802119c
 8008cac:	0801b8ec 	.word	0x0801b8ec
 8008cb0:	0802082c 	.word	0x0802082c

08008cb4 <arm_rfft_fast_f32>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	8a05      	ldrh	r5, [r0, #16]
 8008cba:	4606      	mov	r6, r0
 8008cbc:	4617      	mov	r7, r2
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	086d      	lsrs	r5, r5, #1
 8008cc2:	8005      	strh	r5, [r0, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d15e      	bne.n	8008d86 <arm_rfft_fast_f32+0xd2>
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2301      	movs	r3, #1
 8008ccc:	f000 fbde 	bl	800948c <arm_cfft_f32>
 8008cd0:	edd4 7a00 	vldr	s15, [r4]
 8008cd4:	ed94 7a01 	vldr	s14, [r4, #4]
 8008cd8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ce0:	8832      	ldrh	r2, [r6, #0]
 8008ce2:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008ce6:	6975      	ldr	r5, [r6, #20]
 8008ce8:	3a01      	subs	r2, #1
 8008cea:	eeb0 3a46 	vmov.f32	s6, s12
 8008cee:	3510      	adds	r5, #16
 8008cf0:	f107 0610 	add.w	r6, r7, #16
 8008cf4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008cf8:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8008cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d00:	f104 0310 	add.w	r3, r4, #16
 8008d04:	3808      	subs	r0, #8
 8008d06:	ee26 7a86 	vmul.f32	s14, s13, s12
 8008d0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008d0e:	ed87 7a00 	vstr	s14, [r7]
 8008d12:	edc7 7a01 	vstr	s15, [r7, #4]
 8008d16:	ed90 7a02 	vldr	s14, [r0, #8]
 8008d1a:	3a01      	subs	r2, #1
 8008d1c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8008d20:	f1a0 0008 	sub.w	r0, r0, #8
 8008d24:	ed15 6a02 	vldr	s12, [r5, #-8]
 8008d28:	f103 0308 	add.w	r3, r3, #8
 8008d2c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008d30:	edd0 3a05 	vldr	s7, [r0, #20]
 8008d34:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008d38:	ee77 4a26 	vadd.f32	s9, s14, s13
 8008d3c:	ed55 5a01 	vldr	s11, [r5, #-4]
 8008d40:	f106 0608 	add.w	r6, r6, #8
 8008d44:	ee66 6a27 	vmul.f32	s13, s12, s15
 8008d48:	f105 0508 	add.w	r5, r5, #8
 8008d4c:	ee33 4a85 	vadd.f32	s8, s7, s10
 8008d50:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008d54:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008d58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008d5c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008d60:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008d64:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008d68:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008d6c:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8008d70:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008d74:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008d78:	ed46 7a03 	vstr	s15, [r6, #-12]
 8008d7c:	ed06 7a04 	vstr	s14, [r6, #-16]
 8008d80:	d1c9      	bne.n	8008d16 <arm_rfft_fast_f32+0x62>
 8008d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d86:	edd1 7a00 	vldr	s15, [r1]
 8008d8a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008d8e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008d92:	1e68      	subs	r0, r5, #1
 8008d94:	6975      	ldr	r5, [r6, #20]
 8008d96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d9a:	00c1      	lsls	r1, r0, #3
 8008d9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008da0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008da4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008da8:	ed82 7a00 	vstr	s14, [r2]
 8008dac:	edc2 7a01 	vstr	s15, [r2, #4]
 8008db0:	b3e0      	cbz	r0, 8008e2c <arm_rfft_fast_f32+0x178>
 8008db2:	3908      	subs	r1, #8
 8008db4:	f104 0210 	add.w	r2, r4, #16
 8008db8:	3510      	adds	r5, #16
 8008dba:	440c      	add	r4, r1
 8008dbc:	f107 0110 	add.w	r1, r7, #16
 8008dc0:	ed94 7a02 	vldr	s14, [r4, #8]
 8008dc4:	3801      	subs	r0, #1
 8008dc6:	ed52 6a02 	vldr	s13, [r2, #-8]
 8008dca:	f1a4 0408 	sub.w	r4, r4, #8
 8008dce:	ed15 6a02 	vldr	s12, [r5, #-8]
 8008dd2:	f102 0208 	add.w	r2, r2, #8
 8008dd6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008dda:	ed94 4a05 	vldr	s8, [r4, #20]
 8008dde:	ed12 5a03 	vldr	s10, [r2, #-12]
 8008de2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8008de6:	ed55 5a01 	vldr	s11, [r5, #-4]
 8008dea:	f101 0108 	add.w	r1, r1, #8
 8008dee:	ee26 3a27 	vmul.f32	s6, s12, s15
 8008df2:	f105 0508 	add.w	r5, r5, #8
 8008df6:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008dfa:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008dfe:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008e02:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008e06:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008e0a:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008e0e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008e12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008e16:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8008e1a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008e1e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008e22:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008e26:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008e2a:	d1c9      	bne.n	8008dc0 <arm_rfft_fast_f32+0x10c>
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4639      	mov	r1, r7
 8008e30:	4630      	mov	r0, r6
 8008e32:	2301      	movs	r3, #1
 8008e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	f000 bb28 	b.w	800948c <arm_cfft_f32>

08008e3c <arm_cfft_radix8by2_f32>:
 8008e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e40:	4607      	mov	r7, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	ed2d 8b06 	vpush	{d8-d10}
 8008e48:	f8b7 e000 	ldrh.w	lr, [r7]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008e52:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008e56:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008e5a:	f000 80b0 	beq.w	8008fbe <arm_cfft_radix8by2_f32+0x182>
 8008e5e:	008b      	lsls	r3, r1, #2
 8008e60:	3210      	adds	r2, #16
 8008e62:	f100 0610 	add.w	r6, r0, #16
 8008e66:	f108 0510 	add.w	r5, r8, #16
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	18c4      	adds	r4, r0, r3
 8008e6e:	4443      	add	r3, r8
 8008e70:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008e74:	f1be 0e01 	subs.w	lr, lr, #1
 8008e78:	ed56 4a04 	vldr	s9, [r6, #-16]
 8008e7c:	f104 0410 	add.w	r4, r4, #16
 8008e80:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008e84:	f106 0610 	add.w	r6, r6, #16
 8008e88:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8008e8c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008e90:	ed55 2a01 	vldr	s5, [r5, #-4]
 8008e94:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008e98:	ed53 0a04 	vldr	s1, [r3, #-16]
 8008e9c:	f102 0210 	add.w	r2, r2, #16
 8008ea0:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008ea4:	f105 0510 	add.w	r5, r5, #16
 8008ea8:	ed13 3a02 	vldr	s6, [r3, #-8]
 8008eac:	f103 0310 	add.w	r3, r3, #16
 8008eb0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8008eb4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8008eb8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8008ebc:	ee33 8a83 	vadd.f32	s16, s7, s6
 8008ec0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8008ec4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8008ec8:	ee34 0a06 	vadd.f32	s0, s8, s12
 8008ecc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8008ed0:	ee76 aa87 	vadd.f32	s21, s13, s14
 8008ed4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008ed8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008edc:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8008ee0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8008ee4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8008ee8:	ee71 8a05 	vadd.f32	s17, s2, s10
 8008eec:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8008ef0:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8008ef4:	ee72 9a22 	vadd.f32	s19, s4, s5
 8008ef8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008efc:	ee35 5a41 	vsub.f32	s10, s10, s2
 8008f00:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8008f04:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8008f08:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008f0c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8008f10:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8008f14:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8008f18:	ee72 7a62 	vsub.f32	s15, s4, s5
 8008f1c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8008f20:	ee73 2a63 	vsub.f32	s5, s6, s7
 8008f24:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8008f28:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8008f2c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8008f30:	ee24 3a84 	vmul.f32	s6, s9, s8
 8008f34:	ee27 2a26 	vmul.f32	s4, s14, s13
 8008f38:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8008f3c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8008f40:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008f44:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008f48:	ee65 6a26 	vmul.f32	s13, s10, s13
 8008f4c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8008f50:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008f54:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008f58:	ee33 4a02 	vadd.f32	s8, s6, s4
 8008f5c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008f60:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8008f64:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8008f68:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8008f6c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8008f70:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8008f74:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8008f78:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8008f7c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8008f80:	ee61 5a87 	vmul.f32	s11, s3, s14
 8008f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f88:	ee22 5a87 	vmul.f32	s10, s5, s14
 8008f8c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008f90:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008f94:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8008f98:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008f9c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008fa0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008fa4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008fa8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8008fac:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8008fb0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8008fb4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8008fb8:	f47f af5a 	bne.w	8008e70 <arm_cfft_radix8by2_f32+0x34>
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	b28c      	uxth	r4, r1
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f000 fada 	bl	800957c <arm_radix8_butterfly_f32>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	4640      	mov	r0, r8
 8008fce:	2302      	movs	r3, #2
 8008fd0:	ecbd 8b06 	vpop	{d8-d10}
 8008fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd8:	f000 bad0 	b.w	800957c <arm_radix8_butterfly_f32>

08008fdc <arm_cfft_radix8by4_f32>:
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	ed2d 8b06 	vpush	{d8-d10}
 8008fe4:	8804      	ldrh	r4, [r0, #0]
 8008fe6:	b08f      	sub	sp, #60	; 0x3c
 8008fe8:	ed91 6a00 	vldr	s12, [r1]
 8008fec:	460a      	mov	r2, r1
 8008fee:	0864      	lsrs	r4, r4, #1
 8008ff0:	ed91 7a01 	vldr	s14, [r1, #4]
 8008ff4:	9101      	str	r1, [sp, #4]
 8008ff6:	00a3      	lsls	r3, r4, #2
 8008ff8:	6841      	ldr	r1, [r0, #4]
 8008ffa:	0864      	lsrs	r4, r4, #1
 8008ffc:	900c      	str	r0, [sp, #48]	; 0x30
 8008ffe:	9205      	str	r2, [sp, #20]
 8009000:	f101 0610 	add.w	r6, r1, #16
 8009004:	4625      	mov	r5, r4
 8009006:	940b      	str	r4, [sp, #44]	; 0x2c
 8009008:	f101 0408 	add.w	r4, r1, #8
 800900c:	9602      	str	r6, [sp, #8]
 800900e:	9407      	str	r4, [sp, #28]
 8009010:	18d4      	adds	r4, r2, r3
 8009012:	1eaa      	subs	r2, r5, #2
 8009014:	f101 0518 	add.w	r5, r1, #24
 8009018:	18e0      	adds	r0, r4, r3
 800901a:	edd4 4a00 	vldr	s9, [r4]
 800901e:	ed94 4a01 	vldr	s8, [r4, #4]
 8009022:	46a6      	mov	lr, r4
 8009024:	edd0 6a00 	vldr	s13, [r0]
 8009028:	18c7      	adds	r7, r0, r3
 800902a:	edd0 7a01 	vldr	s15, [r0, #4]
 800902e:	46a0      	mov	r8, r4
 8009030:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009034:	ed97 5a00 	vldr	s10, [r7]
 8009038:	ee76 6a66 	vsub.f32	s13, s12, s13
 800903c:	4604      	mov	r4, r0
 800903e:	9506      	str	r5, [sp, #24]
 8009040:	4605      	mov	r5, r0
 8009042:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8009046:	900a      	str	r0, [sp, #40]	; 0x28
 8009048:	9801      	ldr	r0, [sp, #4]
 800904a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800904e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009052:	ed97 3a01 	vldr	s6, [r7, #4]
 8009056:	ee72 2a85 	vadd.f32	s5, s5, s10
 800905a:	46bc      	mov	ip, r7
 800905c:	ee76 3a84 	vadd.f32	s7, s13, s8
 8009060:	9704      	str	r7, [sp, #16]
 8009062:	ee36 7a44 	vsub.f32	s14, s12, s8
 8009066:	f8cd e00c 	str.w	lr, [sp, #12]
 800906a:	ee12 9a90 	vmov	r9, s5
 800906e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009072:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009076:	1f3e      	subs	r6, r7, #4
 8009078:	f840 9b08 	str.w	r9, [r0], #8
 800907c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8009080:	edde 2a01 	vldr	s5, [lr, #4]
 8009084:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8009088:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800908c:	eddc 4a01 	vldr	s9, [ip, #4]
 8009090:	ee36 6a22 	vadd.f32	s12, s12, s5
 8009094:	9001      	str	r0, [sp, #4]
 8009096:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	ee13 9a90 	vmov	r9, s7
 80090a0:	ee37 7a43 	vsub.f32	s14, s14, s6
 80090a4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80090a8:	f1ae 0704 	sub.w	r7, lr, #4
 80090ac:	ee74 4a05 	vadd.f32	s9, s8, s10
 80090b0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80090b4:	ed80 6a01 	vstr	s12, [r0, #4]
 80090b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80090bc:	f848 9b08 	str.w	r9, [r8], #8
 80090c0:	edce 4a01 	vstr	s9, [lr, #4]
 80090c4:	ee15 ea90 	vmov	lr, s11
 80090c8:	f844 eb08 	str.w	lr, [r4], #8
 80090cc:	ee16 ea90 	vmov	lr, s13
 80090d0:	9408      	str	r4, [sp, #32]
 80090d2:	462c      	mov	r4, r5
 80090d4:	ed85 7a01 	vstr	s14, [r5, #4]
 80090d8:	9d04      	ldr	r5, [sp, #16]
 80090da:	f84c eb08 	str.w	lr, [ip], #8
 80090de:	edc5 7a01 	vstr	s15, [r5, #4]
 80090e2:	0855      	lsrs	r5, r2, #1
 80090e4:	9509      	str	r5, [sp, #36]	; 0x24
 80090e6:	f000 8130 	beq.w	800934a <arm_cfft_radix8by4_f32+0x36e>
 80090ea:	9805      	ldr	r0, [sp, #20]
 80090ec:	3b08      	subs	r3, #8
 80090ee:	46ab      	mov	fp, r5
 80090f0:	f1a4 020c 	sub.w	r2, r4, #12
 80090f4:	f100 0510 	add.w	r5, r0, #16
 80090f8:	f101 0920 	add.w	r9, r1, #32
 80090fc:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8009100:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009104:	4433      	add	r3, r6
 8009106:	3410      	adds	r4, #16
 8009108:	4660      	mov	r0, ip
 800910a:	4641      	mov	r1, r8
 800910c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8009110:	ed54 6a02 	vldr	s13, [r4, #-8]
 8009114:	f1bb 0b01 	subs.w	fp, fp, #1
 8009118:	ed55 5a02 	vldr	s11, [r5, #-8]
 800911c:	f10a 0a08 	add.w	sl, sl, #8
 8009120:	edd1 7a00 	vldr	s15, [r1]
 8009124:	f105 0508 	add.w	r5, r5, #8
 8009128:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800912c:	edd0 2a00 	vldr	s5, [r0]
 8009130:	ed14 7a01 	vldr	s14, [r4, #-4]
 8009134:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8009138:	ed55 6a03 	vldr	s13, [r5, #-12]
 800913c:	f1a2 0208 	sub.w	r2, r2, #8
 8009140:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8009144:	ed90 2a01 	vldr	s4, [r0, #4]
 8009148:	ee36 5a87 	vadd.f32	s10, s13, s14
 800914c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009150:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009154:	f109 0910 	add.w	r9, r9, #16
 8009158:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800915c:	f104 0408 	add.w	r4, r4, #8
 8009160:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8009164:	f10e 0e18 	add.w	lr, lr, #24
 8009168:	ee37 3a67 	vsub.f32	s6, s14, s15
 800916c:	f1a3 0308 	sub.w	r3, r3, #8
 8009170:	ed45 6a04 	vstr	s13, [r5, #-16]
 8009174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009178:	edd1 6a01 	vldr	s13, [r1, #4]
 800917c:	ee75 1a86 	vadd.f32	s3, s11, s12
 8009180:	edd0 4a01 	vldr	s9, [r0, #4]
 8009184:	ee33 3a22 	vadd.f32	s6, s6, s5
 8009188:	ee75 6a26 	vadd.f32	s13, s10, s13
 800918c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8009190:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009194:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009198:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800919c:	ee35 5a42 	vsub.f32	s10, s10, s4
 80091a0:	ed45 6a03 	vstr	s13, [r5, #-12]
 80091a4:	ee36 2a02 	vadd.f32	s4, s12, s4
 80091a8:	edd6 7a00 	vldr	s15, [r6]
 80091ac:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80091b0:	ed97 1a00 	vldr	s2, [r7]
 80091b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80091b8:	ed92 8a04 	vldr	s16, [r2, #16]
 80091bc:	ee71 8a27 	vadd.f32	s17, s2, s15
 80091c0:	ed93 aa04 	vldr	s20, [r3, #16]
 80091c4:	ed16 7a01 	vldr	s14, [r6, #-4]
 80091c8:	ee71 7a67 	vsub.f32	s15, s2, s15
 80091cc:	ed57 0a01 	vldr	s1, [r7, #-4]
 80091d0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80091d4:	ee38 6a88 	vadd.f32	s12, s17, s16
 80091d8:	edd3 9a03 	vldr	s19, [r3, #12]
 80091dc:	ee30 0a87 	vadd.f32	s0, s1, s14
 80091e0:	ed92 9a03 	vldr	s18, [r2, #12]
 80091e4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80091e8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 80091ec:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80091f0:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80091f4:	ee16 ca10 	vmov	ip, s12
 80091f8:	ee30 6a49 	vsub.f32	s12, s0, s18
 80091fc:	ee77 4a01 	vadd.f32	s9, s14, s2
 8009200:	f847 c908 	str.w	ip, [r7], #-8
 8009204:	ee34 4a29 	vadd.f32	s8, s8, s19
 8009208:	edd2 8a03 	vldr	s17, [r2, #12]
 800920c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8009210:	ed93 8a03 	vldr	s16, [r3, #12]
 8009214:	ee71 0a47 	vsub.f32	s1, s2, s14
 8009218:	ee30 0a28 	vadd.f32	s0, s0, s17
 800921c:	ee39 1a67 	vsub.f32	s2, s18, s15
 8009220:	ee36 6a69 	vsub.f32	s12, s12, s19
 8009224:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009228:	ee75 5aca 	vsub.f32	s11, s11, s20
 800922c:	ed87 0a01 	vstr	s0, [r7, #4]
 8009230:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8009234:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8009238:	ee21 8a80 	vmul.f32	s16, s3, s0
 800923c:	ee23 7a26 	vmul.f32	s14, s6, s13
 8009240:	ee64 7a26 	vmul.f32	s15, s8, s13
 8009244:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8009248:	ee24 4a00 	vmul.f32	s8, s8, s0
 800924c:	ee23 3a00 	vmul.f32	s6, s6, s0
 8009250:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009254:	ee24 0a80 	vmul.f32	s0, s9, s0
 8009258:	ee38 7a07 	vadd.f32	s14, s16, s14
 800925c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8009260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009264:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009268:	ee17 ca10 	vmov	ip, s14
 800926c:	f841 cb08 	str.w	ip, [r1], #8
 8009270:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009274:	ed82 0a04 	vstr	s0, [r2, #16]
 8009278:	edc2 6a03 	vstr	s13, [r2, #12]
 800927c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8009280:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8009284:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8009288:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800928c:	ee65 4a27 	vmul.f32	s9, s10, s15
 8009290:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8009294:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8009298:	ee66 7a27 	vmul.f32	s15, s12, s15
 800929c:	ee25 5a26 	vmul.f32	s10, s10, s13
 80092a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80092a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092a8:	ee34 6a24 	vadd.f32	s12, s8, s9
 80092ac:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80092b0:	ee35 5a63 	vsub.f32	s10, s10, s7
 80092b4:	ee17 ca90 	vmov	ip, s15
 80092b8:	ed04 6a04 	vstr	s12, [r4, #-16]
 80092bc:	ed04 5a03 	vstr	s10, [r4, #-12]
 80092c0:	f846 c908 	str.w	ip, [r6], #-8
 80092c4:	edc6 6a01 	vstr	s13, [r6, #4]
 80092c8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 80092cc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 80092d0:	ee62 5a27 	vmul.f32	s11, s4, s15
 80092d4:	ee22 6a87 	vmul.f32	s12, s5, s14
 80092d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80092dc:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80092e0:	ee61 6a07 	vmul.f32	s13, s2, s14
 80092e4:	ee20 7a87 	vmul.f32	s14, s1, s14
 80092e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80092ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80092f0:	ee35 6a86 	vadd.f32	s12, s11, s12
 80092f4:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80092f8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80092fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009300:	ee16 ca10 	vmov	ip, s12
 8009304:	f840 cb08 	str.w	ip, [r0], #8
 8009308:	ed40 2a01 	vstr	s5, [r0, #-4]
 800930c:	edc3 0a04 	vstr	s1, [r3, #16]
 8009310:	edc3 7a03 	vstr	s15, [r3, #12]
 8009314:	f47f aefc 	bne.w	8009110 <arm_cfft_radix8by4_f32+0x134>
 8009318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800931a:	9802      	ldr	r0, [sp, #8]
 800931c:	00cb      	lsls	r3, r1, #3
 800931e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009322:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009326:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800932a:	4498      	add	r8, r3
 800932c:	449c      	add	ip, r3
 800932e:	9102      	str	r1, [sp, #8]
 8009330:	9901      	ldr	r1, [sp, #4]
 8009332:	4419      	add	r1, r3
 8009334:	9101      	str	r1, [sp, #4]
 8009336:	9907      	ldr	r1, [sp, #28]
 8009338:	4419      	add	r1, r3
 800933a:	9107      	str	r1, [sp, #28]
 800933c:	9908      	ldr	r1, [sp, #32]
 800933e:	4419      	add	r1, r3
 8009340:	9b06      	ldr	r3, [sp, #24]
 8009342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009346:	9108      	str	r1, [sp, #32]
 8009348:	9306      	str	r3, [sp, #24]
 800934a:	9a01      	ldr	r2, [sp, #4]
 800934c:	2304      	movs	r3, #4
 800934e:	9e08      	ldr	r6, [sp, #32]
 8009350:	edd2 7a00 	vldr	s15, [r2]
 8009354:	ed96 7a00 	vldr	s14, [r6]
 8009358:	edd8 2a00 	vldr	s5, [r8]
 800935c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8009360:	ed9c 3a00 	vldr	s6, [ip]
 8009364:	ed92 6a01 	vldr	s12, [r2, #4]
 8009368:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800936c:	edd6 6a01 	vldr	s13, [r6, #4]
 8009370:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8009374:	ed9c 2a01 	vldr	s4, [ip, #4]
 8009378:	ee36 5a26 	vadd.f32	s10, s12, s13
 800937c:	edd8 7a01 	vldr	s15, [r8, #4]
 8009380:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009384:	9d02      	ldr	r5, [sp, #8]
 8009386:	ee34 6a83 	vadd.f32	s12, s9, s6
 800938a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800938e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8009392:	9805      	ldr	r0, [sp, #20]
 8009394:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8009398:	4621      	mov	r1, r4
 800939a:	ed82 6a00 	vstr	s12, [r2]
 800939e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 80093a2:	edd8 3a01 	vldr	s7, [r8, #4]
 80093a6:	ee75 5a67 	vsub.f32	s11, s10, s15
 80093aa:	eddc 1a01 	vldr	s3, [ip, #4]
 80093ae:	ee34 4a42 	vsub.f32	s8, s8, s4
 80093b2:	ee75 3a23 	vadd.f32	s7, s10, s7
 80093b6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80093ba:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80093be:	ee33 5aa1 	vadd.f32	s10, s7, s3
 80093c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093c6:	ee36 6a43 	vsub.f32	s12, s12, s6
 80093ca:	ed82 5a01 	vstr	s10, [r2, #4]
 80093ce:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80093d2:	9a07      	ldr	r2, [sp, #28]
 80093d4:	ee77 7a02 	vadd.f32	s15, s14, s4
 80093d8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80093dc:	edd2 2a00 	vldr	s5, [r2]
 80093e0:	ed92 5a01 	vldr	s10, [r2, #4]
 80093e4:	ee64 3a22 	vmul.f32	s7, s8, s5
 80093e8:	ee24 4a05 	vmul.f32	s8, s8, s10
 80093ec:	ee24 5a85 	vmul.f32	s10, s9, s10
 80093f0:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80093f4:	ee33 5a85 	vadd.f32	s10, s7, s10
 80093f8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80093fc:	ed88 5a00 	vstr	s10, [r8]
 8009400:	edc8 4a01 	vstr	s9, [r8, #4]
 8009404:	edd5 4a01 	vldr	s9, [r5, #4]
 8009408:	edd5 6a00 	vldr	s13, [r5]
 800940c:	9d06      	ldr	r5, [sp, #24]
 800940e:	ee26 5a26 	vmul.f32	s10, s12, s13
 8009412:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009416:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800941a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800941e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8009422:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009426:	ed86 6a01 	vstr	s12, [r6, #4]
 800942a:	edc6 5a00 	vstr	s11, [r6]
 800942e:	edd5 5a01 	vldr	s11, [r5, #4]
 8009432:	edd5 6a00 	vldr	s13, [r5]
 8009436:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009438:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800943c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8009440:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009444:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009448:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800944c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009450:	edcc 7a01 	vstr	s15, [ip, #4]
 8009454:	ed8c 7a00 	vstr	s14, [ip]
 8009458:	6872      	ldr	r2, [r6, #4]
 800945a:	f000 f88f 	bl	800957c <arm_radix8_butterfly_f32>
 800945e:	9803      	ldr	r0, [sp, #12]
 8009460:	4621      	mov	r1, r4
 8009462:	6872      	ldr	r2, [r6, #4]
 8009464:	2304      	movs	r3, #4
 8009466:	f000 f889 	bl	800957c <arm_radix8_butterfly_f32>
 800946a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800946c:	4621      	mov	r1, r4
 800946e:	6872      	ldr	r2, [r6, #4]
 8009470:	2304      	movs	r3, #4
 8009472:	f000 f883 	bl	800957c <arm_radix8_butterfly_f32>
 8009476:	4621      	mov	r1, r4
 8009478:	6872      	ldr	r2, [r6, #4]
 800947a:	2304      	movs	r3, #4
 800947c:	9804      	ldr	r0, [sp, #16]
 800947e:	b00f      	add	sp, #60	; 0x3c
 8009480:	ecbd 8b06 	vpop	{d8-d10}
 8009484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	f000 b878 	b.w	800957c <arm_radix8_butterfly_f32>

0800948c <arm_cfft_f32>:
 800948c:	2a01      	cmp	r2, #1
 800948e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	4606      	mov	r6, r0
 8009494:	4617      	mov	r7, r2
 8009496:	460c      	mov	r4, r1
 8009498:	4698      	mov	r8, r3
 800949a:	8805      	ldrh	r5, [r0, #0]
 800949c:	d053      	beq.n	8009546 <arm_cfft_f32+0xba>
 800949e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80094a2:	d04b      	beq.n	800953c <arm_cfft_f32+0xb0>
 80094a4:	d916      	bls.n	80094d4 <arm_cfft_f32+0x48>
 80094a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80094aa:	d01a      	beq.n	80094e2 <arm_cfft_f32+0x56>
 80094ac:	d95a      	bls.n	8009564 <arm_cfft_f32+0xd8>
 80094ae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80094b2:	d043      	beq.n	800953c <arm_cfft_f32+0xb0>
 80094b4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80094b8:	d105      	bne.n	80094c6 <arm_cfft_f32+0x3a>
 80094ba:	2301      	movs	r3, #1
 80094bc:	6872      	ldr	r2, [r6, #4]
 80094be:	4629      	mov	r1, r5
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 f85b 	bl	800957c <arm_radix8_butterfly_f32>
 80094c6:	f1b8 0f00 	cmp.w	r8, #0
 80094ca:	d111      	bne.n	80094f0 <arm_cfft_f32+0x64>
 80094cc:	2f01      	cmp	r7, #1
 80094ce:	d016      	beq.n	80094fe <arm_cfft_f32+0x72>
 80094d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d4:	2d20      	cmp	r5, #32
 80094d6:	d031      	beq.n	800953c <arm_cfft_f32+0xb0>
 80094d8:	d948      	bls.n	800956c <arm_cfft_f32+0xe0>
 80094da:	2d40      	cmp	r5, #64	; 0x40
 80094dc:	d0ed      	beq.n	80094ba <arm_cfft_f32+0x2e>
 80094de:	2d80      	cmp	r5, #128	; 0x80
 80094e0:	d1f1      	bne.n	80094c6 <arm_cfft_f32+0x3a>
 80094e2:	4621      	mov	r1, r4
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff fca9 	bl	8008e3c <arm_cfft_radix8by2_f32>
 80094ea:	f1b8 0f00 	cmp.w	r8, #0
 80094ee:	d0ed      	beq.n	80094cc <arm_cfft_f32+0x40>
 80094f0:	68b2      	ldr	r2, [r6, #8]
 80094f2:	4620      	mov	r0, r4
 80094f4:	89b1      	ldrh	r1, [r6, #12]
 80094f6:	f7f6 fe8b 	bl	8000210 <arm_bitreversal_32>
 80094fa:	2f01      	cmp	r7, #1
 80094fc:	d1e8      	bne.n	80094d0 <arm_cfft_f32+0x44>
 80094fe:	ee07 5a90 	vmov	s15, r5
 8009502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800950e:	2d00      	cmp	r5, #0
 8009510:	d0de      	beq.n	80094d0 <arm_cfft_f32+0x44>
 8009512:	f104 0108 	add.w	r1, r4, #8
 8009516:	2300      	movs	r3, #0
 8009518:	ed11 7a02 	vldr	s14, [r1, #-8]
 800951c:	3301      	adds	r3, #1
 800951e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009522:	3108      	adds	r1, #8
 8009524:	429d      	cmp	r5, r3
 8009526:	ee27 7a26 	vmul.f32	s14, s14, s13
 800952a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800952e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009532:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009536:	d1ef      	bne.n	8009518 <arm_cfft_f32+0x8c>
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	4621      	mov	r1, r4
 800953e:	4630      	mov	r0, r6
 8009540:	f7ff fd4c 	bl	8008fdc <arm_cfft_radix8by4_f32>
 8009544:	e7bf      	b.n	80094c6 <arm_cfft_f32+0x3a>
 8009546:	b1a5      	cbz	r5, 8009572 <arm_cfft_f32+0xe6>
 8009548:	f101 030c 	add.w	r3, r1, #12
 800954c:	2200      	movs	r2, #0
 800954e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009552:	3201      	adds	r2, #1
 8009554:	3308      	adds	r3, #8
 8009556:	eef1 7a67 	vneg.f32	s15, s15
 800955a:	4295      	cmp	r5, r2
 800955c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009560:	d1f5      	bne.n	800954e <arm_cfft_f32+0xc2>
 8009562:	e79c      	b.n	800949e <arm_cfft_f32+0x12>
 8009564:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009568:	d0a7      	beq.n	80094ba <arm_cfft_f32+0x2e>
 800956a:	e7ac      	b.n	80094c6 <arm_cfft_f32+0x3a>
 800956c:	2d10      	cmp	r5, #16
 800956e:	d0b8      	beq.n	80094e2 <arm_cfft_f32+0x56>
 8009570:	e7a9      	b.n	80094c6 <arm_cfft_f32+0x3a>
 8009572:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009576:	d896      	bhi.n	80094a6 <arm_cfft_f32+0x1a>
 8009578:	e7ac      	b.n	80094d4 <arm_cfft_f32+0x48>
 800957a:	bf00      	nop

0800957c <arm_radix8_butterfly_f32>:
 800957c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009580:	469e      	mov	lr, r3
 8009582:	4603      	mov	r3, r0
 8009584:	468a      	mov	sl, r1
 8009586:	468b      	mov	fp, r1
 8009588:	3304      	adds	r3, #4
 800958a:	ed2d 8b10 	vpush	{d8-d15}
 800958e:	469c      	mov	ip, r3
 8009590:	b09d      	sub	sp, #116	; 0x74
 8009592:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80098a0 <arm_radix8_butterfly_f32+0x324>
 8009596:	9019      	str	r0, [sp, #100]	; 0x64
 8009598:	921a      	str	r2, [sp, #104]	; 0x68
 800959a:	931b      	str	r3, [sp, #108]	; 0x6c
 800959c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80095a0:	f04f 0800 	mov.w	r8, #0
 80095a4:	461a      	mov	r2, r3
 80095a6:	9311      	str	r3, [sp, #68]	; 0x44
 80095a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095ac:	4611      	mov	r1, r2
 80095ae:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	0053      	lsls	r3, r2, #1
 80095b6:	18d5      	adds	r5, r2, r3
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	0113      	lsls	r3, r2, #4
 80095bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095be:	194c      	adds	r4, r1, r5
 80095c0:	eb02 0609 	add.w	r6, r2, r9
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80095ca:	4613      	mov	r3, r2
 80095cc:	190a      	adds	r2, r1, r4
 80095ce:	eb06 0709 	add.w	r7, r6, r9
 80095d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80095d6:	1888      	adds	r0, r1, r2
 80095d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80095dc:	4401      	add	r1, r0
 80095de:	3204      	adds	r2, #4
 80095e0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80095e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80095e8:	9b00      	ldr	r3, [sp, #0]
 80095ea:	3104      	adds	r1, #4
 80095ec:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80095f0:	44d8      	add	r8, fp
 80095f2:	ed90 7a00 	vldr	s14, [r0]
 80095f6:	ed94 5a00 	vldr	s10, [r4]
 80095fa:	45c2      	cmp	sl, r8
 80095fc:	edd7 3a00 	vldr	s7, [r7]
 8009600:	ed96 6a00 	vldr	s12, [r6]
 8009604:	ee37 1a85 	vadd.f32	s2, s15, s10
 8009608:	ed52 6a01 	vldr	s13, [r2, #-4]
 800960c:	ee73 4a87 	vadd.f32	s9, s7, s14
 8009610:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8009614:	edd5 7a00 	vldr	s15, [r5]
 8009618:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800961c:	ed11 7a01 	vldr	s14, [r1, #-4]
 8009620:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009624:	ee37 4a87 	vadd.f32	s8, s15, s14
 8009628:	ee76 6a66 	vsub.f32	s13, s12, s13
 800962c:	ee71 5a24 	vadd.f32	s11, s2, s9
 8009630:	ee32 6a04 	vadd.f32	s12, s4, s8
 8009634:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009638:	ee31 1a64 	vsub.f32	s2, s2, s9
 800963c:	ee75 4a86 	vadd.f32	s9, s11, s12
 8009640:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8009644:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009648:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800964c:	ee32 2a44 	vsub.f32	s4, s4, s8
 8009650:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009654:	ed94 0a01 	vldr	s0, [r4, #4]
 8009658:	edc4 5a00 	vstr	s11, [r4]
 800965c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009660:	edd6 5a01 	vldr	s11, [r6, #4]
 8009664:	edd5 2a01 	vldr	s5, [r5, #4]
 8009668:	ee75 1a27 	vadd.f32	s3, s10, s15
 800966c:	ed92 4a00 	vldr	s8, [r2]
 8009670:	ee75 7a67 	vsub.f32	s15, s10, s15
 8009674:	edd1 4a00 	vldr	s9, [r1]
 8009678:	ee27 7a09 	vmul.f32	s14, s14, s18
 800967c:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8009680:	ed9c 6a00 	vldr	s12, [ip]
 8009684:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8009688:	edd0 0a01 	vldr	s1, [r0, #4]
 800968c:	ed97 5a01 	vldr	s10, [r7, #4]
 8009690:	ee35 4a84 	vadd.f32	s8, s11, s8
 8009694:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8009698:	ee73 5a26 	vadd.f32	s11, s6, s13
 800969c:	ee76 2a00 	vadd.f32	s5, s12, s0
 80096a0:	ee73 6a66 	vsub.f32	s13, s6, s13
 80096a4:	ee36 6a40 	vsub.f32	s12, s12, s0
 80096a8:	ee35 0a20 	vadd.f32	s0, s10, s1
 80096ac:	ee65 5a89 	vmul.f32	s11, s11, s18
 80096b0:	ee35 5a60 	vsub.f32	s10, s10, s1
 80096b4:	ee32 3a80 	vadd.f32	s6, s5, s0
 80096b8:	ee74 0a24 	vadd.f32	s1, s8, s9
 80096bc:	ee66 6a89 	vmul.f32	s13, s13, s18
 80096c0:	ee74 4a64 	vsub.f32	s9, s8, s9
 80096c4:	ee32 4ac0 	vsub.f32	s8, s5, s0
 80096c8:	ee75 2a25 	vadd.f32	s5, s10, s11
 80096cc:	ee33 0a20 	vadd.f32	s0, s6, s1
 80096d0:	ee75 5a65 	vsub.f32	s11, s10, s11
 80096d4:	ee33 3a60 	vsub.f32	s6, s6, s1
 80096d8:	ee36 5a26 	vadd.f32	s10, s12, s13
 80096dc:	ed8c 0a00 	vstr	s0, [ip]
 80096e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80096e4:	449c      	add	ip, r3
 80096e6:	ee33 6a87 	vadd.f32	s12, s7, s14
 80096ea:	ed84 3a01 	vstr	s6, [r4, #4]
 80096ee:	ee33 7ac7 	vsub.f32	s14, s7, s14
 80096f2:	441c      	add	r4, r3
 80096f4:	ee71 3a24 	vadd.f32	s7, s2, s9
 80096f8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80096fc:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8009700:	edc7 3a00 	vstr	s7, [r7]
 8009704:	ee34 1a42 	vsub.f32	s2, s8, s4
 8009708:	edc0 4a00 	vstr	s9, [r0]
 800970c:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8009710:	ee75 4a46 	vsub.f32	s9, s10, s12
 8009714:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009718:	ed87 1a01 	vstr	s2, [r7, #4]
 800971c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8009720:	441f      	add	r7, r3
 8009722:	ee32 4a04 	vadd.f32	s8, s4, s8
 8009726:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800972a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800972e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009732:	ed80 4a01 	vstr	s8, [r0, #4]
 8009736:	ed86 3a00 	vstr	s6, [r6]
 800973a:	4418      	add	r0, r3
 800973c:	ed41 1a01 	vstr	s3, [r1, #-4]
 8009740:	ed42 3a01 	vstr	s7, [r2, #-4]
 8009744:	edc5 7a00 	vstr	s15, [r5]
 8009748:	edc6 4a01 	vstr	s9, [r6, #4]
 800974c:	441e      	add	r6, r3
 800974e:	ed81 6a00 	vstr	s12, [r1]
 8009752:	4419      	add	r1, r3
 8009754:	edc2 5a00 	vstr	s11, [r2]
 8009758:	441a      	add	r2, r3
 800975a:	ed85 7a01 	vstr	s14, [r5, #4]
 800975e:	441d      	add	r5, r3
 8009760:	f63f af44 	bhi.w	80095ec <arm_radix8_butterfly_f32+0x70>
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	2b07      	cmp	r3, #7
 800976a:	f240 81f4 	bls.w	8009b56 <arm_radix8_butterfly_f32+0x5da>
 800976e:	9901      	ldr	r1, [sp, #4]
 8009770:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8009774:	9d02      	ldr	r5, [sp, #8]
 8009776:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800977a:	3101      	adds	r1, #1
 800977c:	eb04 000e 	add.w	r0, r4, lr
 8009780:	00e4      	lsls	r4, r4, #3
 8009782:	3508      	adds	r5, #8
 8009784:	4419      	add	r1, r3
 8009786:	eb00 0c0e 	add.w	ip, r0, lr
 800978a:	9413      	str	r4, [sp, #76]	; 0x4c
 800978c:	00c0      	lsls	r0, r0, #3
 800978e:	185e      	adds	r6, r3, r1
 8009790:	4617      	mov	r7, r2
 8009792:	9218      	str	r2, [sp, #96]	; 0x60
 8009794:	f109 0908 	add.w	r9, r9, #8
 8009798:	199c      	adds	r4, r3, r6
 800979a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800979c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800979e:	9012      	str	r0, [sp, #72]	; 0x48
 80097a0:	195d      	adds	r5, r3, r5
 80097a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80097a4:	443a      	add	r2, r7
 80097a6:	950c      	str	r5, [sp, #48]	; 0x30
 80097a8:	4698      	mov	r8, r3
 80097aa:	4420      	add	r0, r4
 80097ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80097ae:	19d7      	adds	r7, r2, r7
 80097b0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80097b4:	4405      	add	r5, r0
 80097b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80097ba:	9710      	str	r7, [sp, #64]	; 0x40
 80097bc:	eb0c 070e 	add.w	r7, ip, lr
 80097c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80097c4:	3404      	adds	r4, #4
 80097c6:	3004      	adds	r0, #4
 80097c8:	44c8      	add	r8, r9
 80097ca:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80097ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097d0:	940a      	str	r4, [sp, #40]	; 0x28
 80097d2:	9009      	str	r0, [sp, #36]	; 0x24
 80097d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80097d8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80097da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80097e0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80097e4:	eb07 080e 	add.w	r8, r7, lr
 80097e8:	eb04 0900 	add.w	r9, r4, r0
 80097ec:	00f8      	lsls	r0, r7, #3
 80097ee:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80097f2:	3504      	adds	r5, #4
 80097f4:	4607      	mov	r7, r0
 80097f6:	9017      	str	r0, [sp, #92]	; 0x5c
 80097f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80097fa:	4618      	mov	r0, r3
 80097fc:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8009800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009802:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8009806:	18e3      	adds	r3, r4, r3
 8009808:	9508      	str	r5, [sp, #32]
 800980a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800980c:	910e      	str	r1, [sp, #56]	; 0x38
 800980e:	4621      	mov	r1, r4
 8009810:	eb04 0805 	add.w	r8, r4, r5
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	19e5      	adds	r5, r4, r7
 8009818:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800981c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800981e:	9316      	str	r3, [sp, #88]	; 0x58
 8009820:	190b      	adds	r3, r1, r4
 8009822:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009824:	9505      	str	r5, [sp, #20]
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	f100 0308 	add.w	r3, r0, #8
 800982c:	9707      	str	r7, [sp, #28]
 800982e:	4638      	mov	r0, r7
 8009830:	930f      	str	r3, [sp, #60]	; 0x3c
 8009832:	2301      	movs	r3, #1
 8009834:	9306      	str	r3, [sp, #24]
 8009836:	9b00      	ldr	r3, [sp, #0]
 8009838:	ed90 fa00 	vldr	s30, [r0]
 800983c:	edd0 ba01 	vldr	s23, [r0, #4]
 8009840:	9803      	ldr	r0, [sp, #12]
 8009842:	9903      	ldr	r1, [sp, #12]
 8009844:	ed90 ba01 	vldr	s22, [r0, #4]
 8009848:	9804      	ldr	r0, [sp, #16]
 800984a:	edd1 ea00 	vldr	s29, [r1]
 800984e:	edd0 aa01 	vldr	s21, [r0, #4]
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	9905      	ldr	r1, [sp, #20]
 8009856:	edd0 7a01 	vldr	s15, [r0, #4]
 800985a:	ed91 da00 	vldr	s26, [r1]
 800985e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009860:	9c04      	ldr	r4, [sp, #16]
 8009862:	edcd 7a01 	vstr	s15, [sp, #4]
 8009866:	edd8 7a01 	vldr	s15, [r8, #4]
 800986a:	9100      	str	r1, [sp, #0]
 800986c:	edd2 fa00 	vldr	s31, [r2]
 8009870:	ed94 ea00 	vldr	s28, [r4]
 8009874:	ed92 ca01 	vldr	s24, [r2, #4]
 8009878:	f8dd e020 	ldr.w	lr, [sp, #32]
 800987c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800987e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009880:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009882:	edd9 da00 	vldr	s27, [r9]
 8009886:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009888:	edd8 ca00 	vldr	s25, [r8]
 800988c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800988e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009890:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009894:	ed99 aa01 	vldr	s20, [r9, #4]
 8009898:	edcd 7a02 	vstr	s15, [sp, #8]
 800989c:	9800      	ldr	r0, [sp, #0]
 800989e:	e001      	b.n	80098a4 <arm_radix8_butterfly_f32+0x328>
 80098a0:	3f3504f3 	.word	0x3f3504f3
 80098a4:	edd5 3a00 	vldr	s7, [r5]
 80098a8:	44dc      	add	ip, fp
 80098aa:	ed91 7a00 	vldr	s14, [r1]
 80098ae:	edd4 8a00 	vldr	s17, [r4]
 80098b2:	45e2      	cmp	sl, ip
 80098b4:	ed57 7a01 	vldr	s15, [r7, #-4]
 80098b8:	ed90 5a00 	vldr	s10, [r0]
 80098bc:	ed56 5a01 	vldr	s11, [r6, #-4]
 80098c0:	ee38 6aa7 	vadd.f32	s12, s17, s15
 80098c4:	ed92 1a00 	vldr	s2, [r2]
 80098c8:	ee78 4ae7 	vsub.f32	s9, s17, s15
 80098cc:	ed1e 4a01 	vldr	s8, [lr, #-4]
 80098d0:	ee75 9a25 	vadd.f32	s19, s10, s11
 80098d4:	ee31 3a07 	vadd.f32	s6, s2, s14
 80098d8:	ed92 8a01 	vldr	s16, [r2, #4]
 80098dc:	ee73 6a84 	vadd.f32	s13, s7, s8
 80098e0:	ee75 5a65 	vsub.f32	s11, s10, s11
 80098e4:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80098e8:	ee73 1a06 	vadd.f32	s3, s6, s12
 80098ec:	ee39 5aa6 	vadd.f32	s10, s19, s13
 80098f0:	ee75 7a84 	vadd.f32	s15, s11, s8
 80098f4:	ee31 1a47 	vsub.f32	s2, s2, s14
 80098f8:	ee31 7a85 	vadd.f32	s14, s3, s10
 80098fc:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009900:	ee33 3a46 	vsub.f32	s6, s6, s12
 8009904:	ed82 7a00 	vstr	s14, [r2]
 8009908:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800990c:	ed96 6a00 	vldr	s12, [r6]
 8009910:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8009914:	edd5 3a01 	vldr	s7, [r5, #4]
 8009918:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800991c:	ed90 7a01 	vldr	s14, [r0, #4]
 8009920:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8009924:	edde 4a00 	vldr	s9, [lr]
 8009928:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800992c:	ee77 2a46 	vsub.f32	s5, s14, s12
 8009930:	edd1 6a01 	vldr	s13, [r1, #4]
 8009934:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8009938:	edd7 0a00 	vldr	s1, [r7]
 800993c:	ee77 5a06 	vadd.f32	s11, s14, s12
 8009940:	ed94 7a01 	vldr	s14, [r4, #4]
 8009944:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8009948:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800994c:	ee78 4a66 	vsub.f32	s9, s16, s13
 8009950:	ee78 3a26 	vadd.f32	s7, s16, s13
 8009954:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8009958:	ee77 6a20 	vadd.f32	s13, s14, s1
 800995c:	ee24 4a09 	vmul.f32	s8, s8, s18
 8009960:	ee37 7a60 	vsub.f32	s14, s14, s1
 8009964:	ee20 8a09 	vmul.f32	s16, s0, s18
 8009968:	ee75 0a86 	vadd.f32	s1, s11, s12
 800996c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8009970:	ee62 2a89 	vmul.f32	s5, s5, s18
 8009974:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009978:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800997c:	ee77 7a62 	vsub.f32	s15, s14, s5
 8009980:	ee74 5a88 	vadd.f32	s11, s9, s16
 8009984:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8009988:	ee77 4a22 	vadd.f32	s9, s14, s5
 800998c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8009990:	ee31 7a44 	vsub.f32	s14, s2, s8
 8009994:	ee30 1a60 	vsub.f32	s2, s0, s1
 8009998:	ee73 1a06 	vadd.f32	s3, s6, s12
 800999c:	ee33 6a46 	vsub.f32	s12, s6, s12
 80099a0:	ee33 3ae9 	vsub.f32	s6, s7, s19
 80099a4:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80099a8:	ee38 4a68 	vsub.f32	s8, s16, s17
 80099ac:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80099b0:	ee72 5a25 	vadd.f32	s11, s4, s11
 80099b4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80099b8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80099bc:	ee77 2a27 	vadd.f32	s5, s14, s15
 80099c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099c4:	ee78 7a88 	vadd.f32	s15, s17, s16
 80099c8:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80099cc:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80099d0:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80099d4:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80099d8:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80099dc:	ee70 0a20 	vadd.f32	s1, s0, s1
 80099e0:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80099e4:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80099e8:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80099ec:	edc2 0a01 	vstr	s1, [r2, #4]
 80099f0:	ee38 8a88 	vadd.f32	s16, s17, s16
 80099f4:	441a      	add	r2, r3
 80099f6:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80099fa:	ee31 5a45 	vsub.f32	s10, s2, s10
 80099fe:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8009a02:	ed81 8a00 	vstr	s16, [r1]
 8009a06:	ee39 0a80 	vadd.f32	s0, s19, s0
 8009a0a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009a0e:	ed81 5a01 	vstr	s10, [r1, #4]
 8009a12:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8009a16:	edcd 3a00 	vstr	s7, [sp]
 8009a1a:	ed9d 5a02 	vldr	s10, [sp, #8]
 8009a1e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8009a22:	eddd 3a01 	vldr	s7, [sp, #4]
 8009a26:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8009a2a:	ed84 0a00 	vstr	s0, [r4]
 8009a2e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009a32:	ed84 3a01 	vstr	s6, [r4, #4]
 8009a36:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8009a3a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009a3e:	eddd 3a00 	vldr	s7, [sp]
 8009a42:	ee25 5a25 	vmul.f32	s10, s10, s11
 8009a46:	4419      	add	r1, r3
 8009a48:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8009a4c:	441c      	add	r4, r3
 8009a4e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8009a52:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8009a56:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8009a5a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8009a5e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8009a62:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8009a66:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8009a6a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8009a6e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8009a72:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8009a76:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8009a7a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009a7e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8009a82:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8009a86:	ee39 5a85 	vadd.f32	s10, s19, s10
 8009a8a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8009a8e:	ed07 8a01 	vstr	s16, [r7, #-4]
 8009a92:	ee30 0a21 	vadd.f32	s0, s0, s3
 8009a96:	ed87 6a00 	vstr	s12, [r7]
 8009a9a:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009a9e:	edc0 0a00 	vstr	s1, [r0]
 8009aa2:	ee33 3a28 	vadd.f32	s6, s6, s17
 8009aa6:	edc0 3a01 	vstr	s7, [r0, #4]
 8009aaa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009aae:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8009ab2:	edce 4a00 	vstr	s9, [lr]
 8009ab6:	4418      	add	r0, r3
 8009ab8:	ed06 0a01 	vstr	s0, [r6, #-4]
 8009abc:	441f      	add	r7, r3
 8009abe:	edc6 2a00 	vstr	s5, [r6]
 8009ac2:	449e      	add	lr, r3
 8009ac4:	ed85 3a00 	vstr	s6, [r5]
 8009ac8:	441e      	add	r6, r3
 8009aca:	ed85 7a01 	vstr	s14, [r5, #4]
 8009ace:	441d      	add	r5, r3
 8009ad0:	f63f aee8 	bhi.w	80098a4 <arm_radix8_butterfly_f32+0x328>
 8009ad4:	9a06      	ldr	r2, [sp, #24]
 8009ad6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009ad8:	3201      	adds	r2, #1
 8009ada:	4611      	mov	r1, r2
 8009adc:	9206      	str	r2, [sp, #24]
 8009ade:	9a07      	ldr	r2, [sp, #28]
 8009ae0:	4402      	add	r2, r0
 8009ae2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009ae4:	9207      	str	r2, [sp, #28]
 8009ae6:	9a03      	ldr	r2, [sp, #12]
 8009ae8:	4402      	add	r2, r0
 8009aea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009aec:	9203      	str	r2, [sp, #12]
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	4402      	add	r2, r0
 8009af2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009af4:	9204      	str	r2, [sp, #16]
 8009af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009af8:	4491      	add	r9, r2
 8009afa:	9a05      	ldr	r2, [sp, #20]
 8009afc:	4402      	add	r2, r0
 8009afe:	9205      	str	r2, [sp, #20]
 8009b00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b02:	4490      	add	r8, r2
 8009b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b06:	3208      	adds	r2, #8
 8009b08:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b0c:	3208      	adds	r2, #8
 8009b0e:	920e      	str	r2, [sp, #56]	; 0x38
 8009b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b12:	3208      	adds	r2, #8
 8009b14:	920d      	str	r2, [sp, #52]	; 0x34
 8009b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b18:	3208      	adds	r2, #8
 8009b1a:	920c      	str	r2, [sp, #48]	; 0x30
 8009b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b1e:	3208      	adds	r2, #8
 8009b20:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b24:	3208      	adds	r2, #8
 8009b26:	920a      	str	r2, [sp, #40]	; 0x28
 8009b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b2a:	3208      	adds	r2, #8
 8009b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b2e:	9a08      	ldr	r2, [sp, #32]
 8009b30:	3208      	adds	r2, #8
 8009b32:	9208      	str	r2, [sp, #32]
 8009b34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009b36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009b38:	4622      	mov	r2, r4
 8009b3a:	4288      	cmp	r0, r1
 8009b3c:	d005      	beq.n	8009b4a <arm_radix8_butterfly_f32+0x5ce>
 8009b3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009b40:	4621      	mov	r1, r4
 8009b42:	4401      	add	r1, r0
 8009b44:	9807      	ldr	r0, [sp, #28]
 8009b46:	9110      	str	r1, [sp, #64]	; 0x40
 8009b48:	e676      	b.n	8009838 <arm_radix8_butterfly_f32+0x2bc>
 8009b4a:	4683      	mov	fp, r0
 8009b4c:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8009b50:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8009b54:	e522      	b.n	800959c <arm_radix8_butterfly_f32+0x20>
 8009b56:	b01d      	add	sp, #116	; 0x74
 8009b58:	ecbd 8b10 	vpop	{d8-d15}
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b60 <__cvt>:
 8009b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	ec55 4b10 	vmov	r4, r5, d0
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	460e      	mov	r6, r1
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	462b      	mov	r3, r5
 8009b70:	bfbb      	ittet	lt
 8009b72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b76:	461d      	movlt	r5, r3
 8009b78:	2300      	movge	r3, #0
 8009b7a:	232d      	movlt	r3, #45	; 0x2d
 8009b7c:	700b      	strb	r3, [r1, #0]
 8009b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b84:	4691      	mov	r9, r2
 8009b86:	f023 0820 	bic.w	r8, r3, #32
 8009b8a:	bfbc      	itt	lt
 8009b8c:	4622      	movlt	r2, r4
 8009b8e:	4614      	movlt	r4, r2
 8009b90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b94:	d005      	beq.n	8009ba2 <__cvt+0x42>
 8009b96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b9a:	d100      	bne.n	8009b9e <__cvt+0x3e>
 8009b9c:	3601      	adds	r6, #1
 8009b9e:	2102      	movs	r1, #2
 8009ba0:	e000      	b.n	8009ba4 <__cvt+0x44>
 8009ba2:	2103      	movs	r1, #3
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	ab02      	add	r3, sp, #8
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	ec45 4b10 	vmov	d0, r4, r5
 8009bb0:	4653      	mov	r3, sl
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	f000 fe88 	bl	800a8c8 <_dtoa_r>
 8009bb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	d102      	bne.n	8009bc6 <__cvt+0x66>
 8009bc0:	f019 0f01 	tst.w	r9, #1
 8009bc4:	d022      	beq.n	8009c0c <__cvt+0xac>
 8009bc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bca:	eb07 0906 	add.w	r9, r7, r6
 8009bce:	d110      	bne.n	8009bf2 <__cvt+0x92>
 8009bd0:	783b      	ldrb	r3, [r7, #0]
 8009bd2:	2b30      	cmp	r3, #48	; 0x30
 8009bd4:	d10a      	bne.n	8009bec <__cvt+0x8c>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7f6 fff3 	bl	8000bc8 <__aeabi_dcmpeq>
 8009be2:	b918      	cbnz	r0, 8009bec <__cvt+0x8c>
 8009be4:	f1c6 0601 	rsb	r6, r6, #1
 8009be8:	f8ca 6000 	str.w	r6, [sl]
 8009bec:	f8da 3000 	ldr.w	r3, [sl]
 8009bf0:	4499      	add	r9, r3
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 ffe5 	bl	8000bc8 <__aeabi_dcmpeq>
 8009bfe:	b108      	cbz	r0, 8009c04 <__cvt+0xa4>
 8009c00:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c04:	2230      	movs	r2, #48	; 0x30
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	454b      	cmp	r3, r9
 8009c0a:	d307      	bcc.n	8009c1c <__cvt+0xbc>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c10:	1bdb      	subs	r3, r3, r7
 8009c12:	4638      	mov	r0, r7
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	b004      	add	sp, #16
 8009c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1c:	1c59      	adds	r1, r3, #1
 8009c1e:	9103      	str	r1, [sp, #12]
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e7f0      	b.n	8009c06 <__cvt+0xa6>

08009c24 <__exponent>:
 8009c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c26:	4603      	mov	r3, r0
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	bfb8      	it	lt
 8009c2c:	4249      	neglt	r1, r1
 8009c2e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c32:	bfb4      	ite	lt
 8009c34:	222d      	movlt	r2, #45	; 0x2d
 8009c36:	222b      	movge	r2, #43	; 0x2b
 8009c38:	2909      	cmp	r1, #9
 8009c3a:	7042      	strb	r2, [r0, #1]
 8009c3c:	dd2a      	ble.n	8009c94 <__exponent+0x70>
 8009c3e:	f10d 0207 	add.w	r2, sp, #7
 8009c42:	4617      	mov	r7, r2
 8009c44:	260a      	movs	r6, #10
 8009c46:	4694      	mov	ip, r2
 8009c48:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c4c:	fb06 1415 	mls	r4, r6, r5, r1
 8009c50:	3430      	adds	r4, #48	; 0x30
 8009c52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c56:	460c      	mov	r4, r1
 8009c58:	2c63      	cmp	r4, #99	; 0x63
 8009c5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c5e:	4629      	mov	r1, r5
 8009c60:	dcf1      	bgt.n	8009c46 <__exponent+0x22>
 8009c62:	3130      	adds	r1, #48	; 0x30
 8009c64:	f1ac 0402 	sub.w	r4, ip, #2
 8009c68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c6c:	1c41      	adds	r1, r0, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	42ba      	cmp	r2, r7
 8009c72:	d30a      	bcc.n	8009c8a <__exponent+0x66>
 8009c74:	f10d 0209 	add.w	r2, sp, #9
 8009c78:	eba2 020c 	sub.w	r2, r2, ip
 8009c7c:	42bc      	cmp	r4, r7
 8009c7e:	bf88      	it	hi
 8009c80:	2200      	movhi	r2, #0
 8009c82:	4413      	add	r3, r2
 8009c84:	1a18      	subs	r0, r3, r0
 8009c86:	b003      	add	sp, #12
 8009c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c92:	e7ed      	b.n	8009c70 <__exponent+0x4c>
 8009c94:	2330      	movs	r3, #48	; 0x30
 8009c96:	3130      	adds	r1, #48	; 0x30
 8009c98:	7083      	strb	r3, [r0, #2]
 8009c9a:	70c1      	strb	r1, [r0, #3]
 8009c9c:	1d03      	adds	r3, r0, #4
 8009c9e:	e7f1      	b.n	8009c84 <__exponent+0x60>

08009ca0 <_printf_float>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	ed2d 8b02 	vpush	{d8}
 8009ca8:	b08d      	sub	sp, #52	; 0x34
 8009caa:	460c      	mov	r4, r1
 8009cac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cb0:	4616      	mov	r6, r2
 8009cb2:	461f      	mov	r7, r3
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	f000 fd09 	bl	800a6cc <_localeconv_r>
 8009cba:	f8d0 a000 	ldr.w	sl, [r0]
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	f7f6 fb56 	bl	8000370 <strlen>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cd4:	3307      	adds	r3, #7
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	f103 0208 	add.w	r2, r3, #8
 8009cde:	f8c8 2000 	str.w	r2, [r8]
 8009ce2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cea:	9307      	str	r3, [sp, #28]
 8009cec:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cf0:	ee08 0a10 	vmov	s16, r0
 8009cf4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cfc:	4b9e      	ldr	r3, [pc, #632]	; (8009f78 <_printf_float+0x2d8>)
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	f7f6 ff93 	bl	8000c2c <__aeabi_dcmpun>
 8009d06:	bb88      	cbnz	r0, 8009d6c <_printf_float+0xcc>
 8009d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d0c:	4b9a      	ldr	r3, [pc, #616]	; (8009f78 <_printf_float+0x2d8>)
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	f7f6 ff6d 	bl	8000bf0 <__aeabi_dcmple>
 8009d16:	bb48      	cbnz	r0, 8009d6c <_printf_float+0xcc>
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 ff5c 	bl	8000bdc <__aeabi_dcmplt>
 8009d24:	b110      	cbz	r0, 8009d2c <_printf_float+0x8c>
 8009d26:	232d      	movs	r3, #45	; 0x2d
 8009d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d2c:	4a93      	ldr	r2, [pc, #588]	; (8009f7c <_printf_float+0x2dc>)
 8009d2e:	4b94      	ldr	r3, [pc, #592]	; (8009f80 <_printf_float+0x2e0>)
 8009d30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d34:	bf94      	ite	ls
 8009d36:	4690      	movls	r8, r2
 8009d38:	4698      	movhi	r8, r3
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	9b05      	ldr	r3, [sp, #20]
 8009d40:	f023 0304 	bic.w	r3, r3, #4
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	9700      	str	r7, [sp, #0]
 8009d4c:	4633      	mov	r3, r6
 8009d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f9da 	bl	800a10c <_printf_common>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f040 8090 	bne.w	8009e7e <_printf_float+0x1de>
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	b00d      	add	sp, #52	; 0x34
 8009d64:	ecbd 8b02 	vpop	{d8}
 8009d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	464b      	mov	r3, r9
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 ff5a 	bl	8000c2c <__aeabi_dcmpun>
 8009d78:	b140      	cbz	r0, 8009d8c <_printf_float+0xec>
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bfbc      	itt	lt
 8009d80:	232d      	movlt	r3, #45	; 0x2d
 8009d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d86:	4a7f      	ldr	r2, [pc, #508]	; (8009f84 <_printf_float+0x2e4>)
 8009d88:	4b7f      	ldr	r3, [pc, #508]	; (8009f88 <_printf_float+0x2e8>)
 8009d8a:	e7d1      	b.n	8009d30 <_printf_float+0x90>
 8009d8c:	6863      	ldr	r3, [r4, #4]
 8009d8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d92:	9206      	str	r2, [sp, #24]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	d13f      	bne.n	8009e18 <_printf_float+0x178>
 8009d98:	2306      	movs	r3, #6
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	9b05      	ldr	r3, [sp, #20]
 8009d9e:	6861      	ldr	r1, [r4, #4]
 8009da0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009da4:	2300      	movs	r3, #0
 8009da6:	9303      	str	r3, [sp, #12]
 8009da8:	ab0a      	add	r3, sp, #40	; 0x28
 8009daa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dae:	ab09      	add	r3, sp, #36	; 0x24
 8009db0:	ec49 8b10 	vmov	d0, r8, r9
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	6022      	str	r2, [r4, #0]
 8009db8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f7ff fecf 	bl	8009b60 <__cvt>
 8009dc2:	9b06      	ldr	r3, [sp, #24]
 8009dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dc6:	2b47      	cmp	r3, #71	; 0x47
 8009dc8:	4680      	mov	r8, r0
 8009dca:	d108      	bne.n	8009dde <_printf_float+0x13e>
 8009dcc:	1cc8      	adds	r0, r1, #3
 8009dce:	db02      	blt.n	8009dd6 <_printf_float+0x136>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	4299      	cmp	r1, r3
 8009dd4:	dd41      	ble.n	8009e5a <_printf_float+0x1ba>
 8009dd6:	f1ab 0302 	sub.w	r3, fp, #2
 8009dda:	fa5f fb83 	uxtb.w	fp, r3
 8009dde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009de2:	d820      	bhi.n	8009e26 <_printf_float+0x186>
 8009de4:	3901      	subs	r1, #1
 8009de6:	465a      	mov	r2, fp
 8009de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dec:	9109      	str	r1, [sp, #36]	; 0x24
 8009dee:	f7ff ff19 	bl	8009c24 <__exponent>
 8009df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009df4:	1813      	adds	r3, r2, r0
 8009df6:	2a01      	cmp	r2, #1
 8009df8:	4681      	mov	r9, r0
 8009dfa:	6123      	str	r3, [r4, #16]
 8009dfc:	dc02      	bgt.n	8009e04 <_printf_float+0x164>
 8009dfe:	6822      	ldr	r2, [r4, #0]
 8009e00:	07d2      	lsls	r2, r2, #31
 8009e02:	d501      	bpl.n	8009e08 <_printf_float+0x168>
 8009e04:	3301      	adds	r3, #1
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d09c      	beq.n	8009d4a <_printf_float+0xaa>
 8009e10:	232d      	movs	r3, #45	; 0x2d
 8009e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e16:	e798      	b.n	8009d4a <_printf_float+0xaa>
 8009e18:	9a06      	ldr	r2, [sp, #24]
 8009e1a:	2a47      	cmp	r2, #71	; 0x47
 8009e1c:	d1be      	bne.n	8009d9c <_printf_float+0xfc>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1bc      	bne.n	8009d9c <_printf_float+0xfc>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e7b9      	b.n	8009d9a <_printf_float+0xfa>
 8009e26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e2a:	d118      	bne.n	8009e5e <_printf_float+0x1be>
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	dd0b      	ble.n	8009e4a <_printf_float+0x1aa>
 8009e32:	6121      	str	r1, [r4, #16]
 8009e34:	b913      	cbnz	r3, 8009e3c <_printf_float+0x19c>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	07d0      	lsls	r0, r2, #31
 8009e3a:	d502      	bpl.n	8009e42 <_printf_float+0x1a2>
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	440b      	add	r3, r1
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e44:	f04f 0900 	mov.w	r9, #0
 8009e48:	e7de      	b.n	8009e08 <_printf_float+0x168>
 8009e4a:	b913      	cbnz	r3, 8009e52 <_printf_float+0x1b2>
 8009e4c:	6822      	ldr	r2, [r4, #0]
 8009e4e:	07d2      	lsls	r2, r2, #31
 8009e50:	d501      	bpl.n	8009e56 <_printf_float+0x1b6>
 8009e52:	3302      	adds	r3, #2
 8009e54:	e7f4      	b.n	8009e40 <_printf_float+0x1a0>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e7f2      	b.n	8009e40 <_printf_float+0x1a0>
 8009e5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	4299      	cmp	r1, r3
 8009e62:	db05      	blt.n	8009e70 <_printf_float+0x1d0>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	6121      	str	r1, [r4, #16]
 8009e68:	07d8      	lsls	r0, r3, #31
 8009e6a:	d5ea      	bpl.n	8009e42 <_printf_float+0x1a2>
 8009e6c:	1c4b      	adds	r3, r1, #1
 8009e6e:	e7e7      	b.n	8009e40 <_printf_float+0x1a0>
 8009e70:	2900      	cmp	r1, #0
 8009e72:	bfd4      	ite	le
 8009e74:	f1c1 0202 	rsble	r2, r1, #2
 8009e78:	2201      	movgt	r2, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	e7e0      	b.n	8009e40 <_printf_float+0x1a0>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	055a      	lsls	r2, r3, #21
 8009e82:	d407      	bmi.n	8009e94 <_printf_float+0x1f4>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	4642      	mov	r2, r8
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d12c      	bne.n	8009eec <_printf_float+0x24c>
 8009e92:	e764      	b.n	8009d5e <_printf_float+0xbe>
 8009e94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e98:	f240 80e0 	bls.w	800a05c <_printf_float+0x3bc>
 8009e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f7f6 fe90 	bl	8000bc8 <__aeabi_dcmpeq>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d034      	beq.n	8009f16 <_printf_float+0x276>
 8009eac:	4a37      	ldr	r2, [pc, #220]	; (8009f8c <_printf_float+0x2ec>)
 8009eae:	2301      	movs	r3, #1
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b8      	blx	r7
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	f43f af51 	beq.w	8009d5e <_printf_float+0xbe>
 8009ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	db02      	blt.n	8009eca <_printf_float+0x22a>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	07d8      	lsls	r0, r3, #31
 8009ec8:	d510      	bpl.n	8009eec <_printf_float+0x24c>
 8009eca:	ee18 3a10 	vmov	r3, s16
 8009ece:	4652      	mov	r2, sl
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f af41 	beq.w	8009d5e <_printf_float+0xbe>
 8009edc:	f04f 0800 	mov.w	r8, #0
 8009ee0:	f104 091a 	add.w	r9, r4, #26
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	dc09      	bgt.n	8009f00 <_printf_float+0x260>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	079b      	lsls	r3, r3, #30
 8009ef0:	f100 8107 	bmi.w	800a102 <_printf_float+0x462>
 8009ef4:	68e0      	ldr	r0, [r4, #12]
 8009ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef8:	4298      	cmp	r0, r3
 8009efa:	bfb8      	it	lt
 8009efc:	4618      	movlt	r0, r3
 8009efe:	e730      	b.n	8009d62 <_printf_float+0xc2>
 8009f00:	2301      	movs	r3, #1
 8009f02:	464a      	mov	r2, r9
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af27 	beq.w	8009d5e <_printf_float+0xbe>
 8009f10:	f108 0801 	add.w	r8, r8, #1
 8009f14:	e7e6      	b.n	8009ee4 <_printf_float+0x244>
 8009f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	dc39      	bgt.n	8009f90 <_printf_float+0x2f0>
 8009f1c:	4a1b      	ldr	r2, [pc, #108]	; (8009f8c <_printf_float+0x2ec>)
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4631      	mov	r1, r6
 8009f22:	4628      	mov	r0, r5
 8009f24:	47b8      	blx	r7
 8009f26:	3001      	adds	r0, #1
 8009f28:	f43f af19 	beq.w	8009d5e <_printf_float+0xbe>
 8009f2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f30:	4313      	orrs	r3, r2
 8009f32:	d102      	bne.n	8009f3a <_printf_float+0x29a>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	07d9      	lsls	r1, r3, #31
 8009f38:	d5d8      	bpl.n	8009eec <_printf_float+0x24c>
 8009f3a:	ee18 3a10 	vmov	r3, s16
 8009f3e:	4652      	mov	r2, sl
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af09 	beq.w	8009d5e <_printf_float+0xbe>
 8009f4c:	f04f 0900 	mov.w	r9, #0
 8009f50:	f104 0a1a 	add.w	sl, r4, #26
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	425b      	negs	r3, r3
 8009f58:	454b      	cmp	r3, r9
 8009f5a:	dc01      	bgt.n	8009f60 <_printf_float+0x2c0>
 8009f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5e:	e792      	b.n	8009e86 <_printf_float+0x1e6>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4652      	mov	r2, sl
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f aef7 	beq.w	8009d5e <_printf_float+0xbe>
 8009f70:	f109 0901 	add.w	r9, r9, #1
 8009f74:	e7ee      	b.n	8009f54 <_printf_float+0x2b4>
 8009f76:	bf00      	nop
 8009f78:	7fefffff 	.word	0x7fefffff
 8009f7c:	0802133c 	.word	0x0802133c
 8009f80:	08021340 	.word	0x08021340
 8009f84:	08021344 	.word	0x08021344
 8009f88:	08021348 	.word	0x08021348
 8009f8c:	0802134c 	.word	0x0802134c
 8009f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f94:	429a      	cmp	r2, r3
 8009f96:	bfa8      	it	ge
 8009f98:	461a      	movge	r2, r3
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	4691      	mov	r9, r2
 8009f9e:	dc37      	bgt.n	800a010 <_printf_float+0x370>
 8009fa0:	f04f 0b00 	mov.w	fp, #0
 8009fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fa8:	f104 021a 	add.w	r2, r4, #26
 8009fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fae:	9305      	str	r3, [sp, #20]
 8009fb0:	eba3 0309 	sub.w	r3, r3, r9
 8009fb4:	455b      	cmp	r3, fp
 8009fb6:	dc33      	bgt.n	800a020 <_printf_float+0x380>
 8009fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	db3b      	blt.n	800a038 <_printf_float+0x398>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d438      	bmi.n	800a038 <_printf_float+0x398>
 8009fc6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fca:	eba2 0903 	sub.w	r9, r2, r3
 8009fce:	9b05      	ldr	r3, [sp, #20]
 8009fd0:	1ad2      	subs	r2, r2, r3
 8009fd2:	4591      	cmp	r9, r2
 8009fd4:	bfa8      	it	ge
 8009fd6:	4691      	movge	r9, r2
 8009fd8:	f1b9 0f00 	cmp.w	r9, #0
 8009fdc:	dc35      	bgt.n	800a04a <_printf_float+0x3aa>
 8009fde:	f04f 0800 	mov.w	r8, #0
 8009fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fe6:	f104 0a1a 	add.w	sl, r4, #26
 8009fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	eba3 0309 	sub.w	r3, r3, r9
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	f77f af79 	ble.w	8009eec <_printf_float+0x24c>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	f43f aeaa 	beq.w	8009d5e <_printf_float+0xbe>
 800a00a:	f108 0801 	add.w	r8, r8, #1
 800a00e:	e7ec      	b.n	8009fea <_printf_float+0x34a>
 800a010:	4613      	mov	r3, r2
 800a012:	4631      	mov	r1, r6
 800a014:	4642      	mov	r2, r8
 800a016:	4628      	mov	r0, r5
 800a018:	47b8      	blx	r7
 800a01a:	3001      	adds	r0, #1
 800a01c:	d1c0      	bne.n	8009fa0 <_printf_float+0x300>
 800a01e:	e69e      	b.n	8009d5e <_printf_float+0xbe>
 800a020:	2301      	movs	r3, #1
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	9205      	str	r2, [sp, #20]
 800a028:	47b8      	blx	r7
 800a02a:	3001      	adds	r0, #1
 800a02c:	f43f ae97 	beq.w	8009d5e <_printf_float+0xbe>
 800a030:	9a05      	ldr	r2, [sp, #20]
 800a032:	f10b 0b01 	add.w	fp, fp, #1
 800a036:	e7b9      	b.n	8009fac <_printf_float+0x30c>
 800a038:	ee18 3a10 	vmov	r3, s16
 800a03c:	4652      	mov	r2, sl
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	d1be      	bne.n	8009fc6 <_printf_float+0x326>
 800a048:	e689      	b.n	8009d5e <_printf_float+0xbe>
 800a04a:	9a05      	ldr	r2, [sp, #20]
 800a04c:	464b      	mov	r3, r9
 800a04e:	4442      	add	r2, r8
 800a050:	4631      	mov	r1, r6
 800a052:	4628      	mov	r0, r5
 800a054:	47b8      	blx	r7
 800a056:	3001      	adds	r0, #1
 800a058:	d1c1      	bne.n	8009fde <_printf_float+0x33e>
 800a05a:	e680      	b.n	8009d5e <_printf_float+0xbe>
 800a05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a05e:	2a01      	cmp	r2, #1
 800a060:	dc01      	bgt.n	800a066 <_printf_float+0x3c6>
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d53a      	bpl.n	800a0dc <_printf_float+0x43c>
 800a066:	2301      	movs	r3, #1
 800a068:	4642      	mov	r2, r8
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	f43f ae74 	beq.w	8009d5e <_printf_float+0xbe>
 800a076:	ee18 3a10 	vmov	r3, s16
 800a07a:	4652      	mov	r2, sl
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f ae6b 	beq.w	8009d5e <_printf_float+0xbe>
 800a088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a08c:	2200      	movs	r2, #0
 800a08e:	2300      	movs	r3, #0
 800a090:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a094:	f7f6 fd98 	bl	8000bc8 <__aeabi_dcmpeq>
 800a098:	b9d8      	cbnz	r0, 800a0d2 <_printf_float+0x432>
 800a09a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a09e:	f108 0201 	add.w	r2, r8, #1
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d10e      	bne.n	800a0ca <_printf_float+0x42a>
 800a0ac:	e657      	b.n	8009d5e <_printf_float+0xbe>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4652      	mov	r2, sl
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f ae50 	beq.w	8009d5e <_printf_float+0xbe>
 800a0be:	f108 0801 	add.w	r8, r8, #1
 800a0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4543      	cmp	r3, r8
 800a0c8:	dcf1      	bgt.n	800a0ae <_printf_float+0x40e>
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0d0:	e6da      	b.n	8009e88 <_printf_float+0x1e8>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	f104 0a1a 	add.w	sl, r4, #26
 800a0da:	e7f2      	b.n	800a0c2 <_printf_float+0x422>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4642      	mov	r2, r8
 800a0e0:	e7df      	b.n	800a0a2 <_printf_float+0x402>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	464a      	mov	r2, r9
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f43f ae36 	beq.w	8009d5e <_printf_float+0xbe>
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	68e3      	ldr	r3, [r4, #12]
 800a0f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	4543      	cmp	r3, r8
 800a0fe:	dcf0      	bgt.n	800a0e2 <_printf_float+0x442>
 800a100:	e6f8      	b.n	8009ef4 <_printf_float+0x254>
 800a102:	f04f 0800 	mov.w	r8, #0
 800a106:	f104 0919 	add.w	r9, r4, #25
 800a10a:	e7f4      	b.n	800a0f6 <_printf_float+0x456>

0800a10c <_printf_common>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	4616      	mov	r6, r2
 800a112:	4699      	mov	r9, r3
 800a114:	688a      	ldr	r2, [r1, #8]
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a11c:	4293      	cmp	r3, r2
 800a11e:	bfb8      	it	lt
 800a120:	4613      	movlt	r3, r2
 800a122:	6033      	str	r3, [r6, #0]
 800a124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a128:	4607      	mov	r7, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	b10a      	cbz	r2, 800a132 <_printf_common+0x26>
 800a12e:	3301      	adds	r3, #1
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	0699      	lsls	r1, r3, #26
 800a136:	bf42      	ittt	mi
 800a138:	6833      	ldrmi	r3, [r6, #0]
 800a13a:	3302      	addmi	r3, #2
 800a13c:	6033      	strmi	r3, [r6, #0]
 800a13e:	6825      	ldr	r5, [r4, #0]
 800a140:	f015 0506 	ands.w	r5, r5, #6
 800a144:	d106      	bne.n	800a154 <_printf_common+0x48>
 800a146:	f104 0a19 	add.w	sl, r4, #25
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	6832      	ldr	r2, [r6, #0]
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	42ab      	cmp	r3, r5
 800a152:	dc26      	bgt.n	800a1a2 <_printf_common+0x96>
 800a154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a158:	1e13      	subs	r3, r2, #0
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	bf18      	it	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	0692      	lsls	r2, r2, #26
 800a162:	d42b      	bmi.n	800a1bc <_printf_common+0xb0>
 800a164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a168:	4649      	mov	r1, r9
 800a16a:	4638      	mov	r0, r7
 800a16c:	47c0      	blx	r8
 800a16e:	3001      	adds	r0, #1
 800a170:	d01e      	beq.n	800a1b0 <_printf_common+0xa4>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	6922      	ldr	r2, [r4, #16]
 800a176:	f003 0306 	and.w	r3, r3, #6
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	bf02      	ittt	eq
 800a17e:	68e5      	ldreq	r5, [r4, #12]
 800a180:	6833      	ldreq	r3, [r6, #0]
 800a182:	1aed      	subeq	r5, r5, r3
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	bf0c      	ite	eq
 800a188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a18c:	2500      	movne	r5, #0
 800a18e:	4293      	cmp	r3, r2
 800a190:	bfc4      	itt	gt
 800a192:	1a9b      	subgt	r3, r3, r2
 800a194:	18ed      	addgt	r5, r5, r3
 800a196:	2600      	movs	r6, #0
 800a198:	341a      	adds	r4, #26
 800a19a:	42b5      	cmp	r5, r6
 800a19c:	d11a      	bne.n	800a1d4 <_printf_common+0xc8>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e008      	b.n	800a1b4 <_printf_common+0xa8>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	47c0      	blx	r8
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d103      	bne.n	800a1b8 <_printf_common+0xac>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	e7c6      	b.n	800a14a <_printf_common+0x3e>
 800a1bc:	18e1      	adds	r1, r4, r3
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	2030      	movs	r0, #48	; 0x30
 800a1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1c6:	4422      	add	r2, r4
 800a1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	e7c7      	b.n	800a164 <_printf_common+0x58>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c0      	blx	r8
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d0e6      	beq.n	800a1b0 <_printf_common+0xa4>
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	e7d9      	b.n	800a19a <_printf_common+0x8e>
	...

0800a1e8 <_printf_i>:
 800a1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	7e0f      	ldrb	r7, [r1, #24]
 800a1ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1f0:	2f78      	cmp	r7, #120	; 0x78
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1fe:	d807      	bhi.n	800a210 <_printf_i+0x28>
 800a200:	2f62      	cmp	r7, #98	; 0x62
 800a202:	d80a      	bhi.n	800a21a <_printf_i+0x32>
 800a204:	2f00      	cmp	r7, #0
 800a206:	f000 80d4 	beq.w	800a3b2 <_printf_i+0x1ca>
 800a20a:	2f58      	cmp	r7, #88	; 0x58
 800a20c:	f000 80c0 	beq.w	800a390 <_printf_i+0x1a8>
 800a210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a218:	e03a      	b.n	800a290 <_printf_i+0xa8>
 800a21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a21e:	2b15      	cmp	r3, #21
 800a220:	d8f6      	bhi.n	800a210 <_printf_i+0x28>
 800a222:	a101      	add	r1, pc, #4	; (adr r1, 800a228 <_printf_i+0x40>)
 800a224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a228:	0800a281 	.word	0x0800a281
 800a22c:	0800a295 	.word	0x0800a295
 800a230:	0800a211 	.word	0x0800a211
 800a234:	0800a211 	.word	0x0800a211
 800a238:	0800a211 	.word	0x0800a211
 800a23c:	0800a211 	.word	0x0800a211
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a211 	.word	0x0800a211
 800a248:	0800a211 	.word	0x0800a211
 800a24c:	0800a211 	.word	0x0800a211
 800a250:	0800a211 	.word	0x0800a211
 800a254:	0800a399 	.word	0x0800a399
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a353 	.word	0x0800a353
 800a260:	0800a211 	.word	0x0800a211
 800a264:	0800a211 	.word	0x0800a211
 800a268:	0800a3bb 	.word	0x0800a3bb
 800a26c:	0800a211 	.word	0x0800a211
 800a270:	0800a2c1 	.word	0x0800a2c1
 800a274:	0800a211 	.word	0x0800a211
 800a278:	0800a211 	.word	0x0800a211
 800a27c:	0800a35b 	.word	0x0800a35b
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	1d1a      	adds	r2, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	602a      	str	r2, [r5, #0]
 800a288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a290:	2301      	movs	r3, #1
 800a292:	e09f      	b.n	800a3d4 <_printf_i+0x1ec>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	0607      	lsls	r7, r0, #24
 800a29a:	f103 0104 	add.w	r1, r3, #4
 800a29e:	6029      	str	r1, [r5, #0]
 800a2a0:	d501      	bpl.n	800a2a6 <_printf_i+0xbe>
 800a2a2:	681e      	ldr	r6, [r3, #0]
 800a2a4:	e003      	b.n	800a2ae <_printf_i+0xc6>
 800a2a6:	0646      	lsls	r6, r0, #25
 800a2a8:	d5fb      	bpl.n	800a2a2 <_printf_i+0xba>
 800a2aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	da03      	bge.n	800a2ba <_printf_i+0xd2>
 800a2b2:	232d      	movs	r3, #45	; 0x2d
 800a2b4:	4276      	negs	r6, r6
 800a2b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ba:	485a      	ldr	r0, [pc, #360]	; (800a424 <_printf_i+0x23c>)
 800a2bc:	230a      	movs	r3, #10
 800a2be:	e012      	b.n	800a2e6 <_printf_i+0xfe>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	1d19      	adds	r1, r3, #4
 800a2c6:	6029      	str	r1, [r5, #0]
 800a2c8:	0605      	lsls	r5, r0, #24
 800a2ca:	d501      	bpl.n	800a2d0 <_printf_i+0xe8>
 800a2cc:	681e      	ldr	r6, [r3, #0]
 800a2ce:	e002      	b.n	800a2d6 <_printf_i+0xee>
 800a2d0:	0641      	lsls	r1, r0, #25
 800a2d2:	d5fb      	bpl.n	800a2cc <_printf_i+0xe4>
 800a2d4:	881e      	ldrh	r6, [r3, #0]
 800a2d6:	4853      	ldr	r0, [pc, #332]	; (800a424 <_printf_i+0x23c>)
 800a2d8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2da:	bf0c      	ite	eq
 800a2dc:	2308      	moveq	r3, #8
 800a2de:	230a      	movne	r3, #10
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2e6:	6865      	ldr	r5, [r4, #4]
 800a2e8:	60a5      	str	r5, [r4, #8]
 800a2ea:	2d00      	cmp	r5, #0
 800a2ec:	bfa2      	ittt	ge
 800a2ee:	6821      	ldrge	r1, [r4, #0]
 800a2f0:	f021 0104 	bicge.w	r1, r1, #4
 800a2f4:	6021      	strge	r1, [r4, #0]
 800a2f6:	b90e      	cbnz	r6, 800a2fc <_printf_i+0x114>
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	d04b      	beq.n	800a394 <_printf_i+0x1ac>
 800a2fc:	4615      	mov	r5, r2
 800a2fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800a302:	fb03 6711 	mls	r7, r3, r1, r6
 800a306:	5dc7      	ldrb	r7, [r0, r7]
 800a308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a30c:	4637      	mov	r7, r6
 800a30e:	42bb      	cmp	r3, r7
 800a310:	460e      	mov	r6, r1
 800a312:	d9f4      	bls.n	800a2fe <_printf_i+0x116>
 800a314:	2b08      	cmp	r3, #8
 800a316:	d10b      	bne.n	800a330 <_printf_i+0x148>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	07de      	lsls	r6, r3, #31
 800a31c:	d508      	bpl.n	800a330 <_printf_i+0x148>
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	6861      	ldr	r1, [r4, #4]
 800a322:	4299      	cmp	r1, r3
 800a324:	bfde      	ittt	le
 800a326:	2330      	movle	r3, #48	; 0x30
 800a328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a32c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a330:	1b52      	subs	r2, r2, r5
 800a332:	6122      	str	r2, [r4, #16]
 800a334:	f8cd a000 	str.w	sl, [sp]
 800a338:	464b      	mov	r3, r9
 800a33a:	aa03      	add	r2, sp, #12
 800a33c:	4621      	mov	r1, r4
 800a33e:	4640      	mov	r0, r8
 800a340:	f7ff fee4 	bl	800a10c <_printf_common>
 800a344:	3001      	adds	r0, #1
 800a346:	d14a      	bne.n	800a3de <_printf_i+0x1f6>
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	b004      	add	sp, #16
 800a34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f043 0320 	orr.w	r3, r3, #32
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	4833      	ldr	r0, [pc, #204]	; (800a428 <_printf_i+0x240>)
 800a35c:	2778      	movs	r7, #120	; 0x78
 800a35e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	6829      	ldr	r1, [r5, #0]
 800a366:	061f      	lsls	r7, r3, #24
 800a368:	f851 6b04 	ldr.w	r6, [r1], #4
 800a36c:	d402      	bmi.n	800a374 <_printf_i+0x18c>
 800a36e:	065f      	lsls	r7, r3, #25
 800a370:	bf48      	it	mi
 800a372:	b2b6      	uxthmi	r6, r6
 800a374:	07df      	lsls	r7, r3, #31
 800a376:	bf48      	it	mi
 800a378:	f043 0320 	orrmi.w	r3, r3, #32
 800a37c:	6029      	str	r1, [r5, #0]
 800a37e:	bf48      	it	mi
 800a380:	6023      	strmi	r3, [r4, #0]
 800a382:	b91e      	cbnz	r6, 800a38c <_printf_i+0x1a4>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	f023 0320 	bic.w	r3, r3, #32
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	2310      	movs	r3, #16
 800a38e:	e7a7      	b.n	800a2e0 <_printf_i+0xf8>
 800a390:	4824      	ldr	r0, [pc, #144]	; (800a424 <_printf_i+0x23c>)
 800a392:	e7e4      	b.n	800a35e <_printf_i+0x176>
 800a394:	4615      	mov	r5, r2
 800a396:	e7bd      	b.n	800a314 <_printf_i+0x12c>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	6826      	ldr	r6, [r4, #0]
 800a39c:	6961      	ldr	r1, [r4, #20]
 800a39e:	1d18      	adds	r0, r3, #4
 800a3a0:	6028      	str	r0, [r5, #0]
 800a3a2:	0635      	lsls	r5, r6, #24
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	d501      	bpl.n	800a3ac <_printf_i+0x1c4>
 800a3a8:	6019      	str	r1, [r3, #0]
 800a3aa:	e002      	b.n	800a3b2 <_printf_i+0x1ca>
 800a3ac:	0670      	lsls	r0, r6, #25
 800a3ae:	d5fb      	bpl.n	800a3a8 <_printf_i+0x1c0>
 800a3b0:	8019      	strh	r1, [r3, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	4615      	mov	r5, r2
 800a3b8:	e7bc      	b.n	800a334 <_printf_i+0x14c>
 800a3ba:	682b      	ldr	r3, [r5, #0]
 800a3bc:	1d1a      	adds	r2, r3, #4
 800a3be:	602a      	str	r2, [r5, #0]
 800a3c0:	681d      	ldr	r5, [r3, #0]
 800a3c2:	6862      	ldr	r2, [r4, #4]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f7f5 ff82 	bl	80002d0 <memchr>
 800a3cc:	b108      	cbz	r0, 800a3d2 <_printf_i+0x1ea>
 800a3ce:	1b40      	subs	r0, r0, r5
 800a3d0:	6060      	str	r0, [r4, #4]
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3dc:	e7aa      	b.n	800a334 <_printf_i+0x14c>
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	47d0      	blx	sl
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d0ad      	beq.n	800a348 <_printf_i+0x160>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	079b      	lsls	r3, r3, #30
 800a3f0:	d413      	bmi.n	800a41a <_printf_i+0x232>
 800a3f2:	68e0      	ldr	r0, [r4, #12]
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	4298      	cmp	r0, r3
 800a3f8:	bfb8      	it	lt
 800a3fa:	4618      	movlt	r0, r3
 800a3fc:	e7a6      	b.n	800a34c <_printf_i+0x164>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4632      	mov	r2, r6
 800a402:	4649      	mov	r1, r9
 800a404:	4640      	mov	r0, r8
 800a406:	47d0      	blx	sl
 800a408:	3001      	adds	r0, #1
 800a40a:	d09d      	beq.n	800a348 <_printf_i+0x160>
 800a40c:	3501      	adds	r5, #1
 800a40e:	68e3      	ldr	r3, [r4, #12]
 800a410:	9903      	ldr	r1, [sp, #12]
 800a412:	1a5b      	subs	r3, r3, r1
 800a414:	42ab      	cmp	r3, r5
 800a416:	dcf2      	bgt.n	800a3fe <_printf_i+0x216>
 800a418:	e7eb      	b.n	800a3f2 <_printf_i+0x20a>
 800a41a:	2500      	movs	r5, #0
 800a41c:	f104 0619 	add.w	r6, r4, #25
 800a420:	e7f5      	b.n	800a40e <_printf_i+0x226>
 800a422:	bf00      	nop
 800a424:	0802134e 	.word	0x0802134e
 800a428:	0802135f 	.word	0x0802135f

0800a42c <std>:
 800a42c:	2300      	movs	r3, #0
 800a42e:	b510      	push	{r4, lr}
 800a430:	4604      	mov	r4, r0
 800a432:	e9c0 3300 	strd	r3, r3, [r0]
 800a436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a43a:	6083      	str	r3, [r0, #8]
 800a43c:	8181      	strh	r1, [r0, #12]
 800a43e:	6643      	str	r3, [r0, #100]	; 0x64
 800a440:	81c2      	strh	r2, [r0, #14]
 800a442:	6183      	str	r3, [r0, #24]
 800a444:	4619      	mov	r1, r3
 800a446:	2208      	movs	r2, #8
 800a448:	305c      	adds	r0, #92	; 0x5c
 800a44a:	f000 f936 	bl	800a6ba <memset>
 800a44e:	4b05      	ldr	r3, [pc, #20]	; (800a464 <std+0x38>)
 800a450:	6263      	str	r3, [r4, #36]	; 0x24
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <std+0x3c>)
 800a454:	62a3      	str	r3, [r4, #40]	; 0x28
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <std+0x40>)
 800a458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <std+0x44>)
 800a45c:	6224      	str	r4, [r4, #32]
 800a45e:	6323      	str	r3, [r4, #48]	; 0x30
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	0800a635 	.word	0x0800a635
 800a468:	0800a657 	.word	0x0800a657
 800a46c:	0800a68f 	.word	0x0800a68f
 800a470:	0800a6b3 	.word	0x0800a6b3

0800a474 <stdio_exit_handler>:
 800a474:	4a02      	ldr	r2, [pc, #8]	; (800a480 <stdio_exit_handler+0xc>)
 800a476:	4903      	ldr	r1, [pc, #12]	; (800a484 <stdio_exit_handler+0x10>)
 800a478:	4803      	ldr	r0, [pc, #12]	; (800a488 <stdio_exit_handler+0x14>)
 800a47a:	f000 b869 	b.w	800a550 <_fwalk_sglue>
 800a47e:	bf00      	nop
 800a480:	20000638 	.word	0x20000638
 800a484:	0800c161 	.word	0x0800c161
 800a488:	20000644 	.word	0x20000644

0800a48c <cleanup_stdio>:
 800a48c:	6841      	ldr	r1, [r0, #4]
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <cleanup_stdio+0x34>)
 800a490:	4299      	cmp	r1, r3
 800a492:	b510      	push	{r4, lr}
 800a494:	4604      	mov	r4, r0
 800a496:	d001      	beq.n	800a49c <cleanup_stdio+0x10>
 800a498:	f001 fe62 	bl	800c160 <_fflush_r>
 800a49c:	68a1      	ldr	r1, [r4, #8]
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <cleanup_stdio+0x38>)
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	d002      	beq.n	800a4aa <cleanup_stdio+0x1e>
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f001 fe5b 	bl	800c160 <_fflush_r>
 800a4aa:	68e1      	ldr	r1, [r4, #12]
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <cleanup_stdio+0x3c>)
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	d004      	beq.n	800a4bc <cleanup_stdio+0x30>
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b8:	f001 be52 	b.w	800c160 <_fflush_r>
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	2000cd68 	.word	0x2000cd68
 800a4c4:	2000cdd0 	.word	0x2000cdd0
 800a4c8:	2000ce38 	.word	0x2000ce38

0800a4cc <global_stdio_init.part.0>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <global_stdio_init.part.0+0x30>)
 800a4d0:	4c0b      	ldr	r4, [pc, #44]	; (800a500 <global_stdio_init.part.0+0x34>)
 800a4d2:	4a0c      	ldr	r2, [pc, #48]	; (800a504 <global_stdio_init.part.0+0x38>)
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2104      	movs	r1, #4
 800a4dc:	f7ff ffa6 	bl	800a42c <std>
 800a4e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	2109      	movs	r1, #9
 800a4e8:	f7ff ffa0 	bl	800a42c <std>
 800a4ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f6:	2112      	movs	r1, #18
 800a4f8:	f7ff bf98 	b.w	800a42c <std>
 800a4fc:	2000cea0 	.word	0x2000cea0
 800a500:	2000cd68 	.word	0x2000cd68
 800a504:	0800a475 	.word	0x0800a475

0800a508 <__sfp_lock_acquire>:
 800a508:	4801      	ldr	r0, [pc, #4]	; (800a510 <__sfp_lock_acquire+0x8>)
 800a50a:	f000 b953 	b.w	800a7b4 <__retarget_lock_acquire_recursive>
 800a50e:	bf00      	nop
 800a510:	2000cea9 	.word	0x2000cea9

0800a514 <__sfp_lock_release>:
 800a514:	4801      	ldr	r0, [pc, #4]	; (800a51c <__sfp_lock_release+0x8>)
 800a516:	f000 b94e 	b.w	800a7b6 <__retarget_lock_release_recursive>
 800a51a:	bf00      	nop
 800a51c:	2000cea9 	.word	0x2000cea9

0800a520 <__sinit>:
 800a520:	b510      	push	{r4, lr}
 800a522:	4604      	mov	r4, r0
 800a524:	f7ff fff0 	bl	800a508 <__sfp_lock_acquire>
 800a528:	6a23      	ldr	r3, [r4, #32]
 800a52a:	b11b      	cbz	r3, 800a534 <__sinit+0x14>
 800a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a530:	f7ff bff0 	b.w	800a514 <__sfp_lock_release>
 800a534:	4b04      	ldr	r3, [pc, #16]	; (800a548 <__sinit+0x28>)
 800a536:	6223      	str	r3, [r4, #32]
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <__sinit+0x2c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1f5      	bne.n	800a52c <__sinit+0xc>
 800a540:	f7ff ffc4 	bl	800a4cc <global_stdio_init.part.0>
 800a544:	e7f2      	b.n	800a52c <__sinit+0xc>
 800a546:	bf00      	nop
 800a548:	0800a48d 	.word	0x0800a48d
 800a54c:	2000cea0 	.word	0x2000cea0

0800a550 <_fwalk_sglue>:
 800a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4607      	mov	r7, r0
 800a556:	4688      	mov	r8, r1
 800a558:	4614      	mov	r4, r2
 800a55a:	2600      	movs	r6, #0
 800a55c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a560:	f1b9 0901 	subs.w	r9, r9, #1
 800a564:	d505      	bpl.n	800a572 <_fwalk_sglue+0x22>
 800a566:	6824      	ldr	r4, [r4, #0]
 800a568:	2c00      	cmp	r4, #0
 800a56a:	d1f7      	bne.n	800a55c <_fwalk_sglue+0xc>
 800a56c:	4630      	mov	r0, r6
 800a56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d907      	bls.n	800a588 <_fwalk_sglue+0x38>
 800a578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a57c:	3301      	adds	r3, #1
 800a57e:	d003      	beq.n	800a588 <_fwalk_sglue+0x38>
 800a580:	4629      	mov	r1, r5
 800a582:	4638      	mov	r0, r7
 800a584:	47c0      	blx	r8
 800a586:	4306      	orrs	r6, r0
 800a588:	3568      	adds	r5, #104	; 0x68
 800a58a:	e7e9      	b.n	800a560 <_fwalk_sglue+0x10>

0800a58c <sniprintf>:
 800a58c:	b40c      	push	{r2, r3}
 800a58e:	b530      	push	{r4, r5, lr}
 800a590:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <sniprintf+0x64>)
 800a592:	1e0c      	subs	r4, r1, #0
 800a594:	681d      	ldr	r5, [r3, #0]
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	da08      	bge.n	800a5ac <sniprintf+0x20>
 800a59a:	238b      	movs	r3, #139	; 0x8b
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a2:	b01d      	add	sp, #116	; 0x74
 800a5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a8:	b002      	add	sp, #8
 800a5aa:	4770      	bx	lr
 800a5ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a5b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5b4:	bf14      	ite	ne
 800a5b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5ba:	4623      	moveq	r3, r4
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	9307      	str	r3, [sp, #28]
 800a5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5c4:	9002      	str	r0, [sp, #8]
 800a5c6:	9006      	str	r0, [sp, #24]
 800a5c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5ce:	ab21      	add	r3, sp, #132	; 0x84
 800a5d0:	a902      	add	r1, sp, #8
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	f001 fc3f 	bl	800be58 <_svfiprintf_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	bfbc      	itt	lt
 800a5de:	238b      	movlt	r3, #139	; 0x8b
 800a5e0:	602b      	strlt	r3, [r5, #0]
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d0dd      	beq.n	800a5a2 <sniprintf+0x16>
 800a5e6:	9b02      	ldr	r3, [sp, #8]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]
 800a5ec:	e7d9      	b.n	800a5a2 <sniprintf+0x16>
 800a5ee:	bf00      	nop
 800a5f0:	20000690 	.word	0x20000690

0800a5f4 <siprintf>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	b500      	push	{lr}
 800a5f8:	b09c      	sub	sp, #112	; 0x70
 800a5fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	9006      	str	r0, [sp, #24]
 800a600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a604:	4809      	ldr	r0, [pc, #36]	; (800a62c <siprintf+0x38>)
 800a606:	9107      	str	r1, [sp, #28]
 800a608:	9104      	str	r1, [sp, #16]
 800a60a:	4909      	ldr	r1, [pc, #36]	; (800a630 <siprintf+0x3c>)
 800a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a610:	9105      	str	r1, [sp, #20]
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	a902      	add	r1, sp, #8
 800a618:	f001 fc1e 	bl	800be58 <_svfiprintf_r>
 800a61c:	9b02      	ldr	r3, [sp, #8]
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	b01c      	add	sp, #112	; 0x70
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b003      	add	sp, #12
 800a62a:	4770      	bx	lr
 800a62c:	20000690 	.word	0x20000690
 800a630:	ffff0208 	.word	0xffff0208

0800a634 <__sread>:
 800a634:	b510      	push	{r4, lr}
 800a636:	460c      	mov	r4, r1
 800a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63c:	f000 f86c 	bl	800a718 <_read_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	bfab      	itete	ge
 800a644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a646:	89a3      	ldrhlt	r3, [r4, #12]
 800a648:	181b      	addge	r3, r3, r0
 800a64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a64e:	bfac      	ite	ge
 800a650:	6563      	strge	r3, [r4, #84]	; 0x54
 800a652:	81a3      	strhlt	r3, [r4, #12]
 800a654:	bd10      	pop	{r4, pc}

0800a656 <__swrite>:
 800a656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65a:	461f      	mov	r7, r3
 800a65c:	898b      	ldrh	r3, [r1, #12]
 800a65e:	05db      	lsls	r3, r3, #23
 800a660:	4605      	mov	r5, r0
 800a662:	460c      	mov	r4, r1
 800a664:	4616      	mov	r6, r2
 800a666:	d505      	bpl.n	800a674 <__swrite+0x1e>
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	2302      	movs	r3, #2
 800a66e:	2200      	movs	r2, #0
 800a670:	f000 f840 	bl	800a6f4 <_lseek_r>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	4632      	mov	r2, r6
 800a682:	463b      	mov	r3, r7
 800a684:	4628      	mov	r0, r5
 800a686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68a:	f000 b857 	b.w	800a73c <_write_r>

0800a68e <__sseek>:
 800a68e:	b510      	push	{r4, lr}
 800a690:	460c      	mov	r4, r1
 800a692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a696:	f000 f82d 	bl	800a6f4 <_lseek_r>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	bf15      	itete	ne
 800a6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6aa:	81a3      	strheq	r3, [r4, #12]
 800a6ac:	bf18      	it	ne
 800a6ae:	81a3      	strhne	r3, [r4, #12]
 800a6b0:	bd10      	pop	{r4, pc}

0800a6b2 <__sclose>:
 800a6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b6:	f000 b80d 	b.w	800a6d4 <_close_r>

0800a6ba <memset>:
 800a6ba:	4402      	add	r2, r0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d100      	bne.n	800a6c4 <memset+0xa>
 800a6c2:	4770      	bx	lr
 800a6c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c8:	e7f9      	b.n	800a6be <memset+0x4>
	...

0800a6cc <_localeconv_r>:
 800a6cc:	4800      	ldr	r0, [pc, #0]	; (800a6d0 <_localeconv_r+0x4>)
 800a6ce:	4770      	bx	lr
 800a6d0:	20000784 	.word	0x20000784

0800a6d4 <_close_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d06      	ldr	r5, [pc, #24]	; (800a6f0 <_close_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	602b      	str	r3, [r5, #0]
 800a6e0:	f7f7 ff95 	bl	800260e <_close>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_close_r+0x1a>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_close_r+0x1a>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	2000cea4 	.word	0x2000cea4

0800a6f4 <_lseek_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_lseek_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f7 ffaa 	bl	800265c <_lseek>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_lseek_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_lseek_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	2000cea4 	.word	0x2000cea4

0800a718 <_read_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d07      	ldr	r5, [pc, #28]	; (800a738 <_read_r+0x20>)
 800a71c:	4604      	mov	r4, r0
 800a71e:	4608      	mov	r0, r1
 800a720:	4611      	mov	r1, r2
 800a722:	2200      	movs	r2, #0
 800a724:	602a      	str	r2, [r5, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	f7f7 ff38 	bl	800259c <_read>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_read_r+0x1e>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_read_r+0x1e>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	2000cea4 	.word	0x2000cea4

0800a73c <_write_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	; (800a75c <_write_r+0x20>)
 800a740:	4604      	mov	r4, r0
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	2200      	movs	r2, #0
 800a748:	602a      	str	r2, [r5, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f7f7 ff43 	bl	80025d6 <_write>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_write_r+0x1e>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_write_r+0x1e>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	2000cea4 	.word	0x2000cea4

0800a760 <__errno>:
 800a760:	4b01      	ldr	r3, [pc, #4]	; (800a768 <__errno+0x8>)
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	20000690 	.word	0x20000690

0800a76c <__libc_init_array>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	4d0d      	ldr	r5, [pc, #52]	; (800a7a4 <__libc_init_array+0x38>)
 800a770:	4c0d      	ldr	r4, [pc, #52]	; (800a7a8 <__libc_init_array+0x3c>)
 800a772:	1b64      	subs	r4, r4, r5
 800a774:	10a4      	asrs	r4, r4, #2
 800a776:	2600      	movs	r6, #0
 800a778:	42a6      	cmp	r6, r4
 800a77a:	d109      	bne.n	800a790 <__libc_init_array+0x24>
 800a77c:	4d0b      	ldr	r5, [pc, #44]	; (800a7ac <__libc_init_array+0x40>)
 800a77e:	4c0c      	ldr	r4, [pc, #48]	; (800a7b0 <__libc_init_array+0x44>)
 800a780:	f003 fb62 	bl	800de48 <_init>
 800a784:	1b64      	subs	r4, r4, r5
 800a786:	10a4      	asrs	r4, r4, #2
 800a788:	2600      	movs	r6, #0
 800a78a:	42a6      	cmp	r6, r4
 800a78c:	d105      	bne.n	800a79a <__libc_init_array+0x2e>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	f855 3b04 	ldr.w	r3, [r5], #4
 800a794:	4798      	blx	r3
 800a796:	3601      	adds	r6, #1
 800a798:	e7ee      	b.n	800a778 <__libc_init_array+0xc>
 800a79a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79e:	4798      	blx	r3
 800a7a0:	3601      	adds	r6, #1
 800a7a2:	e7f2      	b.n	800a78a <__libc_init_array+0x1e>
 800a7a4:	08021900 	.word	0x08021900
 800a7a8:	08021900 	.word	0x08021900
 800a7ac:	08021900 	.word	0x08021900
 800a7b0:	08021904 	.word	0x08021904

0800a7b4 <__retarget_lock_acquire_recursive>:
 800a7b4:	4770      	bx	lr

0800a7b6 <__retarget_lock_release_recursive>:
 800a7b6:	4770      	bx	lr

0800a7b8 <quorem>:
 800a7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	6903      	ldr	r3, [r0, #16]
 800a7be:	690c      	ldr	r4, [r1, #16]
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	db7e      	blt.n	800a8c4 <quorem+0x10c>
 800a7c6:	3c01      	subs	r4, #1
 800a7c8:	f101 0814 	add.w	r8, r1, #20
 800a7cc:	f100 0514 	add.w	r5, r0, #20
 800a7d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7ee:	d331      	bcc.n	800a854 <quorem+0x9c>
 800a7f0:	f04f 0e00 	mov.w	lr, #0
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	46ac      	mov	ip, r5
 800a7f8:	46f2      	mov	sl, lr
 800a7fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7fe:	b293      	uxth	r3, r2
 800a800:	fb06 e303 	mla	r3, r6, r3, lr
 800a804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a808:	0c1a      	lsrs	r2, r3, #16
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	ebaa 0303 	sub.w	r3, sl, r3
 800a810:	f8dc a000 	ldr.w	sl, [ip]
 800a814:	fa13 f38a 	uxtah	r3, r3, sl
 800a818:	fb06 220e 	mla	r2, r6, lr, r2
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a824:	b292      	uxth	r2, r2
 800a826:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a82a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a82e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a832:	4581      	cmp	r9, r0
 800a834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a838:	f84c 3b04 	str.w	r3, [ip], #4
 800a83c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a840:	d2db      	bcs.n	800a7fa <quorem+0x42>
 800a842:	f855 300b 	ldr.w	r3, [r5, fp]
 800a846:	b92b      	cbnz	r3, 800a854 <quorem+0x9c>
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	429d      	cmp	r5, r3
 800a84e:	461a      	mov	r2, r3
 800a850:	d32c      	bcc.n	800a8ac <quorem+0xf4>
 800a852:	613c      	str	r4, [r7, #16]
 800a854:	4638      	mov	r0, r7
 800a856:	f001 f9a5 	bl	800bba4 <__mcmp>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	db22      	blt.n	800a8a4 <quorem+0xec>
 800a85e:	3601      	adds	r6, #1
 800a860:	4629      	mov	r1, r5
 800a862:	2000      	movs	r0, #0
 800a864:	f858 2b04 	ldr.w	r2, [r8], #4
 800a868:	f8d1 c000 	ldr.w	ip, [r1]
 800a86c:	b293      	uxth	r3, r2
 800a86e:	1ac3      	subs	r3, r0, r3
 800a870:	0c12      	lsrs	r2, r2, #16
 800a872:	fa13 f38c 	uxtah	r3, r3, ip
 800a876:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a87a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a87e:	b29b      	uxth	r3, r3
 800a880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a884:	45c1      	cmp	r9, r8
 800a886:	f841 3b04 	str.w	r3, [r1], #4
 800a88a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a88e:	d2e9      	bcs.n	800a864 <quorem+0xac>
 800a890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a898:	b922      	cbnz	r2, 800a8a4 <quorem+0xec>
 800a89a:	3b04      	subs	r3, #4
 800a89c:	429d      	cmp	r5, r3
 800a89e:	461a      	mov	r2, r3
 800a8a0:	d30a      	bcc.n	800a8b8 <quorem+0x100>
 800a8a2:	613c      	str	r4, [r7, #16]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	3b04      	subs	r3, #4
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	d1ce      	bne.n	800a852 <quorem+0x9a>
 800a8b4:	3c01      	subs	r4, #1
 800a8b6:	e7c9      	b.n	800a84c <quorem+0x94>
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	3b04      	subs	r3, #4
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d1f0      	bne.n	800a8a2 <quorem+0xea>
 800a8c0:	3c01      	subs	r4, #1
 800a8c2:	e7eb      	b.n	800a89c <quorem+0xe4>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7ee      	b.n	800a8a6 <quorem+0xee>

0800a8c8 <_dtoa_r>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	ed2d 8b04 	vpush	{d8-d9}
 800a8d0:	69c5      	ldr	r5, [r0, #28]
 800a8d2:	b093      	sub	sp, #76	; 0x4c
 800a8d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8d8:	ec57 6b10 	vmov	r6, r7, d0
 800a8dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8e0:	9107      	str	r1, [sp, #28]
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e8:	b975      	cbnz	r5, 800a908 <_dtoa_r+0x40>
 800a8ea:	2010      	movs	r0, #16
 800a8ec:	f000 fe2a 	bl	800b544 <malloc>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	61e0      	str	r0, [r4, #28]
 800a8f4:	b920      	cbnz	r0, 800a900 <_dtoa_r+0x38>
 800a8f6:	4bae      	ldr	r3, [pc, #696]	; (800abb0 <_dtoa_r+0x2e8>)
 800a8f8:	21ef      	movs	r1, #239	; 0xef
 800a8fa:	48ae      	ldr	r0, [pc, #696]	; (800abb4 <_dtoa_r+0x2ec>)
 800a8fc:	f001 fc90 	bl	800c220 <__assert_func>
 800a900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a904:	6005      	str	r5, [r0, #0]
 800a906:	60c5      	str	r5, [r0, #12]
 800a908:	69e3      	ldr	r3, [r4, #28]
 800a90a:	6819      	ldr	r1, [r3, #0]
 800a90c:	b151      	cbz	r1, 800a924 <_dtoa_r+0x5c>
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	604a      	str	r2, [r1, #4]
 800a912:	2301      	movs	r3, #1
 800a914:	4093      	lsls	r3, r2
 800a916:	608b      	str	r3, [r1, #8]
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 ff07 	bl	800b72c <_Bfree>
 800a91e:	69e3      	ldr	r3, [r4, #28]
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	1e3b      	subs	r3, r7, #0
 800a926:	bfbb      	ittet	lt
 800a928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a92c:	9303      	strlt	r3, [sp, #12]
 800a92e:	2300      	movge	r3, #0
 800a930:	2201      	movlt	r2, #1
 800a932:	bfac      	ite	ge
 800a934:	f8c8 3000 	strge.w	r3, [r8]
 800a938:	f8c8 2000 	strlt.w	r2, [r8]
 800a93c:	4b9e      	ldr	r3, [pc, #632]	; (800abb8 <_dtoa_r+0x2f0>)
 800a93e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a942:	ea33 0308 	bics.w	r3, r3, r8
 800a946:	d11b      	bne.n	800a980 <_dtoa_r+0xb8>
 800a948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a94a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a954:	4333      	orrs	r3, r6
 800a956:	f000 8593 	beq.w	800b480 <_dtoa_r+0xbb8>
 800a95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a95c:	b963      	cbnz	r3, 800a978 <_dtoa_r+0xb0>
 800a95e:	4b97      	ldr	r3, [pc, #604]	; (800abbc <_dtoa_r+0x2f4>)
 800a960:	e027      	b.n	800a9b2 <_dtoa_r+0xea>
 800a962:	4b97      	ldr	r3, [pc, #604]	; (800abc0 <_dtoa_r+0x2f8>)
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	9800      	ldr	r0, [sp, #0]
 800a96e:	b013      	add	sp, #76	; 0x4c
 800a970:	ecbd 8b04 	vpop	{d8-d9}
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	4b90      	ldr	r3, [pc, #576]	; (800abbc <_dtoa_r+0x2f4>)
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	3303      	adds	r3, #3
 800a97e:	e7f3      	b.n	800a968 <_dtoa_r+0xa0>
 800a980:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a984:	2200      	movs	r2, #0
 800a986:	ec51 0b17 	vmov	r0, r1, d7
 800a98a:	eeb0 8a47 	vmov.f32	s16, s14
 800a98e:	eef0 8a67 	vmov.f32	s17, s15
 800a992:	2300      	movs	r3, #0
 800a994:	f7f6 f918 	bl	8000bc8 <__aeabi_dcmpeq>
 800a998:	4681      	mov	r9, r0
 800a99a:	b160      	cbz	r0, 800a9b6 <_dtoa_r+0xee>
 800a99c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a99e:	2301      	movs	r3, #1
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8568 	beq.w	800b47a <_dtoa_r+0xbb2>
 800a9aa:	4b86      	ldr	r3, [pc, #536]	; (800abc4 <_dtoa_r+0x2fc>)
 800a9ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	e7da      	b.n	800a96c <_dtoa_r+0xa4>
 800a9b6:	aa10      	add	r2, sp, #64	; 0x40
 800a9b8:	a911      	add	r1, sp, #68	; 0x44
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a9c0:	eef0 0a68 	vmov.f32	s1, s17
 800a9c4:	f001 f994 	bl	800bcf0 <__d2b>
 800a9c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	d07f      	beq.n	800aad2 <_dtoa_r+0x20a>
 800a9d2:	ee18 3a90 	vmov	r3, s17
 800a9d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9de:	ec51 0b18 	vmov	r0, r1, d8
 800a9e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4b75      	ldr	r3, [pc, #468]	; (800abc8 <_dtoa_r+0x300>)
 800a9f4:	f7f5 fcc8 	bl	8000388 <__aeabi_dsub>
 800a9f8:	a367      	add	r3, pc, #412	; (adr r3, 800ab98 <_dtoa_r+0x2d0>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fe7b 	bl	80006f8 <__aeabi_dmul>
 800aa02:	a367      	add	r3, pc, #412	; (adr r3, 800aba0 <_dtoa_r+0x2d8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fcc0 	bl	800038c <__adddf3>
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	4628      	mov	r0, r5
 800aa10:	460f      	mov	r7, r1
 800aa12:	f7f5 fe07 	bl	8000624 <__aeabi_i2d>
 800aa16:	a364      	add	r3, pc, #400	; (adr r3, 800aba8 <_dtoa_r+0x2e0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fe6c 	bl	80006f8 <__aeabi_dmul>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4630      	mov	r0, r6
 800aa26:	4639      	mov	r1, r7
 800aa28:	f7f5 fcb0 	bl	800038c <__adddf3>
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	f7f6 f912 	bl	8000c58 <__aeabi_d2iz>
 800aa34:	2200      	movs	r2, #0
 800aa36:	4683      	mov	fp, r0
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f6 f8cd 	bl	8000bdc <__aeabi_dcmplt>
 800aa42:	b148      	cbz	r0, 800aa58 <_dtoa_r+0x190>
 800aa44:	4658      	mov	r0, fp
 800aa46:	f7f5 fded 	bl	8000624 <__aeabi_i2d>
 800aa4a:	4632      	mov	r2, r6
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	f7f6 f8bb 	bl	8000bc8 <__aeabi_dcmpeq>
 800aa52:	b908      	cbnz	r0, 800aa58 <_dtoa_r+0x190>
 800aa54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa58:	f1bb 0f16 	cmp.w	fp, #22
 800aa5c:	d857      	bhi.n	800ab0e <_dtoa_r+0x246>
 800aa5e:	4b5b      	ldr	r3, [pc, #364]	; (800abcc <_dtoa_r+0x304>)
 800aa60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	ec51 0b18 	vmov	r0, r1, d8
 800aa6c:	f7f6 f8b6 	bl	8000bdc <__aeabi_dcmplt>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d04e      	beq.n	800ab12 <_dtoa_r+0x24a>
 800aa74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa78:	2300      	movs	r3, #0
 800aa7a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa7e:	1b5b      	subs	r3, r3, r5
 800aa80:	1e5a      	subs	r2, r3, #1
 800aa82:	bf45      	ittet	mi
 800aa84:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa88:	9305      	strmi	r3, [sp, #20]
 800aa8a:	2300      	movpl	r3, #0
 800aa8c:	2300      	movmi	r3, #0
 800aa8e:	9206      	str	r2, [sp, #24]
 800aa90:	bf54      	ite	pl
 800aa92:	9305      	strpl	r3, [sp, #20]
 800aa94:	9306      	strmi	r3, [sp, #24]
 800aa96:	f1bb 0f00 	cmp.w	fp, #0
 800aa9a:	db3c      	blt.n	800ab16 <_dtoa_r+0x24e>
 800aa9c:	9b06      	ldr	r3, [sp, #24]
 800aa9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aaa2:	445b      	add	r3, fp
 800aaa4:	9306      	str	r3, [sp, #24]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9308      	str	r3, [sp, #32]
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	2b09      	cmp	r3, #9
 800aaae:	d868      	bhi.n	800ab82 <_dtoa_r+0x2ba>
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	bfc4      	itt	gt
 800aab4:	3b04      	subgt	r3, #4
 800aab6:	9307      	strgt	r3, [sp, #28]
 800aab8:	9b07      	ldr	r3, [sp, #28]
 800aaba:	f1a3 0302 	sub.w	r3, r3, #2
 800aabe:	bfcc      	ite	gt
 800aac0:	2500      	movgt	r5, #0
 800aac2:	2501      	movle	r5, #1
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	f200 8085 	bhi.w	800abd4 <_dtoa_r+0x30c>
 800aaca:	e8df f003 	tbb	[pc, r3]
 800aace:	3b2e      	.short	0x3b2e
 800aad0:	5839      	.short	0x5839
 800aad2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aad6:	441d      	add	r5, r3
 800aad8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aadc:	2b20      	cmp	r3, #32
 800aade:	bfc1      	itttt	gt
 800aae0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aae4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aae8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aaec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aaf0:	bfd6      	itet	le
 800aaf2:	f1c3 0320 	rsble	r3, r3, #32
 800aaf6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aafa:	fa06 f003 	lslle.w	r0, r6, r3
 800aafe:	f7f5 fd81 	bl	8000604 <__aeabi_ui2d>
 800ab02:	2201      	movs	r2, #1
 800ab04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ab08:	3d01      	subs	r5, #1
 800ab0a:	920e      	str	r2, [sp, #56]	; 0x38
 800ab0c:	e76f      	b.n	800a9ee <_dtoa_r+0x126>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e7b3      	b.n	800aa7a <_dtoa_r+0x1b2>
 800ab12:	900c      	str	r0, [sp, #48]	; 0x30
 800ab14:	e7b2      	b.n	800aa7c <_dtoa_r+0x1b4>
 800ab16:	9b05      	ldr	r3, [sp, #20]
 800ab18:	eba3 030b 	sub.w	r3, r3, fp
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	f1cb 0300 	rsb	r3, fp, #0
 800ab22:	9308      	str	r3, [sp, #32]
 800ab24:	2300      	movs	r3, #0
 800ab26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab28:	e7bf      	b.n	800aaaa <_dtoa_r+0x1e2>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc52      	bgt.n	800abda <_dtoa_r+0x312>
 800ab34:	2301      	movs	r3, #1
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab3e:	e00b      	b.n	800ab58 <_dtoa_r+0x290>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e7f3      	b.n	800ab2c <_dtoa_r+0x264>
 800ab44:	2300      	movs	r3, #0
 800ab46:	9309      	str	r3, [sp, #36]	; 0x24
 800ab48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab4a:	445b      	add	r3, fp
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	bfb8      	it	lt
 800ab56:	2301      	movlt	r3, #1
 800ab58:	69e0      	ldr	r0, [r4, #28]
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	2204      	movs	r2, #4
 800ab5e:	f102 0614 	add.w	r6, r2, #20
 800ab62:	429e      	cmp	r6, r3
 800ab64:	d93d      	bls.n	800abe2 <_dtoa_r+0x31a>
 800ab66:	6041      	str	r1, [r0, #4]
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 fd9f 	bl	800b6ac <_Balloc>
 800ab6e:	9000      	str	r0, [sp, #0]
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d139      	bne.n	800abe8 <_dtoa_r+0x320>
 800ab74:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <_dtoa_r+0x308>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 11af 	movw	r1, #431	; 0x1af
 800ab7c:	e6bd      	b.n	800a8fa <_dtoa_r+0x32>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e7e1      	b.n	800ab46 <_dtoa_r+0x27e>
 800ab82:	2501      	movs	r5, #1
 800ab84:	2300      	movs	r3, #0
 800ab86:	9307      	str	r3, [sp, #28]
 800ab88:	9509      	str	r5, [sp, #36]	; 0x24
 800ab8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	2200      	movs	r2, #0
 800ab94:	2312      	movs	r3, #18
 800ab96:	e7d1      	b.n	800ab3c <_dtoa_r+0x274>
 800ab98:	636f4361 	.word	0x636f4361
 800ab9c:	3fd287a7 	.word	0x3fd287a7
 800aba0:	8b60c8b3 	.word	0x8b60c8b3
 800aba4:	3fc68a28 	.word	0x3fc68a28
 800aba8:	509f79fb 	.word	0x509f79fb
 800abac:	3fd34413 	.word	0x3fd34413
 800abb0:	0802137d 	.word	0x0802137d
 800abb4:	08021394 	.word	0x08021394
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	08021379 	.word	0x08021379
 800abc0:	08021370 	.word	0x08021370
 800abc4:	0802134d 	.word	0x0802134d
 800abc8:	3ff80000 	.word	0x3ff80000
 800abcc:	08021480 	.word	0x08021480
 800abd0:	080213ec 	.word	0x080213ec
 800abd4:	2301      	movs	r3, #1
 800abd6:	9309      	str	r3, [sp, #36]	; 0x24
 800abd8:	e7d7      	b.n	800ab8a <_dtoa_r+0x2c2>
 800abda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	e7ba      	b.n	800ab58 <_dtoa_r+0x290>
 800abe2:	3101      	adds	r1, #1
 800abe4:	0052      	lsls	r2, r2, #1
 800abe6:	e7ba      	b.n	800ab5e <_dtoa_r+0x296>
 800abe8:	69e3      	ldr	r3, [r4, #28]
 800abea:	9a00      	ldr	r2, [sp, #0]
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	2b0e      	cmp	r3, #14
 800abf2:	f200 80a8 	bhi.w	800ad46 <_dtoa_r+0x47e>
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	f000 80a5 	beq.w	800ad46 <_dtoa_r+0x47e>
 800abfc:	f1bb 0f00 	cmp.w	fp, #0
 800ac00:	dd38      	ble.n	800ac74 <_dtoa_r+0x3ac>
 800ac02:	4bc0      	ldr	r3, [pc, #768]	; (800af04 <_dtoa_r+0x63c>)
 800ac04:	f00b 020f 	and.w	r2, fp, #15
 800ac08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac10:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ac14:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac18:	d019      	beq.n	800ac4e <_dtoa_r+0x386>
 800ac1a:	4bbb      	ldr	r3, [pc, #748]	; (800af08 <_dtoa_r+0x640>)
 800ac1c:	ec51 0b18 	vmov	r0, r1, d8
 800ac20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac24:	f7f5 fe92 	bl	800094c <__aeabi_ddiv>
 800ac28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2c:	f008 080f 	and.w	r8, r8, #15
 800ac30:	2503      	movs	r5, #3
 800ac32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800af08 <_dtoa_r+0x640>
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	d10a      	bne.n	800ac52 <_dtoa_r+0x38a>
 800ac3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac40:	4632      	mov	r2, r6
 800ac42:	463b      	mov	r3, r7
 800ac44:	f7f5 fe82 	bl	800094c <__aeabi_ddiv>
 800ac48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac4c:	e02b      	b.n	800aca6 <_dtoa_r+0x3de>
 800ac4e:	2502      	movs	r5, #2
 800ac50:	e7ef      	b.n	800ac32 <_dtoa_r+0x36a>
 800ac52:	f018 0f01 	tst.w	r8, #1
 800ac56:	d008      	beq.n	800ac6a <_dtoa_r+0x3a2>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac60:	f7f5 fd4a 	bl	80006f8 <__aeabi_dmul>
 800ac64:	3501      	adds	r5, #1
 800ac66:	4606      	mov	r6, r0
 800ac68:	460f      	mov	r7, r1
 800ac6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac6e:	f109 0908 	add.w	r9, r9, #8
 800ac72:	e7e0      	b.n	800ac36 <_dtoa_r+0x36e>
 800ac74:	f000 809f 	beq.w	800adb6 <_dtoa_r+0x4ee>
 800ac78:	f1cb 0600 	rsb	r6, fp, #0
 800ac7c:	4ba1      	ldr	r3, [pc, #644]	; (800af04 <_dtoa_r+0x63c>)
 800ac7e:	4fa2      	ldr	r7, [pc, #648]	; (800af08 <_dtoa_r+0x640>)
 800ac80:	f006 020f 	and.w	r2, r6, #15
 800ac84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	ec51 0b18 	vmov	r0, r1, d8
 800ac90:	f7f5 fd32 	bl	80006f8 <__aeabi_dmul>
 800ac94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac98:	1136      	asrs	r6, r6, #4
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2502      	movs	r5, #2
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d17e      	bne.n	800ada0 <_dtoa_r+0x4d8>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1d0      	bne.n	800ac48 <_dtoa_r+0x380>
 800aca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aca8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8084 	beq.w	800adba <_dtoa_r+0x4f2>
 800acb2:	4b96      	ldr	r3, [pc, #600]	; (800af0c <_dtoa_r+0x644>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	4640      	mov	r0, r8
 800acb8:	4649      	mov	r1, r9
 800acba:	f7f5 ff8f 	bl	8000bdc <__aeabi_dcmplt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d07b      	beq.n	800adba <_dtoa_r+0x4f2>
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d078      	beq.n	800adba <_dtoa_r+0x4f2>
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	dd39      	ble.n	800ad42 <_dtoa_r+0x47a>
 800acce:	4b90      	ldr	r3, [pc, #576]	; (800af10 <_dtoa_r+0x648>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	f7f5 fd0f 	bl	80006f8 <__aeabi_dmul>
 800acda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acde:	9e01      	ldr	r6, [sp, #4]
 800ace0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ace4:	3501      	adds	r5, #1
 800ace6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acea:	4628      	mov	r0, r5
 800acec:	f7f5 fc9a 	bl	8000624 <__aeabi_i2d>
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	f7f5 fd00 	bl	80006f8 <__aeabi_dmul>
 800acf8:	4b86      	ldr	r3, [pc, #536]	; (800af14 <_dtoa_r+0x64c>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	f7f5 fb46 	bl	800038c <__adddf3>
 800ad00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad08:	9303      	str	r3, [sp, #12]
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	d158      	bne.n	800adc0 <_dtoa_r+0x4f8>
 800ad0e:	4b82      	ldr	r3, [pc, #520]	; (800af18 <_dtoa_r+0x650>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	4640      	mov	r0, r8
 800ad14:	4649      	mov	r1, r9
 800ad16:	f7f5 fb37 	bl	8000388 <__aeabi_dsub>
 800ad1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1e:	4680      	mov	r8, r0
 800ad20:	4689      	mov	r9, r1
 800ad22:	f7f5 ff79 	bl	8000c18 <__aeabi_dcmpgt>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f040 8296 	bne.w	800b258 <_dtoa_r+0x990>
 800ad2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad30:	4640      	mov	r0, r8
 800ad32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad36:	4649      	mov	r1, r9
 800ad38:	f7f5 ff50 	bl	8000bdc <__aeabi_dcmplt>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f040 8289 	bne.w	800b254 <_dtoa_r+0x98c>
 800ad42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f2c0 814e 	blt.w	800afea <_dtoa_r+0x722>
 800ad4e:	f1bb 0f0e 	cmp.w	fp, #14
 800ad52:	f300 814a 	bgt.w	800afea <_dtoa_r+0x722>
 800ad56:	4b6b      	ldr	r3, [pc, #428]	; (800af04 <_dtoa_r+0x63c>)
 800ad58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f280 80dc 	bge.w	800af20 <_dtoa_r+0x658>
 800ad68:	9b04      	ldr	r3, [sp, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f300 80d8 	bgt.w	800af20 <_dtoa_r+0x658>
 800ad70:	f040 826f 	bne.w	800b252 <_dtoa_r+0x98a>
 800ad74:	4b68      	ldr	r3, [pc, #416]	; (800af18 <_dtoa_r+0x650>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	f7f5 fcbc 	bl	80006f8 <__aeabi_dmul>
 800ad80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad84:	f7f5 ff3e 	bl	8000c04 <__aeabi_dcmpge>
 800ad88:	9e04      	ldr	r6, [sp, #16]
 800ad8a:	4637      	mov	r7, r6
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f040 8245 	bne.w	800b21c <_dtoa_r+0x954>
 800ad92:	9d00      	ldr	r5, [sp, #0]
 800ad94:	2331      	movs	r3, #49	; 0x31
 800ad96:	f805 3b01 	strb.w	r3, [r5], #1
 800ad9a:	f10b 0b01 	add.w	fp, fp, #1
 800ad9e:	e241      	b.n	800b224 <_dtoa_r+0x95c>
 800ada0:	07f2      	lsls	r2, r6, #31
 800ada2:	d505      	bpl.n	800adb0 <_dtoa_r+0x4e8>
 800ada4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada8:	f7f5 fca6 	bl	80006f8 <__aeabi_dmul>
 800adac:	3501      	adds	r5, #1
 800adae:	2301      	movs	r3, #1
 800adb0:	1076      	asrs	r6, r6, #1
 800adb2:	3708      	adds	r7, #8
 800adb4:	e773      	b.n	800ac9e <_dtoa_r+0x3d6>
 800adb6:	2502      	movs	r5, #2
 800adb8:	e775      	b.n	800aca6 <_dtoa_r+0x3de>
 800adba:	9e04      	ldr	r6, [sp, #16]
 800adbc:	465f      	mov	r7, fp
 800adbe:	e792      	b.n	800ace6 <_dtoa_r+0x41e>
 800adc0:	9900      	ldr	r1, [sp, #0]
 800adc2:	4b50      	ldr	r3, [pc, #320]	; (800af04 <_dtoa_r+0x63c>)
 800adc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adc8:	4431      	add	r1, r6
 800adca:	9102      	str	r1, [sp, #8]
 800adcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adce:	eeb0 9a47 	vmov.f32	s18, s14
 800add2:	eef0 9a67 	vmov.f32	s19, s15
 800add6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adde:	2900      	cmp	r1, #0
 800ade0:	d044      	beq.n	800ae6c <_dtoa_r+0x5a4>
 800ade2:	494e      	ldr	r1, [pc, #312]	; (800af1c <_dtoa_r+0x654>)
 800ade4:	2000      	movs	r0, #0
 800ade6:	f7f5 fdb1 	bl	800094c <__aeabi_ddiv>
 800adea:	ec53 2b19 	vmov	r2, r3, d9
 800adee:	f7f5 facb 	bl	8000388 <__aeabi_dsub>
 800adf2:	9d00      	ldr	r5, [sp, #0]
 800adf4:	ec41 0b19 	vmov	d9, r0, r1
 800adf8:	4649      	mov	r1, r9
 800adfa:	4640      	mov	r0, r8
 800adfc:	f7f5 ff2c 	bl	8000c58 <__aeabi_d2iz>
 800ae00:	4606      	mov	r6, r0
 800ae02:	f7f5 fc0f 	bl	8000624 <__aeabi_i2d>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	f7f5 fabb 	bl	8000388 <__aeabi_dsub>
 800ae12:	3630      	adds	r6, #48	; 0x30
 800ae14:	f805 6b01 	strb.w	r6, [r5], #1
 800ae18:	ec53 2b19 	vmov	r2, r3, d9
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	4689      	mov	r9, r1
 800ae20:	f7f5 fedc 	bl	8000bdc <__aeabi_dcmplt>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d164      	bne.n	800aef2 <_dtoa_r+0x62a>
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	4937      	ldr	r1, [pc, #220]	; (800af0c <_dtoa_r+0x644>)
 800ae2e:	2000      	movs	r0, #0
 800ae30:	f7f5 faaa 	bl	8000388 <__aeabi_dsub>
 800ae34:	ec53 2b19 	vmov	r2, r3, d9
 800ae38:	f7f5 fed0 	bl	8000bdc <__aeabi_dcmplt>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f040 80b6 	bne.w	800afae <_dtoa_r+0x6e6>
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	429d      	cmp	r5, r3
 800ae46:	f43f af7c 	beq.w	800ad42 <_dtoa_r+0x47a>
 800ae4a:	4b31      	ldr	r3, [pc, #196]	; (800af10 <_dtoa_r+0x648>)
 800ae4c:	ec51 0b19 	vmov	r0, r1, d9
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fc51 	bl	80006f8 <__aeabi_dmul>
 800ae56:	4b2e      	ldr	r3, [pc, #184]	; (800af10 <_dtoa_r+0x648>)
 800ae58:	ec41 0b19 	vmov	d9, r0, r1
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4649      	mov	r1, r9
 800ae62:	f7f5 fc49 	bl	80006f8 <__aeabi_dmul>
 800ae66:	4680      	mov	r8, r0
 800ae68:	4689      	mov	r9, r1
 800ae6a:	e7c5      	b.n	800adf8 <_dtoa_r+0x530>
 800ae6c:	ec51 0b17 	vmov	r0, r1, d7
 800ae70:	f7f5 fc42 	bl	80006f8 <__aeabi_dmul>
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	9d00      	ldr	r5, [sp, #0]
 800ae78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae7a:	ec41 0b19 	vmov	d9, r0, r1
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4640      	mov	r0, r8
 800ae82:	f7f5 fee9 	bl	8000c58 <__aeabi_d2iz>
 800ae86:	4606      	mov	r6, r0
 800ae88:	f7f5 fbcc 	bl	8000624 <__aeabi_i2d>
 800ae8c:	3630      	adds	r6, #48	; 0x30
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fa77 	bl	8000388 <__aeabi_dsub>
 800ae9a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae9e:	9b02      	ldr	r3, [sp, #8]
 800aea0:	429d      	cmp	r5, r3
 800aea2:	4680      	mov	r8, r0
 800aea4:	4689      	mov	r9, r1
 800aea6:	f04f 0200 	mov.w	r2, #0
 800aeaa:	d124      	bne.n	800aef6 <_dtoa_r+0x62e>
 800aeac:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <_dtoa_r+0x654>)
 800aeae:	ec51 0b19 	vmov	r0, r1, d9
 800aeb2:	f7f5 fa6b 	bl	800038c <__adddf3>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4640      	mov	r0, r8
 800aebc:	4649      	mov	r1, r9
 800aebe:	f7f5 feab 	bl	8000c18 <__aeabi_dcmpgt>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d173      	bne.n	800afae <_dtoa_r+0x6e6>
 800aec6:	ec53 2b19 	vmov	r2, r3, d9
 800aeca:	4914      	ldr	r1, [pc, #80]	; (800af1c <_dtoa_r+0x654>)
 800aecc:	2000      	movs	r0, #0
 800aece:	f7f5 fa5b 	bl	8000388 <__aeabi_dsub>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4640      	mov	r0, r8
 800aed8:	4649      	mov	r1, r9
 800aeda:	f7f5 fe7f 	bl	8000bdc <__aeabi_dcmplt>
 800aede:	2800      	cmp	r0, #0
 800aee0:	f43f af2f 	beq.w	800ad42 <_dtoa_r+0x47a>
 800aee4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aee6:	1e6b      	subs	r3, r5, #1
 800aee8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aeee:	2b30      	cmp	r3, #48	; 0x30
 800aef0:	d0f8      	beq.n	800aee4 <_dtoa_r+0x61c>
 800aef2:	46bb      	mov	fp, r7
 800aef4:	e04a      	b.n	800af8c <_dtoa_r+0x6c4>
 800aef6:	4b06      	ldr	r3, [pc, #24]	; (800af10 <_dtoa_r+0x648>)
 800aef8:	f7f5 fbfe 	bl	80006f8 <__aeabi_dmul>
 800aefc:	4680      	mov	r8, r0
 800aefe:	4689      	mov	r9, r1
 800af00:	e7bd      	b.n	800ae7e <_dtoa_r+0x5b6>
 800af02:	bf00      	nop
 800af04:	08021480 	.word	0x08021480
 800af08:	08021458 	.word	0x08021458
 800af0c:	3ff00000 	.word	0x3ff00000
 800af10:	40240000 	.word	0x40240000
 800af14:	401c0000 	.word	0x401c0000
 800af18:	40140000 	.word	0x40140000
 800af1c:	3fe00000 	.word	0x3fe00000
 800af20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af24:	9d00      	ldr	r5, [sp, #0]
 800af26:	4642      	mov	r2, r8
 800af28:	464b      	mov	r3, r9
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fd0d 	bl	800094c <__aeabi_ddiv>
 800af32:	f7f5 fe91 	bl	8000c58 <__aeabi_d2iz>
 800af36:	9001      	str	r0, [sp, #4]
 800af38:	f7f5 fb74 	bl	8000624 <__aeabi_i2d>
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	f7f5 fbda 	bl	80006f8 <__aeabi_dmul>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4630      	mov	r0, r6
 800af4a:	4639      	mov	r1, r7
 800af4c:	f7f5 fa1c 	bl	8000388 <__aeabi_dsub>
 800af50:	9e01      	ldr	r6, [sp, #4]
 800af52:	9f04      	ldr	r7, [sp, #16]
 800af54:	3630      	adds	r6, #48	; 0x30
 800af56:	f805 6b01 	strb.w	r6, [r5], #1
 800af5a:	9e00      	ldr	r6, [sp, #0]
 800af5c:	1bae      	subs	r6, r5, r6
 800af5e:	42b7      	cmp	r7, r6
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	d134      	bne.n	800afd0 <_dtoa_r+0x708>
 800af66:	f7f5 fa11 	bl	800038c <__adddf3>
 800af6a:	4642      	mov	r2, r8
 800af6c:	464b      	mov	r3, r9
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	f7f5 fe51 	bl	8000c18 <__aeabi_dcmpgt>
 800af76:	b9c8      	cbnz	r0, 800afac <_dtoa_r+0x6e4>
 800af78:	4642      	mov	r2, r8
 800af7a:	464b      	mov	r3, r9
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	f7f5 fe22 	bl	8000bc8 <__aeabi_dcmpeq>
 800af84:	b110      	cbz	r0, 800af8c <_dtoa_r+0x6c4>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	07db      	lsls	r3, r3, #31
 800af8a:	d40f      	bmi.n	800afac <_dtoa_r+0x6e4>
 800af8c:	4651      	mov	r1, sl
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 fbcc 	bl	800b72c <_Bfree>
 800af94:	2300      	movs	r3, #0
 800af96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af98:	702b      	strb	r3, [r5, #0]
 800af9a:	f10b 0301 	add.w	r3, fp, #1
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f43f ace2 	beq.w	800a96c <_dtoa_r+0xa4>
 800afa8:	601d      	str	r5, [r3, #0]
 800afaa:	e4df      	b.n	800a96c <_dtoa_r+0xa4>
 800afac:	465f      	mov	r7, fp
 800afae:	462b      	mov	r3, r5
 800afb0:	461d      	mov	r5, r3
 800afb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afb6:	2a39      	cmp	r2, #57	; 0x39
 800afb8:	d106      	bne.n	800afc8 <_dtoa_r+0x700>
 800afba:	9a00      	ldr	r2, [sp, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d1f7      	bne.n	800afb0 <_dtoa_r+0x6e8>
 800afc0:	9900      	ldr	r1, [sp, #0]
 800afc2:	2230      	movs	r2, #48	; 0x30
 800afc4:	3701      	adds	r7, #1
 800afc6:	700a      	strb	r2, [r1, #0]
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	3201      	adds	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	e790      	b.n	800aef2 <_dtoa_r+0x62a>
 800afd0:	4ba3      	ldr	r3, [pc, #652]	; (800b260 <_dtoa_r+0x998>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	f7f5 fb90 	bl	80006f8 <__aeabi_dmul>
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	f7f5 fdf2 	bl	8000bc8 <__aeabi_dcmpeq>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d09e      	beq.n	800af26 <_dtoa_r+0x65e>
 800afe8:	e7d0      	b.n	800af8c <_dtoa_r+0x6c4>
 800afea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afec:	2a00      	cmp	r2, #0
 800afee:	f000 80ca 	beq.w	800b186 <_dtoa_r+0x8be>
 800aff2:	9a07      	ldr	r2, [sp, #28]
 800aff4:	2a01      	cmp	r2, #1
 800aff6:	f300 80ad 	bgt.w	800b154 <_dtoa_r+0x88c>
 800affa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800affc:	2a00      	cmp	r2, #0
 800affe:	f000 80a5 	beq.w	800b14c <_dtoa_r+0x884>
 800b002:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b006:	9e08      	ldr	r6, [sp, #32]
 800b008:	9d05      	ldr	r5, [sp, #20]
 800b00a:	9a05      	ldr	r2, [sp, #20]
 800b00c:	441a      	add	r2, r3
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	9a06      	ldr	r2, [sp, #24]
 800b012:	2101      	movs	r1, #1
 800b014:	441a      	add	r2, r3
 800b016:	4620      	mov	r0, r4
 800b018:	9206      	str	r2, [sp, #24]
 800b01a:	f000 fc3d 	bl	800b898 <__i2b>
 800b01e:	4607      	mov	r7, r0
 800b020:	b165      	cbz	r5, 800b03c <_dtoa_r+0x774>
 800b022:	9b06      	ldr	r3, [sp, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	dd09      	ble.n	800b03c <_dtoa_r+0x774>
 800b028:	42ab      	cmp	r3, r5
 800b02a:	9a05      	ldr	r2, [sp, #20]
 800b02c:	bfa8      	it	ge
 800b02e:	462b      	movge	r3, r5
 800b030:	1ad2      	subs	r2, r2, r3
 800b032:	9205      	str	r2, [sp, #20]
 800b034:	9a06      	ldr	r2, [sp, #24]
 800b036:	1aed      	subs	r5, r5, r3
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	9306      	str	r3, [sp, #24]
 800b03c:	9b08      	ldr	r3, [sp, #32]
 800b03e:	b1f3      	cbz	r3, 800b07e <_dtoa_r+0x7b6>
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 80a3 	beq.w	800b18e <_dtoa_r+0x8c6>
 800b048:	2e00      	cmp	r6, #0
 800b04a:	dd10      	ble.n	800b06e <_dtoa_r+0x7a6>
 800b04c:	4639      	mov	r1, r7
 800b04e:	4632      	mov	r2, r6
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fce1 	bl	800ba18 <__pow5mult>
 800b056:	4652      	mov	r2, sl
 800b058:	4601      	mov	r1, r0
 800b05a:	4607      	mov	r7, r0
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 fc31 	bl	800b8c4 <__multiply>
 800b062:	4651      	mov	r1, sl
 800b064:	4680      	mov	r8, r0
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fb60 	bl	800b72c <_Bfree>
 800b06c:	46c2      	mov	sl, r8
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	1b9a      	subs	r2, r3, r6
 800b072:	d004      	beq.n	800b07e <_dtoa_r+0x7b6>
 800b074:	4651      	mov	r1, sl
 800b076:	4620      	mov	r0, r4
 800b078:	f000 fcce 	bl	800ba18 <__pow5mult>
 800b07c:	4682      	mov	sl, r0
 800b07e:	2101      	movs	r1, #1
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fc09 	bl	800b898 <__i2b>
 800b086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	4606      	mov	r6, r0
 800b08c:	f340 8081 	ble.w	800b192 <_dtoa_r+0x8ca>
 800b090:	461a      	mov	r2, r3
 800b092:	4601      	mov	r1, r0
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fcbf 	bl	800ba18 <__pow5mult>
 800b09a:	9b07      	ldr	r3, [sp, #28]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	4606      	mov	r6, r0
 800b0a0:	dd7a      	ble.n	800b198 <_dtoa_r+0x8d0>
 800b0a2:	f04f 0800 	mov.w	r8, #0
 800b0a6:	6933      	ldr	r3, [r6, #16]
 800b0a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0ac:	6918      	ldr	r0, [r3, #16]
 800b0ae:	f000 fba5 	bl	800b7fc <__hi0bits>
 800b0b2:	f1c0 0020 	rsb	r0, r0, #32
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	4418      	add	r0, r3
 800b0ba:	f010 001f 	ands.w	r0, r0, #31
 800b0be:	f000 8094 	beq.w	800b1ea <_dtoa_r+0x922>
 800b0c2:	f1c0 0320 	rsb	r3, r0, #32
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	f340 8085 	ble.w	800b1d6 <_dtoa_r+0x90e>
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	f1c0 001c 	rsb	r0, r0, #28
 800b0d2:	4403      	add	r3, r0
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	4403      	add	r3, r0
 800b0da:	4405      	add	r5, r0
 800b0dc:	9306      	str	r3, [sp, #24]
 800b0de:	9b05      	ldr	r3, [sp, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dd05      	ble.n	800b0f0 <_dtoa_r+0x828>
 800b0e4:	4651      	mov	r1, sl
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f000 fcef 	bl	800bacc <__lshift>
 800b0ee:	4682      	mov	sl, r0
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd05      	ble.n	800b102 <_dtoa_r+0x83a>
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fce6 	bl	800bacc <__lshift>
 800b100:	4606      	mov	r6, r0
 800b102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b104:	2b00      	cmp	r3, #0
 800b106:	d072      	beq.n	800b1ee <_dtoa_r+0x926>
 800b108:	4631      	mov	r1, r6
 800b10a:	4650      	mov	r0, sl
 800b10c:	f000 fd4a 	bl	800bba4 <__mcmp>
 800b110:	2800      	cmp	r0, #0
 800b112:	da6c      	bge.n	800b1ee <_dtoa_r+0x926>
 800b114:	2300      	movs	r3, #0
 800b116:	4651      	mov	r1, sl
 800b118:	220a      	movs	r2, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fb28 	bl	800b770 <__multadd>
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b126:	4682      	mov	sl, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 81b0 	beq.w	800b48e <_dtoa_r+0xbc6>
 800b12e:	2300      	movs	r3, #0
 800b130:	4639      	mov	r1, r7
 800b132:	220a      	movs	r2, #10
 800b134:	4620      	mov	r0, r4
 800b136:	f000 fb1b 	bl	800b770 <__multadd>
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	4607      	mov	r7, r0
 800b140:	f300 8096 	bgt.w	800b270 <_dtoa_r+0x9a8>
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	2b02      	cmp	r3, #2
 800b148:	dc59      	bgt.n	800b1fe <_dtoa_r+0x936>
 800b14a:	e091      	b.n	800b270 <_dtoa_r+0x9a8>
 800b14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b14e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b152:	e758      	b.n	800b006 <_dtoa_r+0x73e>
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	1e5e      	subs	r6, r3, #1
 800b158:	9b08      	ldr	r3, [sp, #32]
 800b15a:	42b3      	cmp	r3, r6
 800b15c:	bfbf      	itttt	lt
 800b15e:	9b08      	ldrlt	r3, [sp, #32]
 800b160:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b162:	9608      	strlt	r6, [sp, #32]
 800b164:	1af3      	sublt	r3, r6, r3
 800b166:	bfb4      	ite	lt
 800b168:	18d2      	addlt	r2, r2, r3
 800b16a:	1b9e      	subge	r6, r3, r6
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	bfbc      	itt	lt
 800b170:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b172:	2600      	movlt	r6, #0
 800b174:	2b00      	cmp	r3, #0
 800b176:	bfb7      	itett	lt
 800b178:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b17c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b180:	1a9d      	sublt	r5, r3, r2
 800b182:	2300      	movlt	r3, #0
 800b184:	e741      	b.n	800b00a <_dtoa_r+0x742>
 800b186:	9e08      	ldr	r6, [sp, #32]
 800b188:	9d05      	ldr	r5, [sp, #20]
 800b18a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b18c:	e748      	b.n	800b020 <_dtoa_r+0x758>
 800b18e:	9a08      	ldr	r2, [sp, #32]
 800b190:	e770      	b.n	800b074 <_dtoa_r+0x7ac>
 800b192:	9b07      	ldr	r3, [sp, #28]
 800b194:	2b01      	cmp	r3, #1
 800b196:	dc19      	bgt.n	800b1cc <_dtoa_r+0x904>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	b9bb      	cbnz	r3, 800b1cc <_dtoa_r+0x904>
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1a2:	b99b      	cbnz	r3, 800b1cc <_dtoa_r+0x904>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1aa:	0d1b      	lsrs	r3, r3, #20
 800b1ac:	051b      	lsls	r3, r3, #20
 800b1ae:	b183      	cbz	r3, 800b1d2 <_dtoa_r+0x90a>
 800b1b0:	9b05      	ldr	r3, [sp, #20]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9306      	str	r3, [sp, #24]
 800b1bc:	f04f 0801 	mov.w	r8, #1
 800b1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f47f af6f 	bne.w	800b0a6 <_dtoa_r+0x7de>
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	e774      	b.n	800b0b6 <_dtoa_r+0x7ee>
 800b1cc:	f04f 0800 	mov.w	r8, #0
 800b1d0:	e7f6      	b.n	800b1c0 <_dtoa_r+0x8f8>
 800b1d2:	4698      	mov	r8, r3
 800b1d4:	e7f4      	b.n	800b1c0 <_dtoa_r+0x8f8>
 800b1d6:	d082      	beq.n	800b0de <_dtoa_r+0x816>
 800b1d8:	9a05      	ldr	r2, [sp, #20]
 800b1da:	331c      	adds	r3, #28
 800b1dc:	441a      	add	r2, r3
 800b1de:	9205      	str	r2, [sp, #20]
 800b1e0:	9a06      	ldr	r2, [sp, #24]
 800b1e2:	441a      	add	r2, r3
 800b1e4:	441d      	add	r5, r3
 800b1e6:	9206      	str	r2, [sp, #24]
 800b1e8:	e779      	b.n	800b0de <_dtoa_r+0x816>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	e7f4      	b.n	800b1d8 <_dtoa_r+0x910>
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc37      	bgt.n	800b264 <_dtoa_r+0x99c>
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	dd34      	ble.n	800b264 <_dtoa_r+0x99c>
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	b963      	cbnz	r3, 800b21c <_dtoa_r+0x954>
 800b202:	4631      	mov	r1, r6
 800b204:	2205      	movs	r2, #5
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fab2 	bl	800b770 <__multadd>
 800b20c:	4601      	mov	r1, r0
 800b20e:	4606      	mov	r6, r0
 800b210:	4650      	mov	r0, sl
 800b212:	f000 fcc7 	bl	800bba4 <__mcmp>
 800b216:	2800      	cmp	r0, #0
 800b218:	f73f adbb 	bgt.w	800ad92 <_dtoa_r+0x4ca>
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	9d00      	ldr	r5, [sp, #0]
 800b220:	ea6f 0b03 	mvn.w	fp, r3
 800b224:	f04f 0800 	mov.w	r8, #0
 800b228:	4631      	mov	r1, r6
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fa7e 	bl	800b72c <_Bfree>
 800b230:	2f00      	cmp	r7, #0
 800b232:	f43f aeab 	beq.w	800af8c <_dtoa_r+0x6c4>
 800b236:	f1b8 0f00 	cmp.w	r8, #0
 800b23a:	d005      	beq.n	800b248 <_dtoa_r+0x980>
 800b23c:	45b8      	cmp	r8, r7
 800b23e:	d003      	beq.n	800b248 <_dtoa_r+0x980>
 800b240:	4641      	mov	r1, r8
 800b242:	4620      	mov	r0, r4
 800b244:	f000 fa72 	bl	800b72c <_Bfree>
 800b248:	4639      	mov	r1, r7
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fa6e 	bl	800b72c <_Bfree>
 800b250:	e69c      	b.n	800af8c <_dtoa_r+0x6c4>
 800b252:	2600      	movs	r6, #0
 800b254:	4637      	mov	r7, r6
 800b256:	e7e1      	b.n	800b21c <_dtoa_r+0x954>
 800b258:	46bb      	mov	fp, r7
 800b25a:	4637      	mov	r7, r6
 800b25c:	e599      	b.n	800ad92 <_dtoa_r+0x4ca>
 800b25e:	bf00      	nop
 800b260:	40240000 	.word	0x40240000
 800b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 80c8 	beq.w	800b3fc <_dtoa_r+0xb34>
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	2d00      	cmp	r5, #0
 800b272:	dd05      	ble.n	800b280 <_dtoa_r+0x9b8>
 800b274:	4639      	mov	r1, r7
 800b276:	462a      	mov	r2, r5
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fc27 	bl	800bacc <__lshift>
 800b27e:	4607      	mov	r7, r0
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	d05b      	beq.n	800b33e <_dtoa_r+0xa76>
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 fa0f 	bl	800b6ac <_Balloc>
 800b28e:	4605      	mov	r5, r0
 800b290:	b928      	cbnz	r0, 800b29e <_dtoa_r+0x9d6>
 800b292:	4b83      	ldr	r3, [pc, #524]	; (800b4a0 <_dtoa_r+0xbd8>)
 800b294:	4602      	mov	r2, r0
 800b296:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b29a:	f7ff bb2e 	b.w	800a8fa <_dtoa_r+0x32>
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	0092      	lsls	r2, r2, #2
 800b2a4:	f107 010c 	add.w	r1, r7, #12
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	f000 ffab 	bl	800c204 <memcpy>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 fc0a 	bl	800bacc <__lshift>
 800b2b8:	9b00      	ldr	r3, [sp, #0]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	9304      	str	r3, [sp, #16]
 800b2be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	9308      	str	r3, [sp, #32]
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	46b8      	mov	r8, r7
 800b2ce:	9306      	str	r3, [sp, #24]
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	4650      	mov	r0, sl
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	f7ff fa6c 	bl	800a7b8 <quorem>
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	9002      	str	r0, [sp, #8]
 800b2e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2e8:	4650      	mov	r0, sl
 800b2ea:	f000 fc5b 	bl	800bba4 <__mcmp>
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	9005      	str	r0, [sp, #20]
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 fc71 	bl	800bbdc <__mdiff>
 800b2fa:	68c2      	ldr	r2, [r0, #12]
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	bb02      	cbnz	r2, 800b342 <_dtoa_r+0xa7a>
 800b300:	4601      	mov	r1, r0
 800b302:	4650      	mov	r0, sl
 800b304:	f000 fc4e 	bl	800bba4 <__mcmp>
 800b308:	4602      	mov	r2, r0
 800b30a:	4629      	mov	r1, r5
 800b30c:	4620      	mov	r0, r4
 800b30e:	9209      	str	r2, [sp, #36]	; 0x24
 800b310:	f000 fa0c 	bl	800b72c <_Bfree>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b318:	9d04      	ldr	r5, [sp, #16]
 800b31a:	ea43 0102 	orr.w	r1, r3, r2
 800b31e:	9b06      	ldr	r3, [sp, #24]
 800b320:	4319      	orrs	r1, r3
 800b322:	d110      	bne.n	800b346 <_dtoa_r+0xa7e>
 800b324:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b328:	d029      	beq.n	800b37e <_dtoa_r+0xab6>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	dd02      	ble.n	800b336 <_dtoa_r+0xa6e>
 800b330:	9b02      	ldr	r3, [sp, #8]
 800b332:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b336:	9b01      	ldr	r3, [sp, #4]
 800b338:	f883 9000 	strb.w	r9, [r3]
 800b33c:	e774      	b.n	800b228 <_dtoa_r+0x960>
 800b33e:	4638      	mov	r0, r7
 800b340:	e7ba      	b.n	800b2b8 <_dtoa_r+0x9f0>
 800b342:	2201      	movs	r2, #1
 800b344:	e7e1      	b.n	800b30a <_dtoa_r+0xa42>
 800b346:	9b05      	ldr	r3, [sp, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db04      	blt.n	800b356 <_dtoa_r+0xa8e>
 800b34c:	9907      	ldr	r1, [sp, #28]
 800b34e:	430b      	orrs	r3, r1
 800b350:	9906      	ldr	r1, [sp, #24]
 800b352:	430b      	orrs	r3, r1
 800b354:	d120      	bne.n	800b398 <_dtoa_r+0xad0>
 800b356:	2a00      	cmp	r2, #0
 800b358:	dded      	ble.n	800b336 <_dtoa_r+0xa6e>
 800b35a:	4651      	mov	r1, sl
 800b35c:	2201      	movs	r2, #1
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 fbb4 	bl	800bacc <__lshift>
 800b364:	4631      	mov	r1, r6
 800b366:	4682      	mov	sl, r0
 800b368:	f000 fc1c 	bl	800bba4 <__mcmp>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	dc03      	bgt.n	800b378 <_dtoa_r+0xab0>
 800b370:	d1e1      	bne.n	800b336 <_dtoa_r+0xa6e>
 800b372:	f019 0f01 	tst.w	r9, #1
 800b376:	d0de      	beq.n	800b336 <_dtoa_r+0xa6e>
 800b378:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b37c:	d1d8      	bne.n	800b330 <_dtoa_r+0xa68>
 800b37e:	9a01      	ldr	r2, [sp, #4]
 800b380:	2339      	movs	r3, #57	; 0x39
 800b382:	7013      	strb	r3, [r2, #0]
 800b384:	462b      	mov	r3, r5
 800b386:	461d      	mov	r5, r3
 800b388:	3b01      	subs	r3, #1
 800b38a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b38e:	2a39      	cmp	r2, #57	; 0x39
 800b390:	d06c      	beq.n	800b46c <_dtoa_r+0xba4>
 800b392:	3201      	adds	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e747      	b.n	800b228 <_dtoa_r+0x960>
 800b398:	2a00      	cmp	r2, #0
 800b39a:	dd07      	ble.n	800b3ac <_dtoa_r+0xae4>
 800b39c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3a0:	d0ed      	beq.n	800b37e <_dtoa_r+0xab6>
 800b3a2:	9a01      	ldr	r2, [sp, #4]
 800b3a4:	f109 0301 	add.w	r3, r9, #1
 800b3a8:	7013      	strb	r3, [r2, #0]
 800b3aa:	e73d      	b.n	800b228 <_dtoa_r+0x960>
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	9a08      	ldr	r2, [sp, #32]
 800b3b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d043      	beq.n	800b440 <_dtoa_r+0xb78>
 800b3b8:	4651      	mov	r1, sl
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	220a      	movs	r2, #10
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f9d6 	bl	800b770 <__multadd>
 800b3c4:	45b8      	cmp	r8, r7
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	f04f 0300 	mov.w	r3, #0
 800b3cc:	f04f 020a 	mov.w	r2, #10
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	d107      	bne.n	800b3e6 <_dtoa_r+0xb1e>
 800b3d6:	f000 f9cb 	bl	800b770 <__multadd>
 800b3da:	4680      	mov	r8, r0
 800b3dc:	4607      	mov	r7, r0
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	e775      	b.n	800b2d2 <_dtoa_r+0xa0a>
 800b3e6:	f000 f9c3 	bl	800b770 <__multadd>
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	220a      	movs	r2, #10
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f9bc 	bl	800b770 <__multadd>
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	e7f0      	b.n	800b3de <_dtoa_r+0xb16>
 800b3fc:	9b04      	ldr	r3, [sp, #16]
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	9d00      	ldr	r5, [sp, #0]
 800b402:	4631      	mov	r1, r6
 800b404:	4650      	mov	r0, sl
 800b406:	f7ff f9d7 	bl	800a7b8 <quorem>
 800b40a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b40e:	9b00      	ldr	r3, [sp, #0]
 800b410:	f805 9b01 	strb.w	r9, [r5], #1
 800b414:	1aea      	subs	r2, r5, r3
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	4293      	cmp	r3, r2
 800b41a:	dd07      	ble.n	800b42c <_dtoa_r+0xb64>
 800b41c:	4651      	mov	r1, sl
 800b41e:	2300      	movs	r3, #0
 800b420:	220a      	movs	r2, #10
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f9a4 	bl	800b770 <__multadd>
 800b428:	4682      	mov	sl, r0
 800b42a:	e7ea      	b.n	800b402 <_dtoa_r+0xb3a>
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	bfc8      	it	gt
 800b432:	461d      	movgt	r5, r3
 800b434:	9b00      	ldr	r3, [sp, #0]
 800b436:	bfd8      	it	le
 800b438:	2501      	movle	r5, #1
 800b43a:	441d      	add	r5, r3
 800b43c:	f04f 0800 	mov.w	r8, #0
 800b440:	4651      	mov	r1, sl
 800b442:	2201      	movs	r2, #1
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fb41 	bl	800bacc <__lshift>
 800b44a:	4631      	mov	r1, r6
 800b44c:	4682      	mov	sl, r0
 800b44e:	f000 fba9 	bl	800bba4 <__mcmp>
 800b452:	2800      	cmp	r0, #0
 800b454:	dc96      	bgt.n	800b384 <_dtoa_r+0xabc>
 800b456:	d102      	bne.n	800b45e <_dtoa_r+0xb96>
 800b458:	f019 0f01 	tst.w	r9, #1
 800b45c:	d192      	bne.n	800b384 <_dtoa_r+0xabc>
 800b45e:	462b      	mov	r3, r5
 800b460:	461d      	mov	r5, r3
 800b462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b466:	2a30      	cmp	r2, #48	; 0x30
 800b468:	d0fa      	beq.n	800b460 <_dtoa_r+0xb98>
 800b46a:	e6dd      	b.n	800b228 <_dtoa_r+0x960>
 800b46c:	9a00      	ldr	r2, [sp, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d189      	bne.n	800b386 <_dtoa_r+0xabe>
 800b472:	f10b 0b01 	add.w	fp, fp, #1
 800b476:	2331      	movs	r3, #49	; 0x31
 800b478:	e796      	b.n	800b3a8 <_dtoa_r+0xae0>
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <_dtoa_r+0xbdc>)
 800b47c:	f7ff ba99 	b.w	800a9b2 <_dtoa_r+0xea>
 800b480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b482:	2b00      	cmp	r3, #0
 800b484:	f47f aa6d 	bne.w	800a962 <_dtoa_r+0x9a>
 800b488:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <_dtoa_r+0xbe0>)
 800b48a:	f7ff ba92 	b.w	800a9b2 <_dtoa_r+0xea>
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	dcb5      	bgt.n	800b400 <_dtoa_r+0xb38>
 800b494:	9b07      	ldr	r3, [sp, #28]
 800b496:	2b02      	cmp	r3, #2
 800b498:	f73f aeb1 	bgt.w	800b1fe <_dtoa_r+0x936>
 800b49c:	e7b0      	b.n	800b400 <_dtoa_r+0xb38>
 800b49e:	bf00      	nop
 800b4a0:	080213ec 	.word	0x080213ec
 800b4a4:	0802134c 	.word	0x0802134c
 800b4a8:	08021370 	.word	0x08021370

0800b4ac <_free_r>:
 800b4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	d044      	beq.n	800b53c <_free_r+0x90>
 800b4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b6:	9001      	str	r0, [sp, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b4be:	bfb8      	it	lt
 800b4c0:	18e4      	addlt	r4, r4, r3
 800b4c2:	f000 f8e7 	bl	800b694 <__malloc_lock>
 800b4c6:	4a1e      	ldr	r2, [pc, #120]	; (800b540 <_free_r+0x94>)
 800b4c8:	9801      	ldr	r0, [sp, #4]
 800b4ca:	6813      	ldr	r3, [r2, #0]
 800b4cc:	b933      	cbnz	r3, 800b4dc <_free_r+0x30>
 800b4ce:	6063      	str	r3, [r4, #4]
 800b4d0:	6014      	str	r4, [r2, #0]
 800b4d2:	b003      	add	sp, #12
 800b4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4d8:	f000 b8e2 	b.w	800b6a0 <__malloc_unlock>
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	d908      	bls.n	800b4f2 <_free_r+0x46>
 800b4e0:	6825      	ldr	r5, [r4, #0]
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	bf01      	itttt	eq
 800b4e8:	6819      	ldreq	r1, [r3, #0]
 800b4ea:	685b      	ldreq	r3, [r3, #4]
 800b4ec:	1949      	addeq	r1, r1, r5
 800b4ee:	6021      	streq	r1, [r4, #0]
 800b4f0:	e7ed      	b.n	800b4ce <_free_r+0x22>
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b10b      	cbz	r3, 800b4fc <_free_r+0x50>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d9fa      	bls.n	800b4f2 <_free_r+0x46>
 800b4fc:	6811      	ldr	r1, [r2, #0]
 800b4fe:	1855      	adds	r5, r2, r1
 800b500:	42a5      	cmp	r5, r4
 800b502:	d10b      	bne.n	800b51c <_free_r+0x70>
 800b504:	6824      	ldr	r4, [r4, #0]
 800b506:	4421      	add	r1, r4
 800b508:	1854      	adds	r4, r2, r1
 800b50a:	42a3      	cmp	r3, r4
 800b50c:	6011      	str	r1, [r2, #0]
 800b50e:	d1e0      	bne.n	800b4d2 <_free_r+0x26>
 800b510:	681c      	ldr	r4, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	6053      	str	r3, [r2, #4]
 800b516:	440c      	add	r4, r1
 800b518:	6014      	str	r4, [r2, #0]
 800b51a:	e7da      	b.n	800b4d2 <_free_r+0x26>
 800b51c:	d902      	bls.n	800b524 <_free_r+0x78>
 800b51e:	230c      	movs	r3, #12
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	e7d6      	b.n	800b4d2 <_free_r+0x26>
 800b524:	6825      	ldr	r5, [r4, #0]
 800b526:	1961      	adds	r1, r4, r5
 800b528:	428b      	cmp	r3, r1
 800b52a:	bf04      	itt	eq
 800b52c:	6819      	ldreq	r1, [r3, #0]
 800b52e:	685b      	ldreq	r3, [r3, #4]
 800b530:	6063      	str	r3, [r4, #4]
 800b532:	bf04      	itt	eq
 800b534:	1949      	addeq	r1, r1, r5
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6054      	str	r4, [r2, #4]
 800b53a:	e7ca      	b.n	800b4d2 <_free_r+0x26>
 800b53c:	b003      	add	sp, #12
 800b53e:	bd30      	pop	{r4, r5, pc}
 800b540:	2000ceac 	.word	0x2000ceac

0800b544 <malloc>:
 800b544:	4b02      	ldr	r3, [pc, #8]	; (800b550 <malloc+0xc>)
 800b546:	4601      	mov	r1, r0
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	f000 b823 	b.w	800b594 <_malloc_r>
 800b54e:	bf00      	nop
 800b550:	20000690 	.word	0x20000690

0800b554 <sbrk_aligned>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4e0e      	ldr	r6, [pc, #56]	; (800b590 <sbrk_aligned+0x3c>)
 800b558:	460c      	mov	r4, r1
 800b55a:	6831      	ldr	r1, [r6, #0]
 800b55c:	4605      	mov	r5, r0
 800b55e:	b911      	cbnz	r1, 800b566 <sbrk_aligned+0x12>
 800b560:	f000 fe40 	bl	800c1e4 <_sbrk_r>
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	4621      	mov	r1, r4
 800b568:	4628      	mov	r0, r5
 800b56a:	f000 fe3b 	bl	800c1e4 <_sbrk_r>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <sbrk_aligned+0x34>
 800b572:	1cc4      	adds	r4, r0, #3
 800b574:	f024 0403 	bic.w	r4, r4, #3
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d007      	beq.n	800b58c <sbrk_aligned+0x38>
 800b57c:	1a21      	subs	r1, r4, r0
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 fe30 	bl	800c1e4 <_sbrk_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d101      	bne.n	800b58c <sbrk_aligned+0x38>
 800b588:	f04f 34ff 	mov.w	r4, #4294967295
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	2000ceb0 	.word	0x2000ceb0

0800b594 <_malloc_r>:
 800b594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b598:	1ccd      	adds	r5, r1, #3
 800b59a:	f025 0503 	bic.w	r5, r5, #3
 800b59e:	3508      	adds	r5, #8
 800b5a0:	2d0c      	cmp	r5, #12
 800b5a2:	bf38      	it	cc
 800b5a4:	250c      	movcc	r5, #12
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	db01      	blt.n	800b5b0 <_malloc_r+0x1c>
 800b5ac:	42a9      	cmp	r1, r5
 800b5ae:	d905      	bls.n	800b5bc <_malloc_r+0x28>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b690 <_malloc_r+0xfc>
 800b5c0:	f000 f868 	bl	800b694 <__malloc_lock>
 800b5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5c8:	461c      	mov	r4, r3
 800b5ca:	bb5c      	cbnz	r4, 800b624 <_malloc_r+0x90>
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	f7ff ffc0 	bl	800b554 <sbrk_aligned>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	d155      	bne.n	800b686 <_malloc_r+0xf2>
 800b5da:	f8d8 4000 	ldr.w	r4, [r8]
 800b5de:	4626      	mov	r6, r4
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	d145      	bne.n	800b670 <_malloc_r+0xdc>
 800b5e4:	2c00      	cmp	r4, #0
 800b5e6:	d048      	beq.n	800b67a <_malloc_r+0xe6>
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	eb04 0903 	add.w	r9, r4, r3
 800b5f2:	f000 fdf7 	bl	800c1e4 <_sbrk_r>
 800b5f6:	4581      	cmp	r9, r0
 800b5f8:	d13f      	bne.n	800b67a <_malloc_r+0xe6>
 800b5fa:	6821      	ldr	r1, [r4, #0]
 800b5fc:	1a6d      	subs	r5, r5, r1
 800b5fe:	4629      	mov	r1, r5
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff ffa7 	bl	800b554 <sbrk_aligned>
 800b606:	3001      	adds	r0, #1
 800b608:	d037      	beq.n	800b67a <_malloc_r+0xe6>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	442b      	add	r3, r5
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	f8d8 3000 	ldr.w	r3, [r8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d038      	beq.n	800b68a <_malloc_r+0xf6>
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	42a2      	cmp	r2, r4
 800b61c:	d12b      	bne.n	800b676 <_malloc_r+0xe2>
 800b61e:	2200      	movs	r2, #0
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	e00f      	b.n	800b644 <_malloc_r+0xb0>
 800b624:	6822      	ldr	r2, [r4, #0]
 800b626:	1b52      	subs	r2, r2, r5
 800b628:	d41f      	bmi.n	800b66a <_malloc_r+0xd6>
 800b62a:	2a0b      	cmp	r2, #11
 800b62c:	d917      	bls.n	800b65e <_malloc_r+0xca>
 800b62e:	1961      	adds	r1, r4, r5
 800b630:	42a3      	cmp	r3, r4
 800b632:	6025      	str	r5, [r4, #0]
 800b634:	bf18      	it	ne
 800b636:	6059      	strne	r1, [r3, #4]
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	bf08      	it	eq
 800b63c:	f8c8 1000 	streq.w	r1, [r8]
 800b640:	5162      	str	r2, [r4, r5]
 800b642:	604b      	str	r3, [r1, #4]
 800b644:	4638      	mov	r0, r7
 800b646:	f104 060b 	add.w	r6, r4, #11
 800b64a:	f000 f829 	bl	800b6a0 <__malloc_unlock>
 800b64e:	f026 0607 	bic.w	r6, r6, #7
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	1af2      	subs	r2, r6, r3
 800b656:	d0ae      	beq.n	800b5b6 <_malloc_r+0x22>
 800b658:	1b9b      	subs	r3, r3, r6
 800b65a:	50a3      	str	r3, [r4, r2]
 800b65c:	e7ab      	b.n	800b5b6 <_malloc_r+0x22>
 800b65e:	42a3      	cmp	r3, r4
 800b660:	6862      	ldr	r2, [r4, #4]
 800b662:	d1dd      	bne.n	800b620 <_malloc_r+0x8c>
 800b664:	f8c8 2000 	str.w	r2, [r8]
 800b668:	e7ec      	b.n	800b644 <_malloc_r+0xb0>
 800b66a:	4623      	mov	r3, r4
 800b66c:	6864      	ldr	r4, [r4, #4]
 800b66e:	e7ac      	b.n	800b5ca <_malloc_r+0x36>
 800b670:	4634      	mov	r4, r6
 800b672:	6876      	ldr	r6, [r6, #4]
 800b674:	e7b4      	b.n	800b5e0 <_malloc_r+0x4c>
 800b676:	4613      	mov	r3, r2
 800b678:	e7cc      	b.n	800b614 <_malloc_r+0x80>
 800b67a:	230c      	movs	r3, #12
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	4638      	mov	r0, r7
 800b680:	f000 f80e 	bl	800b6a0 <__malloc_unlock>
 800b684:	e797      	b.n	800b5b6 <_malloc_r+0x22>
 800b686:	6025      	str	r5, [r4, #0]
 800b688:	e7dc      	b.n	800b644 <_malloc_r+0xb0>
 800b68a:	605b      	str	r3, [r3, #4]
 800b68c:	deff      	udf	#255	; 0xff
 800b68e:	bf00      	nop
 800b690:	2000ceac 	.word	0x2000ceac

0800b694 <__malloc_lock>:
 800b694:	4801      	ldr	r0, [pc, #4]	; (800b69c <__malloc_lock+0x8>)
 800b696:	f7ff b88d 	b.w	800a7b4 <__retarget_lock_acquire_recursive>
 800b69a:	bf00      	nop
 800b69c:	2000cea8 	.word	0x2000cea8

0800b6a0 <__malloc_unlock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	; (800b6a8 <__malloc_unlock+0x8>)
 800b6a2:	f7ff b888 	b.w	800a7b6 <__retarget_lock_release_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	2000cea8 	.word	0x2000cea8

0800b6ac <_Balloc>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	69c6      	ldr	r6, [r0, #28]
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	b976      	cbnz	r6, 800b6d4 <_Balloc+0x28>
 800b6b6:	2010      	movs	r0, #16
 800b6b8:	f7ff ff44 	bl	800b544 <malloc>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	61e0      	str	r0, [r4, #28]
 800b6c0:	b920      	cbnz	r0, 800b6cc <_Balloc+0x20>
 800b6c2:	4b18      	ldr	r3, [pc, #96]	; (800b724 <_Balloc+0x78>)
 800b6c4:	4818      	ldr	r0, [pc, #96]	; (800b728 <_Balloc+0x7c>)
 800b6c6:	216b      	movs	r1, #107	; 0x6b
 800b6c8:	f000 fdaa 	bl	800c220 <__assert_func>
 800b6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6d0:	6006      	str	r6, [r0, #0]
 800b6d2:	60c6      	str	r6, [r0, #12]
 800b6d4:	69e6      	ldr	r6, [r4, #28]
 800b6d6:	68f3      	ldr	r3, [r6, #12]
 800b6d8:	b183      	cbz	r3, 800b6fc <_Balloc+0x50>
 800b6da:	69e3      	ldr	r3, [r4, #28]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6e2:	b9b8      	cbnz	r0, 800b714 <_Balloc+0x68>
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	fa01 f605 	lsl.w	r6, r1, r5
 800b6ea:	1d72      	adds	r2, r6, #5
 800b6ec:	0092      	lsls	r2, r2, #2
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fdb4 	bl	800c25c <_calloc_r>
 800b6f4:	b160      	cbz	r0, 800b710 <_Balloc+0x64>
 800b6f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6fa:	e00e      	b.n	800b71a <_Balloc+0x6e>
 800b6fc:	2221      	movs	r2, #33	; 0x21
 800b6fe:	2104      	movs	r1, #4
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fdab 	bl	800c25c <_calloc_r>
 800b706:	69e3      	ldr	r3, [r4, #28]
 800b708:	60f0      	str	r0, [r6, #12]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e4      	bne.n	800b6da <_Balloc+0x2e>
 800b710:	2000      	movs	r0, #0
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	6802      	ldr	r2, [r0, #0]
 800b716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b71a:	2300      	movs	r3, #0
 800b71c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b720:	e7f7      	b.n	800b712 <_Balloc+0x66>
 800b722:	bf00      	nop
 800b724:	0802137d 	.word	0x0802137d
 800b728:	080213fd 	.word	0x080213fd

0800b72c <_Bfree>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	69c6      	ldr	r6, [r0, #28]
 800b730:	4605      	mov	r5, r0
 800b732:	460c      	mov	r4, r1
 800b734:	b976      	cbnz	r6, 800b754 <_Bfree+0x28>
 800b736:	2010      	movs	r0, #16
 800b738:	f7ff ff04 	bl	800b544 <malloc>
 800b73c:	4602      	mov	r2, r0
 800b73e:	61e8      	str	r0, [r5, #28]
 800b740:	b920      	cbnz	r0, 800b74c <_Bfree+0x20>
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <_Bfree+0x3c>)
 800b744:	4809      	ldr	r0, [pc, #36]	; (800b76c <_Bfree+0x40>)
 800b746:	218f      	movs	r1, #143	; 0x8f
 800b748:	f000 fd6a 	bl	800c220 <__assert_func>
 800b74c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b750:	6006      	str	r6, [r0, #0]
 800b752:	60c6      	str	r6, [r0, #12]
 800b754:	b13c      	cbz	r4, 800b766 <_Bfree+0x3a>
 800b756:	69eb      	ldr	r3, [r5, #28]
 800b758:	6862      	ldr	r2, [r4, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b760:	6021      	str	r1, [r4, #0]
 800b762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	0802137d 	.word	0x0802137d
 800b76c:	080213fd 	.word	0x080213fd

0800b770 <__multadd>:
 800b770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b774:	690d      	ldr	r5, [r1, #16]
 800b776:	4607      	mov	r7, r0
 800b778:	460c      	mov	r4, r1
 800b77a:	461e      	mov	r6, r3
 800b77c:	f101 0c14 	add.w	ip, r1, #20
 800b780:	2000      	movs	r0, #0
 800b782:	f8dc 3000 	ldr.w	r3, [ip]
 800b786:	b299      	uxth	r1, r3
 800b788:	fb02 6101 	mla	r1, r2, r1, r6
 800b78c:	0c1e      	lsrs	r6, r3, #16
 800b78e:	0c0b      	lsrs	r3, r1, #16
 800b790:	fb02 3306 	mla	r3, r2, r6, r3
 800b794:	b289      	uxth	r1, r1
 800b796:	3001      	adds	r0, #1
 800b798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b79c:	4285      	cmp	r5, r0
 800b79e:	f84c 1b04 	str.w	r1, [ip], #4
 800b7a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7a6:	dcec      	bgt.n	800b782 <__multadd+0x12>
 800b7a8:	b30e      	cbz	r6, 800b7ee <__multadd+0x7e>
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	42ab      	cmp	r3, r5
 800b7ae:	dc19      	bgt.n	800b7e4 <__multadd+0x74>
 800b7b0:	6861      	ldr	r1, [r4, #4]
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	3101      	adds	r1, #1
 800b7b6:	f7ff ff79 	bl	800b6ac <_Balloc>
 800b7ba:	4680      	mov	r8, r0
 800b7bc:	b928      	cbnz	r0, 800b7ca <__multadd+0x5a>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b0c      	ldr	r3, [pc, #48]	; (800b7f4 <__multadd+0x84>)
 800b7c2:	480d      	ldr	r0, [pc, #52]	; (800b7f8 <__multadd+0x88>)
 800b7c4:	21ba      	movs	r1, #186	; 0xba
 800b7c6:	f000 fd2b 	bl	800c220 <__assert_func>
 800b7ca:	6922      	ldr	r2, [r4, #16]
 800b7cc:	3202      	adds	r2, #2
 800b7ce:	f104 010c 	add.w	r1, r4, #12
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	300c      	adds	r0, #12
 800b7d6:	f000 fd15 	bl	800c204 <memcpy>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7ff ffa5 	bl	800b72c <_Bfree>
 800b7e2:	4644      	mov	r4, r8
 800b7e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	615e      	str	r6, [r3, #20]
 800b7ec:	6125      	str	r5, [r4, #16]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f4:	080213ec 	.word	0x080213ec
 800b7f8:	080213fd 	.word	0x080213fd

0800b7fc <__hi0bits>:
 800b7fc:	0c03      	lsrs	r3, r0, #16
 800b7fe:	041b      	lsls	r3, r3, #16
 800b800:	b9d3      	cbnz	r3, 800b838 <__hi0bits+0x3c>
 800b802:	0400      	lsls	r0, r0, #16
 800b804:	2310      	movs	r3, #16
 800b806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b80a:	bf04      	itt	eq
 800b80c:	0200      	lsleq	r0, r0, #8
 800b80e:	3308      	addeq	r3, #8
 800b810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b814:	bf04      	itt	eq
 800b816:	0100      	lsleq	r0, r0, #4
 800b818:	3304      	addeq	r3, #4
 800b81a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b81e:	bf04      	itt	eq
 800b820:	0080      	lsleq	r0, r0, #2
 800b822:	3302      	addeq	r3, #2
 800b824:	2800      	cmp	r0, #0
 800b826:	db05      	blt.n	800b834 <__hi0bits+0x38>
 800b828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b82c:	f103 0301 	add.w	r3, r3, #1
 800b830:	bf08      	it	eq
 800b832:	2320      	moveq	r3, #32
 800b834:	4618      	mov	r0, r3
 800b836:	4770      	bx	lr
 800b838:	2300      	movs	r3, #0
 800b83a:	e7e4      	b.n	800b806 <__hi0bits+0xa>

0800b83c <__lo0bits>:
 800b83c:	6803      	ldr	r3, [r0, #0]
 800b83e:	f013 0207 	ands.w	r2, r3, #7
 800b842:	d00c      	beq.n	800b85e <__lo0bits+0x22>
 800b844:	07d9      	lsls	r1, r3, #31
 800b846:	d422      	bmi.n	800b88e <__lo0bits+0x52>
 800b848:	079a      	lsls	r2, r3, #30
 800b84a:	bf49      	itett	mi
 800b84c:	085b      	lsrmi	r3, r3, #1
 800b84e:	089b      	lsrpl	r3, r3, #2
 800b850:	6003      	strmi	r3, [r0, #0]
 800b852:	2201      	movmi	r2, #1
 800b854:	bf5c      	itt	pl
 800b856:	6003      	strpl	r3, [r0, #0]
 800b858:	2202      	movpl	r2, #2
 800b85a:	4610      	mov	r0, r2
 800b85c:	4770      	bx	lr
 800b85e:	b299      	uxth	r1, r3
 800b860:	b909      	cbnz	r1, 800b866 <__lo0bits+0x2a>
 800b862:	0c1b      	lsrs	r3, r3, #16
 800b864:	2210      	movs	r2, #16
 800b866:	b2d9      	uxtb	r1, r3
 800b868:	b909      	cbnz	r1, 800b86e <__lo0bits+0x32>
 800b86a:	3208      	adds	r2, #8
 800b86c:	0a1b      	lsrs	r3, r3, #8
 800b86e:	0719      	lsls	r1, r3, #28
 800b870:	bf04      	itt	eq
 800b872:	091b      	lsreq	r3, r3, #4
 800b874:	3204      	addeq	r2, #4
 800b876:	0799      	lsls	r1, r3, #30
 800b878:	bf04      	itt	eq
 800b87a:	089b      	lsreq	r3, r3, #2
 800b87c:	3202      	addeq	r2, #2
 800b87e:	07d9      	lsls	r1, r3, #31
 800b880:	d403      	bmi.n	800b88a <__lo0bits+0x4e>
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	f102 0201 	add.w	r2, r2, #1
 800b888:	d003      	beq.n	800b892 <__lo0bits+0x56>
 800b88a:	6003      	str	r3, [r0, #0]
 800b88c:	e7e5      	b.n	800b85a <__lo0bits+0x1e>
 800b88e:	2200      	movs	r2, #0
 800b890:	e7e3      	b.n	800b85a <__lo0bits+0x1e>
 800b892:	2220      	movs	r2, #32
 800b894:	e7e1      	b.n	800b85a <__lo0bits+0x1e>
	...

0800b898 <__i2b>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	460c      	mov	r4, r1
 800b89c:	2101      	movs	r1, #1
 800b89e:	f7ff ff05 	bl	800b6ac <_Balloc>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	b928      	cbnz	r0, 800b8b2 <__i2b+0x1a>
 800b8a6:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <__i2b+0x24>)
 800b8a8:	4805      	ldr	r0, [pc, #20]	; (800b8c0 <__i2b+0x28>)
 800b8aa:	f240 1145 	movw	r1, #325	; 0x145
 800b8ae:	f000 fcb7 	bl	800c220 <__assert_func>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	6144      	str	r4, [r0, #20]
 800b8b6:	6103      	str	r3, [r0, #16]
 800b8b8:	bd10      	pop	{r4, pc}
 800b8ba:	bf00      	nop
 800b8bc:	080213ec 	.word	0x080213ec
 800b8c0:	080213fd 	.word	0x080213fd

0800b8c4 <__multiply>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	4691      	mov	r9, r2
 800b8ca:	690a      	ldr	r2, [r1, #16]
 800b8cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	bfb8      	it	lt
 800b8d4:	460b      	movlt	r3, r1
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	bfbc      	itt	lt
 800b8da:	464c      	movlt	r4, r9
 800b8dc:	4699      	movlt	r9, r3
 800b8de:	6927      	ldr	r7, [r4, #16]
 800b8e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	6861      	ldr	r1, [r4, #4]
 800b8e8:	eb07 060a 	add.w	r6, r7, sl
 800b8ec:	42b3      	cmp	r3, r6
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	bfb8      	it	lt
 800b8f2:	3101      	addlt	r1, #1
 800b8f4:	f7ff feda 	bl	800b6ac <_Balloc>
 800b8f8:	b930      	cbnz	r0, 800b908 <__multiply+0x44>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	4b44      	ldr	r3, [pc, #272]	; (800ba10 <__multiply+0x14c>)
 800b8fe:	4845      	ldr	r0, [pc, #276]	; (800ba14 <__multiply+0x150>)
 800b900:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b904:	f000 fc8c 	bl	800c220 <__assert_func>
 800b908:	f100 0514 	add.w	r5, r0, #20
 800b90c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b910:	462b      	mov	r3, r5
 800b912:	2200      	movs	r2, #0
 800b914:	4543      	cmp	r3, r8
 800b916:	d321      	bcc.n	800b95c <__multiply+0x98>
 800b918:	f104 0314 	add.w	r3, r4, #20
 800b91c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b920:	f109 0314 	add.w	r3, r9, #20
 800b924:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b928:	9202      	str	r2, [sp, #8]
 800b92a:	1b3a      	subs	r2, r7, r4
 800b92c:	3a15      	subs	r2, #21
 800b92e:	f022 0203 	bic.w	r2, r2, #3
 800b932:	3204      	adds	r2, #4
 800b934:	f104 0115 	add.w	r1, r4, #21
 800b938:	428f      	cmp	r7, r1
 800b93a:	bf38      	it	cc
 800b93c:	2204      	movcc	r2, #4
 800b93e:	9201      	str	r2, [sp, #4]
 800b940:	9a02      	ldr	r2, [sp, #8]
 800b942:	9303      	str	r3, [sp, #12]
 800b944:	429a      	cmp	r2, r3
 800b946:	d80c      	bhi.n	800b962 <__multiply+0x9e>
 800b948:	2e00      	cmp	r6, #0
 800b94a:	dd03      	ble.n	800b954 <__multiply+0x90>
 800b94c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b950:	2b00      	cmp	r3, #0
 800b952:	d05b      	beq.n	800ba0c <__multiply+0x148>
 800b954:	6106      	str	r6, [r0, #16]
 800b956:	b005      	add	sp, #20
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	f843 2b04 	str.w	r2, [r3], #4
 800b960:	e7d8      	b.n	800b914 <__multiply+0x50>
 800b962:	f8b3 a000 	ldrh.w	sl, [r3]
 800b966:	f1ba 0f00 	cmp.w	sl, #0
 800b96a:	d024      	beq.n	800b9b6 <__multiply+0xf2>
 800b96c:	f104 0e14 	add.w	lr, r4, #20
 800b970:	46a9      	mov	r9, r5
 800b972:	f04f 0c00 	mov.w	ip, #0
 800b976:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b97a:	f8d9 1000 	ldr.w	r1, [r9]
 800b97e:	fa1f fb82 	uxth.w	fp, r2
 800b982:	b289      	uxth	r1, r1
 800b984:	fb0a 110b 	mla	r1, sl, fp, r1
 800b988:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b98c:	f8d9 2000 	ldr.w	r2, [r9]
 800b990:	4461      	add	r1, ip
 800b992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b996:	fb0a c20b 	mla	r2, sl, fp, ip
 800b99a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b99e:	b289      	uxth	r1, r1
 800b9a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9a4:	4577      	cmp	r7, lr
 800b9a6:	f849 1b04 	str.w	r1, [r9], #4
 800b9aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ae:	d8e2      	bhi.n	800b976 <__multiply+0xb2>
 800b9b0:	9a01      	ldr	r2, [sp, #4]
 800b9b2:	f845 c002 	str.w	ip, [r5, r2]
 800b9b6:	9a03      	ldr	r2, [sp, #12]
 800b9b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9bc:	3304      	adds	r3, #4
 800b9be:	f1b9 0f00 	cmp.w	r9, #0
 800b9c2:	d021      	beq.n	800ba08 <__multiply+0x144>
 800b9c4:	6829      	ldr	r1, [r5, #0]
 800b9c6:	f104 0c14 	add.w	ip, r4, #20
 800b9ca:	46ae      	mov	lr, r5
 800b9cc:	f04f 0a00 	mov.w	sl, #0
 800b9d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b9dc:	4452      	add	r2, sl
 800b9de:	b289      	uxth	r1, r1
 800b9e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b9e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b9f4:	fb09 110a 	mla	r1, r9, sl, r1
 800b9f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9fc:	4567      	cmp	r7, ip
 800b9fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba02:	d8e5      	bhi.n	800b9d0 <__multiply+0x10c>
 800ba04:	9a01      	ldr	r2, [sp, #4]
 800ba06:	50a9      	str	r1, [r5, r2]
 800ba08:	3504      	adds	r5, #4
 800ba0a:	e799      	b.n	800b940 <__multiply+0x7c>
 800ba0c:	3e01      	subs	r6, #1
 800ba0e:	e79b      	b.n	800b948 <__multiply+0x84>
 800ba10:	080213ec 	.word	0x080213ec
 800ba14:	080213fd 	.word	0x080213fd

0800ba18 <__pow5mult>:
 800ba18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	4615      	mov	r5, r2
 800ba1e:	f012 0203 	ands.w	r2, r2, #3
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	d007      	beq.n	800ba38 <__pow5mult+0x20>
 800ba28:	4c25      	ldr	r4, [pc, #148]	; (800bac0 <__pow5mult+0xa8>)
 800ba2a:	3a01      	subs	r2, #1
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba32:	f7ff fe9d 	bl	800b770 <__multadd>
 800ba36:	4607      	mov	r7, r0
 800ba38:	10ad      	asrs	r5, r5, #2
 800ba3a:	d03d      	beq.n	800bab8 <__pow5mult+0xa0>
 800ba3c:	69f4      	ldr	r4, [r6, #28]
 800ba3e:	b97c      	cbnz	r4, 800ba60 <__pow5mult+0x48>
 800ba40:	2010      	movs	r0, #16
 800ba42:	f7ff fd7f 	bl	800b544 <malloc>
 800ba46:	4602      	mov	r2, r0
 800ba48:	61f0      	str	r0, [r6, #28]
 800ba4a:	b928      	cbnz	r0, 800ba58 <__pow5mult+0x40>
 800ba4c:	4b1d      	ldr	r3, [pc, #116]	; (800bac4 <__pow5mult+0xac>)
 800ba4e:	481e      	ldr	r0, [pc, #120]	; (800bac8 <__pow5mult+0xb0>)
 800ba50:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba54:	f000 fbe4 	bl	800c220 <__assert_func>
 800ba58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba5c:	6004      	str	r4, [r0, #0]
 800ba5e:	60c4      	str	r4, [r0, #12]
 800ba60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba68:	b94c      	cbnz	r4, 800ba7e <__pow5mult+0x66>
 800ba6a:	f240 2171 	movw	r1, #625	; 0x271
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ff12 	bl	800b898 <__i2b>
 800ba74:	2300      	movs	r3, #0
 800ba76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	f04f 0900 	mov.w	r9, #0
 800ba82:	07eb      	lsls	r3, r5, #31
 800ba84:	d50a      	bpl.n	800ba9c <__pow5mult+0x84>
 800ba86:	4639      	mov	r1, r7
 800ba88:	4622      	mov	r2, r4
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ff1a 	bl	800b8c4 <__multiply>
 800ba90:	4639      	mov	r1, r7
 800ba92:	4680      	mov	r8, r0
 800ba94:	4630      	mov	r0, r6
 800ba96:	f7ff fe49 	bl	800b72c <_Bfree>
 800ba9a:	4647      	mov	r7, r8
 800ba9c:	106d      	asrs	r5, r5, #1
 800ba9e:	d00b      	beq.n	800bab8 <__pow5mult+0xa0>
 800baa0:	6820      	ldr	r0, [r4, #0]
 800baa2:	b938      	cbnz	r0, 800bab4 <__pow5mult+0x9c>
 800baa4:	4622      	mov	r2, r4
 800baa6:	4621      	mov	r1, r4
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7ff ff0b 	bl	800b8c4 <__multiply>
 800baae:	6020      	str	r0, [r4, #0]
 800bab0:	f8c0 9000 	str.w	r9, [r0]
 800bab4:	4604      	mov	r4, r0
 800bab6:	e7e4      	b.n	800ba82 <__pow5mult+0x6a>
 800bab8:	4638      	mov	r0, r7
 800baba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800babe:	bf00      	nop
 800bac0:	08021548 	.word	0x08021548
 800bac4:	0802137d 	.word	0x0802137d
 800bac8:	080213fd 	.word	0x080213fd

0800bacc <__lshift>:
 800bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad0:	460c      	mov	r4, r1
 800bad2:	6849      	ldr	r1, [r1, #4]
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	4607      	mov	r7, r0
 800bade:	4691      	mov	r9, r2
 800bae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bae4:	f108 0601 	add.w	r6, r8, #1
 800bae8:	42b3      	cmp	r3, r6
 800baea:	db0b      	blt.n	800bb04 <__lshift+0x38>
 800baec:	4638      	mov	r0, r7
 800baee:	f7ff fddd 	bl	800b6ac <_Balloc>
 800baf2:	4605      	mov	r5, r0
 800baf4:	b948      	cbnz	r0, 800bb0a <__lshift+0x3e>
 800baf6:	4602      	mov	r2, r0
 800baf8:	4b28      	ldr	r3, [pc, #160]	; (800bb9c <__lshift+0xd0>)
 800bafa:	4829      	ldr	r0, [pc, #164]	; (800bba0 <__lshift+0xd4>)
 800bafc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bb00:	f000 fb8e 	bl	800c220 <__assert_func>
 800bb04:	3101      	adds	r1, #1
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	e7ee      	b.n	800bae8 <__lshift+0x1c>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f100 0114 	add.w	r1, r0, #20
 800bb10:	f100 0210 	add.w	r2, r0, #16
 800bb14:	4618      	mov	r0, r3
 800bb16:	4553      	cmp	r3, sl
 800bb18:	db33      	blt.n	800bb82 <__lshift+0xb6>
 800bb1a:	6920      	ldr	r0, [r4, #16]
 800bb1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb20:	f104 0314 	add.w	r3, r4, #20
 800bb24:	f019 091f 	ands.w	r9, r9, #31
 800bb28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb30:	d02b      	beq.n	800bb8a <__lshift+0xbe>
 800bb32:	f1c9 0e20 	rsb	lr, r9, #32
 800bb36:	468a      	mov	sl, r1
 800bb38:	2200      	movs	r2, #0
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb40:	4310      	orrs	r0, r2
 800bb42:	f84a 0b04 	str.w	r0, [sl], #4
 800bb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb4a:	459c      	cmp	ip, r3
 800bb4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb50:	d8f3      	bhi.n	800bb3a <__lshift+0x6e>
 800bb52:	ebac 0304 	sub.w	r3, ip, r4
 800bb56:	3b15      	subs	r3, #21
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	f104 0015 	add.w	r0, r4, #21
 800bb62:	4584      	cmp	ip, r0
 800bb64:	bf38      	it	cc
 800bb66:	2304      	movcc	r3, #4
 800bb68:	50ca      	str	r2, [r1, r3]
 800bb6a:	b10a      	cbz	r2, 800bb70 <__lshift+0xa4>
 800bb6c:	f108 0602 	add.w	r6, r8, #2
 800bb70:	3e01      	subs	r6, #1
 800bb72:	4638      	mov	r0, r7
 800bb74:	612e      	str	r6, [r5, #16]
 800bb76:	4621      	mov	r1, r4
 800bb78:	f7ff fdd8 	bl	800b72c <_Bfree>
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb82:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb86:	3301      	adds	r3, #1
 800bb88:	e7c5      	b.n	800bb16 <__lshift+0x4a>
 800bb8a:	3904      	subs	r1, #4
 800bb8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb90:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb94:	459c      	cmp	ip, r3
 800bb96:	d8f9      	bhi.n	800bb8c <__lshift+0xc0>
 800bb98:	e7ea      	b.n	800bb70 <__lshift+0xa4>
 800bb9a:	bf00      	nop
 800bb9c:	080213ec 	.word	0x080213ec
 800bba0:	080213fd 	.word	0x080213fd

0800bba4 <__mcmp>:
 800bba4:	b530      	push	{r4, r5, lr}
 800bba6:	6902      	ldr	r2, [r0, #16]
 800bba8:	690c      	ldr	r4, [r1, #16]
 800bbaa:	1b12      	subs	r2, r2, r4
 800bbac:	d10e      	bne.n	800bbcc <__mcmp+0x28>
 800bbae:	f100 0314 	add.w	r3, r0, #20
 800bbb2:	3114      	adds	r1, #20
 800bbb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbc4:	42a5      	cmp	r5, r4
 800bbc6:	d003      	beq.n	800bbd0 <__mcmp+0x2c>
 800bbc8:	d305      	bcc.n	800bbd6 <__mcmp+0x32>
 800bbca:	2201      	movs	r2, #1
 800bbcc:	4610      	mov	r0, r2
 800bbce:	bd30      	pop	{r4, r5, pc}
 800bbd0:	4283      	cmp	r3, r0
 800bbd2:	d3f3      	bcc.n	800bbbc <__mcmp+0x18>
 800bbd4:	e7fa      	b.n	800bbcc <__mcmp+0x28>
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	e7f7      	b.n	800bbcc <__mcmp+0x28>

0800bbdc <__mdiff>:
 800bbdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4690      	mov	r8, r2
 800bbea:	f7ff ffdb 	bl	800bba4 <__mcmp>
 800bbee:	1e05      	subs	r5, r0, #0
 800bbf0:	d110      	bne.n	800bc14 <__mdiff+0x38>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff fd59 	bl	800b6ac <_Balloc>
 800bbfa:	b930      	cbnz	r0, 800bc0a <__mdiff+0x2e>
 800bbfc:	4b3a      	ldr	r3, [pc, #232]	; (800bce8 <__mdiff+0x10c>)
 800bbfe:	4602      	mov	r2, r0
 800bc00:	f240 2137 	movw	r1, #567	; 0x237
 800bc04:	4839      	ldr	r0, [pc, #228]	; (800bcec <__mdiff+0x110>)
 800bc06:	f000 fb0b 	bl	800c220 <__assert_func>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	bfa4      	itt	ge
 800bc16:	4643      	movge	r3, r8
 800bc18:	46a0      	movge	r8, r4
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc20:	bfa6      	itte	ge
 800bc22:	461c      	movge	r4, r3
 800bc24:	2500      	movge	r5, #0
 800bc26:	2501      	movlt	r5, #1
 800bc28:	f7ff fd40 	bl	800b6ac <_Balloc>
 800bc2c:	b920      	cbnz	r0, 800bc38 <__mdiff+0x5c>
 800bc2e:	4b2e      	ldr	r3, [pc, #184]	; (800bce8 <__mdiff+0x10c>)
 800bc30:	4602      	mov	r2, r0
 800bc32:	f240 2145 	movw	r1, #581	; 0x245
 800bc36:	e7e5      	b.n	800bc04 <__mdiff+0x28>
 800bc38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc3c:	6926      	ldr	r6, [r4, #16]
 800bc3e:	60c5      	str	r5, [r0, #12]
 800bc40:	f104 0914 	add.w	r9, r4, #20
 800bc44:	f108 0514 	add.w	r5, r8, #20
 800bc48:	f100 0e14 	add.w	lr, r0, #20
 800bc4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc54:	f108 0210 	add.w	r2, r8, #16
 800bc58:	46f2      	mov	sl, lr
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc64:	fa11 f88b 	uxtah	r8, r1, fp
 800bc68:	b299      	uxth	r1, r3
 800bc6a:	0c1b      	lsrs	r3, r3, #16
 800bc6c:	eba8 0801 	sub.w	r8, r8, r1
 800bc70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc78:	fa1f f888 	uxth.w	r8, r8
 800bc7c:	1419      	asrs	r1, r3, #16
 800bc7e:	454e      	cmp	r6, r9
 800bc80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc84:	f84a 3b04 	str.w	r3, [sl], #4
 800bc88:	d8e8      	bhi.n	800bc5c <__mdiff+0x80>
 800bc8a:	1b33      	subs	r3, r6, r4
 800bc8c:	3b15      	subs	r3, #21
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	3304      	adds	r3, #4
 800bc94:	3415      	adds	r4, #21
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	bf38      	it	cc
 800bc9a:	2304      	movcc	r3, #4
 800bc9c:	441d      	add	r5, r3
 800bc9e:	4473      	add	r3, lr
 800bca0:	469e      	mov	lr, r3
 800bca2:	462e      	mov	r6, r5
 800bca4:	4566      	cmp	r6, ip
 800bca6:	d30e      	bcc.n	800bcc6 <__mdiff+0xea>
 800bca8:	f10c 0203 	add.w	r2, ip, #3
 800bcac:	1b52      	subs	r2, r2, r5
 800bcae:	f022 0203 	bic.w	r2, r2, #3
 800bcb2:	3d03      	subs	r5, #3
 800bcb4:	45ac      	cmp	ip, r5
 800bcb6:	bf38      	it	cc
 800bcb8:	2200      	movcc	r2, #0
 800bcba:	4413      	add	r3, r2
 800bcbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcc0:	b17a      	cbz	r2, 800bce2 <__mdiff+0x106>
 800bcc2:	6107      	str	r7, [r0, #16]
 800bcc4:	e7a4      	b.n	800bc10 <__mdiff+0x34>
 800bcc6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcca:	fa11 f288 	uxtah	r2, r1, r8
 800bcce:	1414      	asrs	r4, r2, #16
 800bcd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcd4:	b292      	uxth	r2, r2
 800bcd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcda:	f84e 2b04 	str.w	r2, [lr], #4
 800bcde:	1421      	asrs	r1, r4, #16
 800bce0:	e7e0      	b.n	800bca4 <__mdiff+0xc8>
 800bce2:	3f01      	subs	r7, #1
 800bce4:	e7ea      	b.n	800bcbc <__mdiff+0xe0>
 800bce6:	bf00      	nop
 800bce8:	080213ec 	.word	0x080213ec
 800bcec:	080213fd 	.word	0x080213fd

0800bcf0 <__d2b>:
 800bcf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	ec59 8b10 	vmov	r8, r9, d0
 800bcfc:	4616      	mov	r6, r2
 800bcfe:	f7ff fcd5 	bl	800b6ac <_Balloc>
 800bd02:	4604      	mov	r4, r0
 800bd04:	b930      	cbnz	r0, 800bd14 <__d2b+0x24>
 800bd06:	4602      	mov	r2, r0
 800bd08:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <__d2b+0xac>)
 800bd0a:	4825      	ldr	r0, [pc, #148]	; (800bda0 <__d2b+0xb0>)
 800bd0c:	f240 310f 	movw	r1, #783	; 0x30f
 800bd10:	f000 fa86 	bl	800c220 <__assert_func>
 800bd14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd1c:	bb2d      	cbnz	r5, 800bd6a <__d2b+0x7a>
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	f1b8 0300 	subs.w	r3, r8, #0
 800bd24:	d026      	beq.n	800bd74 <__d2b+0x84>
 800bd26:	4668      	mov	r0, sp
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	f7ff fd87 	bl	800b83c <__lo0bits>
 800bd2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd32:	b1e8      	cbz	r0, 800bd70 <__d2b+0x80>
 800bd34:	f1c0 0320 	rsb	r3, r0, #32
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	430b      	orrs	r3, r1
 800bd3e:	40c2      	lsrs	r2, r0
 800bd40:	6163      	str	r3, [r4, #20]
 800bd42:	9201      	str	r2, [sp, #4]
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	61a3      	str	r3, [r4, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	bf14      	ite	ne
 800bd4c:	2202      	movne	r2, #2
 800bd4e:	2201      	moveq	r2, #1
 800bd50:	6122      	str	r2, [r4, #16]
 800bd52:	b1bd      	cbz	r5, 800bd84 <__d2b+0x94>
 800bd54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd58:	4405      	add	r5, r0
 800bd5a:	603d      	str	r5, [r7, #0]
 800bd5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd60:	6030      	str	r0, [r6, #0]
 800bd62:	4620      	mov	r0, r4
 800bd64:	b003      	add	sp, #12
 800bd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd6e:	e7d6      	b.n	800bd1e <__d2b+0x2e>
 800bd70:	6161      	str	r1, [r4, #20]
 800bd72:	e7e7      	b.n	800bd44 <__d2b+0x54>
 800bd74:	a801      	add	r0, sp, #4
 800bd76:	f7ff fd61 	bl	800b83c <__lo0bits>
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	6163      	str	r3, [r4, #20]
 800bd7e:	3020      	adds	r0, #32
 800bd80:	2201      	movs	r2, #1
 800bd82:	e7e5      	b.n	800bd50 <__d2b+0x60>
 800bd84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd8c:	6038      	str	r0, [r7, #0]
 800bd8e:	6918      	ldr	r0, [r3, #16]
 800bd90:	f7ff fd34 	bl	800b7fc <__hi0bits>
 800bd94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd98:	e7e2      	b.n	800bd60 <__d2b+0x70>
 800bd9a:	bf00      	nop
 800bd9c:	080213ec 	.word	0x080213ec
 800bda0:	080213fd 	.word	0x080213fd

0800bda4 <__ssputs_r>:
 800bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	688e      	ldr	r6, [r1, #8]
 800bdaa:	461f      	mov	r7, r3
 800bdac:	42be      	cmp	r6, r7
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	4690      	mov	r8, r2
 800bdb6:	d82c      	bhi.n	800be12 <__ssputs_r+0x6e>
 800bdb8:	898a      	ldrh	r2, [r1, #12]
 800bdba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdbe:	d026      	beq.n	800be0e <__ssputs_r+0x6a>
 800bdc0:	6965      	ldr	r5, [r4, #20]
 800bdc2:	6909      	ldr	r1, [r1, #16]
 800bdc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdc8:	eba3 0901 	sub.w	r9, r3, r1
 800bdcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdd0:	1c7b      	adds	r3, r7, #1
 800bdd2:	444b      	add	r3, r9
 800bdd4:	106d      	asrs	r5, r5, #1
 800bdd6:	429d      	cmp	r5, r3
 800bdd8:	bf38      	it	cc
 800bdda:	461d      	movcc	r5, r3
 800bddc:	0553      	lsls	r3, r2, #21
 800bdde:	d527      	bpl.n	800be30 <__ssputs_r+0x8c>
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7ff fbd7 	bl	800b594 <_malloc_r>
 800bde6:	4606      	mov	r6, r0
 800bde8:	b360      	cbz	r0, 800be44 <__ssputs_r+0xa0>
 800bdea:	6921      	ldr	r1, [r4, #16]
 800bdec:	464a      	mov	r2, r9
 800bdee:	f000 fa09 	bl	800c204 <memcpy>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	6126      	str	r6, [r4, #16]
 800be00:	6165      	str	r5, [r4, #20]
 800be02:	444e      	add	r6, r9
 800be04:	eba5 0509 	sub.w	r5, r5, r9
 800be08:	6026      	str	r6, [r4, #0]
 800be0a:	60a5      	str	r5, [r4, #8]
 800be0c:	463e      	mov	r6, r7
 800be0e:	42be      	cmp	r6, r7
 800be10:	d900      	bls.n	800be14 <__ssputs_r+0x70>
 800be12:	463e      	mov	r6, r7
 800be14:	6820      	ldr	r0, [r4, #0]
 800be16:	4632      	mov	r2, r6
 800be18:	4641      	mov	r1, r8
 800be1a:	f000 f9c9 	bl	800c1b0 <memmove>
 800be1e:	68a3      	ldr	r3, [r4, #8]
 800be20:	1b9b      	subs	r3, r3, r6
 800be22:	60a3      	str	r3, [r4, #8]
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	4433      	add	r3, r6
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	2000      	movs	r0, #0
 800be2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be30:	462a      	mov	r2, r5
 800be32:	f000 fa3b 	bl	800c2ac <_realloc_r>
 800be36:	4606      	mov	r6, r0
 800be38:	2800      	cmp	r0, #0
 800be3a:	d1e0      	bne.n	800bdfe <__ssputs_r+0x5a>
 800be3c:	6921      	ldr	r1, [r4, #16]
 800be3e:	4650      	mov	r0, sl
 800be40:	f7ff fb34 	bl	800b4ac <_free_r>
 800be44:	230c      	movs	r3, #12
 800be46:	f8ca 3000 	str.w	r3, [sl]
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	f04f 30ff 	mov.w	r0, #4294967295
 800be56:	e7e9      	b.n	800be2c <__ssputs_r+0x88>

0800be58 <_svfiprintf_r>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	4698      	mov	r8, r3
 800be5e:	898b      	ldrh	r3, [r1, #12]
 800be60:	061b      	lsls	r3, r3, #24
 800be62:	b09d      	sub	sp, #116	; 0x74
 800be64:	4607      	mov	r7, r0
 800be66:	460d      	mov	r5, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	d50e      	bpl.n	800be8a <_svfiprintf_r+0x32>
 800be6c:	690b      	ldr	r3, [r1, #16]
 800be6e:	b963      	cbnz	r3, 800be8a <_svfiprintf_r+0x32>
 800be70:	2140      	movs	r1, #64	; 0x40
 800be72:	f7ff fb8f 	bl	800b594 <_malloc_r>
 800be76:	6028      	str	r0, [r5, #0]
 800be78:	6128      	str	r0, [r5, #16]
 800be7a:	b920      	cbnz	r0, 800be86 <_svfiprintf_r+0x2e>
 800be7c:	230c      	movs	r3, #12
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	e0d0      	b.n	800c028 <_svfiprintf_r+0x1d0>
 800be86:	2340      	movs	r3, #64	; 0x40
 800be88:	616b      	str	r3, [r5, #20]
 800be8a:	2300      	movs	r3, #0
 800be8c:	9309      	str	r3, [sp, #36]	; 0x24
 800be8e:	2320      	movs	r3, #32
 800be90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be94:	f8cd 800c 	str.w	r8, [sp, #12]
 800be98:	2330      	movs	r3, #48	; 0x30
 800be9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c040 <_svfiprintf_r+0x1e8>
 800be9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bea2:	f04f 0901 	mov.w	r9, #1
 800bea6:	4623      	mov	r3, r4
 800bea8:	469a      	mov	sl, r3
 800beaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beae:	b10a      	cbz	r2, 800beb4 <_svfiprintf_r+0x5c>
 800beb0:	2a25      	cmp	r2, #37	; 0x25
 800beb2:	d1f9      	bne.n	800bea8 <_svfiprintf_r+0x50>
 800beb4:	ebba 0b04 	subs.w	fp, sl, r4
 800beb8:	d00b      	beq.n	800bed2 <_svfiprintf_r+0x7a>
 800beba:	465b      	mov	r3, fp
 800bebc:	4622      	mov	r2, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	4638      	mov	r0, r7
 800bec2:	f7ff ff6f 	bl	800bda4 <__ssputs_r>
 800bec6:	3001      	adds	r0, #1
 800bec8:	f000 80a9 	beq.w	800c01e <_svfiprintf_r+0x1c6>
 800becc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bece:	445a      	add	r2, fp
 800bed0:	9209      	str	r2, [sp, #36]	; 0x24
 800bed2:	f89a 3000 	ldrb.w	r3, [sl]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80a1 	beq.w	800c01e <_svfiprintf_r+0x1c6>
 800bedc:	2300      	movs	r3, #0
 800bede:	f04f 32ff 	mov.w	r2, #4294967295
 800bee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bee6:	f10a 0a01 	add.w	sl, sl, #1
 800beea:	9304      	str	r3, [sp, #16]
 800beec:	9307      	str	r3, [sp, #28]
 800beee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bef2:	931a      	str	r3, [sp, #104]	; 0x68
 800bef4:	4654      	mov	r4, sl
 800bef6:	2205      	movs	r2, #5
 800bef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befc:	4850      	ldr	r0, [pc, #320]	; (800c040 <_svfiprintf_r+0x1e8>)
 800befe:	f7f4 f9e7 	bl	80002d0 <memchr>
 800bf02:	9a04      	ldr	r2, [sp, #16]
 800bf04:	b9d8      	cbnz	r0, 800bf3e <_svfiprintf_r+0xe6>
 800bf06:	06d0      	lsls	r0, r2, #27
 800bf08:	bf44      	itt	mi
 800bf0a:	2320      	movmi	r3, #32
 800bf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf10:	0711      	lsls	r1, r2, #28
 800bf12:	bf44      	itt	mi
 800bf14:	232b      	movmi	r3, #43	; 0x2b
 800bf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf20:	d015      	beq.n	800bf4e <_svfiprintf_r+0xf6>
 800bf22:	9a07      	ldr	r2, [sp, #28]
 800bf24:	4654      	mov	r4, sl
 800bf26:	2000      	movs	r0, #0
 800bf28:	f04f 0c0a 	mov.w	ip, #10
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf32:	3b30      	subs	r3, #48	; 0x30
 800bf34:	2b09      	cmp	r3, #9
 800bf36:	d94d      	bls.n	800bfd4 <_svfiprintf_r+0x17c>
 800bf38:	b1b0      	cbz	r0, 800bf68 <_svfiprintf_r+0x110>
 800bf3a:	9207      	str	r2, [sp, #28]
 800bf3c:	e014      	b.n	800bf68 <_svfiprintf_r+0x110>
 800bf3e:	eba0 0308 	sub.w	r3, r0, r8
 800bf42:	fa09 f303 	lsl.w	r3, r9, r3
 800bf46:	4313      	orrs	r3, r2
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	46a2      	mov	sl, r4
 800bf4c:	e7d2      	b.n	800bef4 <_svfiprintf_r+0x9c>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	1d19      	adds	r1, r3, #4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	9103      	str	r1, [sp, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	bfbb      	ittet	lt
 800bf5a:	425b      	neglt	r3, r3
 800bf5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf60:	9307      	strge	r3, [sp, #28]
 800bf62:	9307      	strlt	r3, [sp, #28]
 800bf64:	bfb8      	it	lt
 800bf66:	9204      	strlt	r2, [sp, #16]
 800bf68:	7823      	ldrb	r3, [r4, #0]
 800bf6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf6c:	d10c      	bne.n	800bf88 <_svfiprintf_r+0x130>
 800bf6e:	7863      	ldrb	r3, [r4, #1]
 800bf70:	2b2a      	cmp	r3, #42	; 0x2a
 800bf72:	d134      	bne.n	800bfde <_svfiprintf_r+0x186>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	1d1a      	adds	r2, r3, #4
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	9203      	str	r2, [sp, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bfb8      	it	lt
 800bf80:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf84:	3402      	adds	r4, #2
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c050 <_svfiprintf_r+0x1f8>
 800bf8c:	7821      	ldrb	r1, [r4, #0]
 800bf8e:	2203      	movs	r2, #3
 800bf90:	4650      	mov	r0, sl
 800bf92:	f7f4 f99d 	bl	80002d0 <memchr>
 800bf96:	b138      	cbz	r0, 800bfa8 <_svfiprintf_r+0x150>
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	eba0 000a 	sub.w	r0, r0, sl
 800bf9e:	2240      	movs	r2, #64	; 0x40
 800bfa0:	4082      	lsls	r2, r0
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	3401      	adds	r4, #1
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfac:	4825      	ldr	r0, [pc, #148]	; (800c044 <_svfiprintf_r+0x1ec>)
 800bfae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfb2:	2206      	movs	r2, #6
 800bfb4:	f7f4 f98c 	bl	80002d0 <memchr>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d038      	beq.n	800c02e <_svfiprintf_r+0x1d6>
 800bfbc:	4b22      	ldr	r3, [pc, #136]	; (800c048 <_svfiprintf_r+0x1f0>)
 800bfbe:	bb1b      	cbnz	r3, 800c008 <_svfiprintf_r+0x1b0>
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	3307      	adds	r3, #7
 800bfc4:	f023 0307 	bic.w	r3, r3, #7
 800bfc8:	3308      	adds	r3, #8
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	4433      	add	r3, r6
 800bfd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd2:	e768      	b.n	800bea6 <_svfiprintf_r+0x4e>
 800bfd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd8:	460c      	mov	r4, r1
 800bfda:	2001      	movs	r0, #1
 800bfdc:	e7a6      	b.n	800bf2c <_svfiprintf_r+0xd4>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	3401      	adds	r4, #1
 800bfe2:	9305      	str	r3, [sp, #20]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f04f 0c0a 	mov.w	ip, #10
 800bfea:	4620      	mov	r0, r4
 800bfec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff0:	3a30      	subs	r2, #48	; 0x30
 800bff2:	2a09      	cmp	r2, #9
 800bff4:	d903      	bls.n	800bffe <_svfiprintf_r+0x1a6>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0c6      	beq.n	800bf88 <_svfiprintf_r+0x130>
 800bffa:	9105      	str	r1, [sp, #20]
 800bffc:	e7c4      	b.n	800bf88 <_svfiprintf_r+0x130>
 800bffe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c002:	4604      	mov	r4, r0
 800c004:	2301      	movs	r3, #1
 800c006:	e7f0      	b.n	800bfea <_svfiprintf_r+0x192>
 800c008:	ab03      	add	r3, sp, #12
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	462a      	mov	r2, r5
 800c00e:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <_svfiprintf_r+0x1f4>)
 800c010:	a904      	add	r1, sp, #16
 800c012:	4638      	mov	r0, r7
 800c014:	f7fd fe44 	bl	8009ca0 <_printf_float>
 800c018:	1c42      	adds	r2, r0, #1
 800c01a:	4606      	mov	r6, r0
 800c01c:	d1d6      	bne.n	800bfcc <_svfiprintf_r+0x174>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	065b      	lsls	r3, r3, #25
 800c022:	f53f af2d 	bmi.w	800be80 <_svfiprintf_r+0x28>
 800c026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c028:	b01d      	add	sp, #116	; 0x74
 800c02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <_svfiprintf_r+0x1f4>)
 800c036:	a904      	add	r1, sp, #16
 800c038:	4638      	mov	r0, r7
 800c03a:	f7fe f8d5 	bl	800a1e8 <_printf_i>
 800c03e:	e7eb      	b.n	800c018 <_svfiprintf_r+0x1c0>
 800c040:	08021554 	.word	0x08021554
 800c044:	0802155e 	.word	0x0802155e
 800c048:	08009ca1 	.word	0x08009ca1
 800c04c:	0800bda5 	.word	0x0800bda5
 800c050:	0802155a 	.word	0x0802155a

0800c054 <__sflush_r>:
 800c054:	898a      	ldrh	r2, [r1, #12]
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05a:	4605      	mov	r5, r0
 800c05c:	0710      	lsls	r0, r2, #28
 800c05e:	460c      	mov	r4, r1
 800c060:	d458      	bmi.n	800c114 <__sflush_r+0xc0>
 800c062:	684b      	ldr	r3, [r1, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dc05      	bgt.n	800c074 <__sflush_r+0x20>
 800c068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dc02      	bgt.n	800c074 <__sflush_r+0x20>
 800c06e:	2000      	movs	r0, #0
 800c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c076:	2e00      	cmp	r6, #0
 800c078:	d0f9      	beq.n	800c06e <__sflush_r+0x1a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c080:	682f      	ldr	r7, [r5, #0]
 800c082:	6a21      	ldr	r1, [r4, #32]
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	d032      	beq.n	800c0ee <__sflush_r+0x9a>
 800c088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	075a      	lsls	r2, r3, #29
 800c08e:	d505      	bpl.n	800c09c <__sflush_r+0x48>
 800c090:	6863      	ldr	r3, [r4, #4]
 800c092:	1ac0      	subs	r0, r0, r3
 800c094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c096:	b10b      	cbz	r3, 800c09c <__sflush_r+0x48>
 800c098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c09a:	1ac0      	subs	r0, r0, r3
 800c09c:	2300      	movs	r3, #0
 800c09e:	4602      	mov	r2, r0
 800c0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0a2:	6a21      	ldr	r1, [r4, #32]
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b0      	blx	r6
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	d106      	bne.n	800c0bc <__sflush_r+0x68>
 800c0ae:	6829      	ldr	r1, [r5, #0]
 800c0b0:	291d      	cmp	r1, #29
 800c0b2:	d82b      	bhi.n	800c10c <__sflush_r+0xb8>
 800c0b4:	4a29      	ldr	r2, [pc, #164]	; (800c15c <__sflush_r+0x108>)
 800c0b6:	410a      	asrs	r2, r1
 800c0b8:	07d6      	lsls	r6, r2, #31
 800c0ba:	d427      	bmi.n	800c10c <__sflush_r+0xb8>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	6062      	str	r2, [r4, #4]
 800c0c0:	04d9      	lsls	r1, r3, #19
 800c0c2:	6922      	ldr	r2, [r4, #16]
 800c0c4:	6022      	str	r2, [r4, #0]
 800c0c6:	d504      	bpl.n	800c0d2 <__sflush_r+0x7e>
 800c0c8:	1c42      	adds	r2, r0, #1
 800c0ca:	d101      	bne.n	800c0d0 <__sflush_r+0x7c>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b903      	cbnz	r3, 800c0d2 <__sflush_r+0x7e>
 800c0d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c0d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0d4:	602f      	str	r7, [r5, #0]
 800c0d6:	2900      	cmp	r1, #0
 800c0d8:	d0c9      	beq.n	800c06e <__sflush_r+0x1a>
 800c0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0de:	4299      	cmp	r1, r3
 800c0e0:	d002      	beq.n	800c0e8 <__sflush_r+0x94>
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7ff f9e2 	bl	800b4ac <_free_r>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ec:	e7c0      	b.n	800c070 <__sflush_r+0x1c>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	47b0      	blx	r6
 800c0f4:	1c41      	adds	r1, r0, #1
 800c0f6:	d1c8      	bne.n	800c08a <__sflush_r+0x36>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0c5      	beq.n	800c08a <__sflush_r+0x36>
 800c0fe:	2b1d      	cmp	r3, #29
 800c100:	d001      	beq.n	800c106 <__sflush_r+0xb2>
 800c102:	2b16      	cmp	r3, #22
 800c104:	d101      	bne.n	800c10a <__sflush_r+0xb6>
 800c106:	602f      	str	r7, [r5, #0]
 800c108:	e7b1      	b.n	800c06e <__sflush_r+0x1a>
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	e7ad      	b.n	800c070 <__sflush_r+0x1c>
 800c114:	690f      	ldr	r7, [r1, #16]
 800c116:	2f00      	cmp	r7, #0
 800c118:	d0a9      	beq.n	800c06e <__sflush_r+0x1a>
 800c11a:	0793      	lsls	r3, r2, #30
 800c11c:	680e      	ldr	r6, [r1, #0]
 800c11e:	bf08      	it	eq
 800c120:	694b      	ldreq	r3, [r1, #20]
 800c122:	600f      	str	r7, [r1, #0]
 800c124:	bf18      	it	ne
 800c126:	2300      	movne	r3, #0
 800c128:	eba6 0807 	sub.w	r8, r6, r7
 800c12c:	608b      	str	r3, [r1, #8]
 800c12e:	f1b8 0f00 	cmp.w	r8, #0
 800c132:	dd9c      	ble.n	800c06e <__sflush_r+0x1a>
 800c134:	6a21      	ldr	r1, [r4, #32]
 800c136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c138:	4643      	mov	r3, r8
 800c13a:	463a      	mov	r2, r7
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b0      	blx	r6
 800c140:	2800      	cmp	r0, #0
 800c142:	dc06      	bgt.n	800c152 <__sflush_r+0xfe>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	e78e      	b.n	800c070 <__sflush_r+0x1c>
 800c152:	4407      	add	r7, r0
 800c154:	eba8 0800 	sub.w	r8, r8, r0
 800c158:	e7e9      	b.n	800c12e <__sflush_r+0xda>
 800c15a:	bf00      	nop
 800c15c:	dfbffffe 	.word	0xdfbffffe

0800c160 <_fflush_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	690b      	ldr	r3, [r1, #16]
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	b913      	cbnz	r3, 800c170 <_fflush_r+0x10>
 800c16a:	2500      	movs	r5, #0
 800c16c:	4628      	mov	r0, r5
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	b118      	cbz	r0, 800c17a <_fflush_r+0x1a>
 800c172:	6a03      	ldr	r3, [r0, #32]
 800c174:	b90b      	cbnz	r3, 800c17a <_fflush_r+0x1a>
 800c176:	f7fe f9d3 	bl	800a520 <__sinit>
 800c17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0f3      	beq.n	800c16a <_fflush_r+0xa>
 800c182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c184:	07d0      	lsls	r0, r2, #31
 800c186:	d404      	bmi.n	800c192 <_fflush_r+0x32>
 800c188:	0599      	lsls	r1, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_fflush_r+0x32>
 800c18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c18e:	f7fe fb11 	bl	800a7b4 <__retarget_lock_acquire_recursive>
 800c192:	4628      	mov	r0, r5
 800c194:	4621      	mov	r1, r4
 800c196:	f7ff ff5d 	bl	800c054 <__sflush_r>
 800c19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c19c:	07da      	lsls	r2, r3, #31
 800c19e:	4605      	mov	r5, r0
 800c1a0:	d4e4      	bmi.n	800c16c <_fflush_r+0xc>
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	059b      	lsls	r3, r3, #22
 800c1a6:	d4e1      	bmi.n	800c16c <_fflush_r+0xc>
 800c1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1aa:	f7fe fb04 	bl	800a7b6 <__retarget_lock_release_recursive>
 800c1ae:	e7dd      	b.n	800c16c <_fflush_r+0xc>

0800c1b0 <memmove>:
 800c1b0:	4288      	cmp	r0, r1
 800c1b2:	b510      	push	{r4, lr}
 800c1b4:	eb01 0402 	add.w	r4, r1, r2
 800c1b8:	d902      	bls.n	800c1c0 <memmove+0x10>
 800c1ba:	4284      	cmp	r4, r0
 800c1bc:	4623      	mov	r3, r4
 800c1be:	d807      	bhi.n	800c1d0 <memmove+0x20>
 800c1c0:	1e43      	subs	r3, r0, #1
 800c1c2:	42a1      	cmp	r1, r4
 800c1c4:	d008      	beq.n	800c1d8 <memmove+0x28>
 800c1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ce:	e7f8      	b.n	800c1c2 <memmove+0x12>
 800c1d0:	4402      	add	r2, r0
 800c1d2:	4601      	mov	r1, r0
 800c1d4:	428a      	cmp	r2, r1
 800c1d6:	d100      	bne.n	800c1da <memmove+0x2a>
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1e2:	e7f7      	b.n	800c1d4 <memmove+0x24>

0800c1e4 <_sbrk_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d06      	ldr	r5, [pc, #24]	; (800c200 <_sbrk_r+0x1c>)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	602b      	str	r3, [r5, #0]
 800c1f0:	f7f6 fa42 	bl	8002678 <_sbrk>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_sbrk_r+0x1a>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_sbrk_r+0x1a>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	2000cea4 	.word	0x2000cea4

0800c204 <memcpy>:
 800c204:	440a      	add	r2, r1
 800c206:	4291      	cmp	r1, r2
 800c208:	f100 33ff 	add.w	r3, r0, #4294967295
 800c20c:	d100      	bne.n	800c210 <memcpy+0xc>
 800c20e:	4770      	bx	lr
 800c210:	b510      	push	{r4, lr}
 800c212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c21a:	4291      	cmp	r1, r2
 800c21c:	d1f9      	bne.n	800c212 <memcpy+0xe>
 800c21e:	bd10      	pop	{r4, pc}

0800c220 <__assert_func>:
 800c220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c222:	4614      	mov	r4, r2
 800c224:	461a      	mov	r2, r3
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <__assert_func+0x2c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4605      	mov	r5, r0
 800c22c:	68d8      	ldr	r0, [r3, #12]
 800c22e:	b14c      	cbz	r4, 800c244 <__assert_func+0x24>
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <__assert_func+0x30>)
 800c232:	9100      	str	r1, [sp, #0]
 800c234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c238:	4906      	ldr	r1, [pc, #24]	; (800c254 <__assert_func+0x34>)
 800c23a:	462b      	mov	r3, r5
 800c23c:	f000 f872 	bl	800c324 <fiprintf>
 800c240:	f000 f882 	bl	800c348 <abort>
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <__assert_func+0x38>)
 800c246:	461c      	mov	r4, r3
 800c248:	e7f3      	b.n	800c232 <__assert_func+0x12>
 800c24a:	bf00      	nop
 800c24c:	20000690 	.word	0x20000690
 800c250:	0802156f 	.word	0x0802156f
 800c254:	0802157c 	.word	0x0802157c
 800c258:	080215aa 	.word	0x080215aa

0800c25c <_calloc_r>:
 800c25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c25e:	fba1 2402 	umull	r2, r4, r1, r2
 800c262:	b94c      	cbnz	r4, 800c278 <_calloc_r+0x1c>
 800c264:	4611      	mov	r1, r2
 800c266:	9201      	str	r2, [sp, #4]
 800c268:	f7ff f994 	bl	800b594 <_malloc_r>
 800c26c:	9a01      	ldr	r2, [sp, #4]
 800c26e:	4605      	mov	r5, r0
 800c270:	b930      	cbnz	r0, 800c280 <_calloc_r+0x24>
 800c272:	4628      	mov	r0, r5
 800c274:	b003      	add	sp, #12
 800c276:	bd30      	pop	{r4, r5, pc}
 800c278:	220c      	movs	r2, #12
 800c27a:	6002      	str	r2, [r0, #0]
 800c27c:	2500      	movs	r5, #0
 800c27e:	e7f8      	b.n	800c272 <_calloc_r+0x16>
 800c280:	4621      	mov	r1, r4
 800c282:	f7fe fa1a 	bl	800a6ba <memset>
 800c286:	e7f4      	b.n	800c272 <_calloc_r+0x16>

0800c288 <__ascii_mbtowc>:
 800c288:	b082      	sub	sp, #8
 800c28a:	b901      	cbnz	r1, 800c28e <__ascii_mbtowc+0x6>
 800c28c:	a901      	add	r1, sp, #4
 800c28e:	b142      	cbz	r2, 800c2a2 <__ascii_mbtowc+0x1a>
 800c290:	b14b      	cbz	r3, 800c2a6 <__ascii_mbtowc+0x1e>
 800c292:	7813      	ldrb	r3, [r2, #0]
 800c294:	600b      	str	r3, [r1, #0]
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	1e10      	subs	r0, r2, #0
 800c29a:	bf18      	it	ne
 800c29c:	2001      	movne	r0, #1
 800c29e:	b002      	add	sp, #8
 800c2a0:	4770      	bx	lr
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	e7fb      	b.n	800c29e <__ascii_mbtowc+0x16>
 800c2a6:	f06f 0001 	mvn.w	r0, #1
 800c2aa:	e7f8      	b.n	800c29e <__ascii_mbtowc+0x16>

0800c2ac <_realloc_r>:
 800c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b0:	4680      	mov	r8, r0
 800c2b2:	4614      	mov	r4, r2
 800c2b4:	460e      	mov	r6, r1
 800c2b6:	b921      	cbnz	r1, 800c2c2 <_realloc_r+0x16>
 800c2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2bc:	4611      	mov	r1, r2
 800c2be:	f7ff b969 	b.w	800b594 <_malloc_r>
 800c2c2:	b92a      	cbnz	r2, 800c2d0 <_realloc_r+0x24>
 800c2c4:	f7ff f8f2 	bl	800b4ac <_free_r>
 800c2c8:	4625      	mov	r5, r4
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d0:	f000 f841 	bl	800c356 <_malloc_usable_size_r>
 800c2d4:	4284      	cmp	r4, r0
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	d802      	bhi.n	800c2e0 <_realloc_r+0x34>
 800c2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2de:	d812      	bhi.n	800c306 <_realloc_r+0x5a>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	f7ff f956 	bl	800b594 <_malloc_r>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0ed      	beq.n	800c2ca <_realloc_r+0x1e>
 800c2ee:	42bc      	cmp	r4, r7
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	bf28      	it	cs
 800c2f6:	463a      	movcs	r2, r7
 800c2f8:	f7ff ff84 	bl	800c204 <memcpy>
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4640      	mov	r0, r8
 800c300:	f7ff f8d4 	bl	800b4ac <_free_r>
 800c304:	e7e1      	b.n	800c2ca <_realloc_r+0x1e>
 800c306:	4635      	mov	r5, r6
 800c308:	e7df      	b.n	800c2ca <_realloc_r+0x1e>

0800c30a <__ascii_wctomb>:
 800c30a:	b149      	cbz	r1, 800c320 <__ascii_wctomb+0x16>
 800c30c:	2aff      	cmp	r2, #255	; 0xff
 800c30e:	bf85      	ittet	hi
 800c310:	238a      	movhi	r3, #138	; 0x8a
 800c312:	6003      	strhi	r3, [r0, #0]
 800c314:	700a      	strbls	r2, [r1, #0]
 800c316:	f04f 30ff 	movhi.w	r0, #4294967295
 800c31a:	bf98      	it	ls
 800c31c:	2001      	movls	r0, #1
 800c31e:	4770      	bx	lr
 800c320:	4608      	mov	r0, r1
 800c322:	4770      	bx	lr

0800c324 <fiprintf>:
 800c324:	b40e      	push	{r1, r2, r3}
 800c326:	b503      	push	{r0, r1, lr}
 800c328:	4601      	mov	r1, r0
 800c32a:	ab03      	add	r3, sp, #12
 800c32c:	4805      	ldr	r0, [pc, #20]	; (800c344 <fiprintf+0x20>)
 800c32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c332:	6800      	ldr	r0, [r0, #0]
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	f000 f83f 	bl	800c3b8 <_vfiprintf_r>
 800c33a:	b002      	add	sp, #8
 800c33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c340:	b003      	add	sp, #12
 800c342:	4770      	bx	lr
 800c344:	20000690 	.word	0x20000690

0800c348 <abort>:
 800c348:	b508      	push	{r3, lr}
 800c34a:	2006      	movs	r0, #6
 800c34c:	f000 fa0c 	bl	800c768 <raise>
 800c350:	2001      	movs	r0, #1
 800c352:	f7f6 f919 	bl	8002588 <_exit>

0800c356 <_malloc_usable_size_r>:
 800c356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c35a:	1f18      	subs	r0, r3, #4
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	bfbc      	itt	lt
 800c360:	580b      	ldrlt	r3, [r1, r0]
 800c362:	18c0      	addlt	r0, r0, r3
 800c364:	4770      	bx	lr

0800c366 <__sfputc_r>:
 800c366:	6893      	ldr	r3, [r2, #8]
 800c368:	3b01      	subs	r3, #1
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	b410      	push	{r4}
 800c36e:	6093      	str	r3, [r2, #8]
 800c370:	da08      	bge.n	800c384 <__sfputc_r+0x1e>
 800c372:	6994      	ldr	r4, [r2, #24]
 800c374:	42a3      	cmp	r3, r4
 800c376:	db01      	blt.n	800c37c <__sfputc_r+0x16>
 800c378:	290a      	cmp	r1, #10
 800c37a:	d103      	bne.n	800c384 <__sfputc_r+0x1e>
 800c37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c380:	f000 b934 	b.w	800c5ec <__swbuf_r>
 800c384:	6813      	ldr	r3, [r2, #0]
 800c386:	1c58      	adds	r0, r3, #1
 800c388:	6010      	str	r0, [r2, #0]
 800c38a:	7019      	strb	r1, [r3, #0]
 800c38c:	4608      	mov	r0, r1
 800c38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <__sfputs_r>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	4606      	mov	r6, r0
 800c398:	460f      	mov	r7, r1
 800c39a:	4614      	mov	r4, r2
 800c39c:	18d5      	adds	r5, r2, r3
 800c39e:	42ac      	cmp	r4, r5
 800c3a0:	d101      	bne.n	800c3a6 <__sfputs_r+0x12>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e007      	b.n	800c3b6 <__sfputs_r+0x22>
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff ffda 	bl	800c366 <__sfputc_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	d1f3      	bne.n	800c39e <__sfputs_r+0xa>
 800c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3b8 <_vfiprintf_r>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	460d      	mov	r5, r1
 800c3be:	b09d      	sub	sp, #116	; 0x74
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	4698      	mov	r8, r3
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	b118      	cbz	r0, 800c3d0 <_vfiprintf_r+0x18>
 800c3c8:	6a03      	ldr	r3, [r0, #32]
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <_vfiprintf_r+0x18>
 800c3cc:	f7fe f8a8 	bl	800a520 <__sinit>
 800c3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	059a      	lsls	r2, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3de:	f7fe f9e9 	bl	800a7b4 <__retarget_lock_acquire_recursive>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	071b      	lsls	r3, r3, #28
 800c3e6:	d501      	bpl.n	800c3ec <_vfiprintf_r+0x34>
 800c3e8:	692b      	ldr	r3, [r5, #16]
 800c3ea:	b99b      	cbnz	r3, 800c414 <_vfiprintf_r+0x5c>
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f000 f93a 	bl	800c668 <__swsetup_r>
 800c3f4:	b170      	cbz	r0, 800c414 <_vfiprintf_r+0x5c>
 800c3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f8:	07dc      	lsls	r4, r3, #31
 800c3fa:	d504      	bpl.n	800c406 <_vfiprintf_r+0x4e>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	b01d      	add	sp, #116	; 0x74
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	0598      	lsls	r0, r3, #22
 800c40a:	d4f7      	bmi.n	800c3fc <_vfiprintf_r+0x44>
 800c40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40e:	f7fe f9d2 	bl	800a7b6 <__retarget_lock_release_recursive>
 800c412:	e7f3      	b.n	800c3fc <_vfiprintf_r+0x44>
 800c414:	2300      	movs	r3, #0
 800c416:	9309      	str	r3, [sp, #36]	; 0x24
 800c418:	2320      	movs	r3, #32
 800c41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c422:	2330      	movs	r3, #48	; 0x30
 800c424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c5d8 <_vfiprintf_r+0x220>
 800c428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c42c:	f04f 0901 	mov.w	r9, #1
 800c430:	4623      	mov	r3, r4
 800c432:	469a      	mov	sl, r3
 800c434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c438:	b10a      	cbz	r2, 800c43e <_vfiprintf_r+0x86>
 800c43a:	2a25      	cmp	r2, #37	; 0x25
 800c43c:	d1f9      	bne.n	800c432 <_vfiprintf_r+0x7a>
 800c43e:	ebba 0b04 	subs.w	fp, sl, r4
 800c442:	d00b      	beq.n	800c45c <_vfiprintf_r+0xa4>
 800c444:	465b      	mov	r3, fp
 800c446:	4622      	mov	r2, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7ff ffa2 	bl	800c394 <__sfputs_r>
 800c450:	3001      	adds	r0, #1
 800c452:	f000 80a9 	beq.w	800c5a8 <_vfiprintf_r+0x1f0>
 800c456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c458:	445a      	add	r2, fp
 800c45a:	9209      	str	r2, [sp, #36]	; 0x24
 800c45c:	f89a 3000 	ldrb.w	r3, [sl]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 80a1 	beq.w	800c5a8 <_vfiprintf_r+0x1f0>
 800c466:	2300      	movs	r3, #0
 800c468:	f04f 32ff 	mov.w	r2, #4294967295
 800c46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c470:	f10a 0a01 	add.w	sl, sl, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	9307      	str	r3, [sp, #28]
 800c478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47c:	931a      	str	r3, [sp, #104]	; 0x68
 800c47e:	4654      	mov	r4, sl
 800c480:	2205      	movs	r2, #5
 800c482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c486:	4854      	ldr	r0, [pc, #336]	; (800c5d8 <_vfiprintf_r+0x220>)
 800c488:	f7f3 ff22 	bl	80002d0 <memchr>
 800c48c:	9a04      	ldr	r2, [sp, #16]
 800c48e:	b9d8      	cbnz	r0, 800c4c8 <_vfiprintf_r+0x110>
 800c490:	06d1      	lsls	r1, r2, #27
 800c492:	bf44      	itt	mi
 800c494:	2320      	movmi	r3, #32
 800c496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c49a:	0713      	lsls	r3, r2, #28
 800c49c:	bf44      	itt	mi
 800c49e:	232b      	movmi	r3, #43	; 0x2b
 800c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4aa:	d015      	beq.n	800c4d8 <_vfiprintf_r+0x120>
 800c4ac:	9a07      	ldr	r2, [sp, #28]
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f04f 0c0a 	mov.w	ip, #10
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4bc:	3b30      	subs	r3, #48	; 0x30
 800c4be:	2b09      	cmp	r3, #9
 800c4c0:	d94d      	bls.n	800c55e <_vfiprintf_r+0x1a6>
 800c4c2:	b1b0      	cbz	r0, 800c4f2 <_vfiprintf_r+0x13a>
 800c4c4:	9207      	str	r2, [sp, #28]
 800c4c6:	e014      	b.n	800c4f2 <_vfiprintf_r+0x13a>
 800c4c8:	eba0 0308 	sub.w	r3, r0, r8
 800c4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	46a2      	mov	sl, r4
 800c4d6:	e7d2      	b.n	800c47e <_vfiprintf_r+0xc6>
 800c4d8:	9b03      	ldr	r3, [sp, #12]
 800c4da:	1d19      	adds	r1, r3, #4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	9103      	str	r1, [sp, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	bfbb      	ittet	lt
 800c4e4:	425b      	neglt	r3, r3
 800c4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ea:	9307      	strge	r3, [sp, #28]
 800c4ec:	9307      	strlt	r3, [sp, #28]
 800c4ee:	bfb8      	it	lt
 800c4f0:	9204      	strlt	r2, [sp, #16]
 800c4f2:	7823      	ldrb	r3, [r4, #0]
 800c4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f6:	d10c      	bne.n	800c512 <_vfiprintf_r+0x15a>
 800c4f8:	7863      	ldrb	r3, [r4, #1]
 800c4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fc:	d134      	bne.n	800c568 <_vfiprintf_r+0x1b0>
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9203      	str	r2, [sp, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfb8      	it	lt
 800c50a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c50e:	3402      	adds	r4, #2
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c5e8 <_vfiprintf_r+0x230>
 800c516:	7821      	ldrb	r1, [r4, #0]
 800c518:	2203      	movs	r2, #3
 800c51a:	4650      	mov	r0, sl
 800c51c:	f7f3 fed8 	bl	80002d0 <memchr>
 800c520:	b138      	cbz	r0, 800c532 <_vfiprintf_r+0x17a>
 800c522:	9b04      	ldr	r3, [sp, #16]
 800c524:	eba0 000a 	sub.w	r0, r0, sl
 800c528:	2240      	movs	r2, #64	; 0x40
 800c52a:	4082      	lsls	r2, r0
 800c52c:	4313      	orrs	r3, r2
 800c52e:	3401      	adds	r4, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c536:	4829      	ldr	r0, [pc, #164]	; (800c5dc <_vfiprintf_r+0x224>)
 800c538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c53c:	2206      	movs	r2, #6
 800c53e:	f7f3 fec7 	bl	80002d0 <memchr>
 800c542:	2800      	cmp	r0, #0
 800c544:	d03f      	beq.n	800c5c6 <_vfiprintf_r+0x20e>
 800c546:	4b26      	ldr	r3, [pc, #152]	; (800c5e0 <_vfiprintf_r+0x228>)
 800c548:	bb1b      	cbnz	r3, 800c592 <_vfiprintf_r+0x1da>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	3307      	adds	r3, #7
 800c54e:	f023 0307 	bic.w	r3, r3, #7
 800c552:	3308      	adds	r3, #8
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c558:	443b      	add	r3, r7
 800c55a:	9309      	str	r3, [sp, #36]	; 0x24
 800c55c:	e768      	b.n	800c430 <_vfiprintf_r+0x78>
 800c55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c562:	460c      	mov	r4, r1
 800c564:	2001      	movs	r0, #1
 800c566:	e7a6      	b.n	800c4b6 <_vfiprintf_r+0xfe>
 800c568:	2300      	movs	r3, #0
 800c56a:	3401      	adds	r4, #1
 800c56c:	9305      	str	r3, [sp, #20]
 800c56e:	4619      	mov	r1, r3
 800c570:	f04f 0c0a 	mov.w	ip, #10
 800c574:	4620      	mov	r0, r4
 800c576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57a:	3a30      	subs	r2, #48	; 0x30
 800c57c:	2a09      	cmp	r2, #9
 800c57e:	d903      	bls.n	800c588 <_vfiprintf_r+0x1d0>
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0c6      	beq.n	800c512 <_vfiprintf_r+0x15a>
 800c584:	9105      	str	r1, [sp, #20]
 800c586:	e7c4      	b.n	800c512 <_vfiprintf_r+0x15a>
 800c588:	fb0c 2101 	mla	r1, ip, r1, r2
 800c58c:	4604      	mov	r4, r0
 800c58e:	2301      	movs	r3, #1
 800c590:	e7f0      	b.n	800c574 <_vfiprintf_r+0x1bc>
 800c592:	ab03      	add	r3, sp, #12
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	462a      	mov	r2, r5
 800c598:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <_vfiprintf_r+0x22c>)
 800c59a:	a904      	add	r1, sp, #16
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fd fb7f 	bl	8009ca0 <_printf_float>
 800c5a2:	4607      	mov	r7, r0
 800c5a4:	1c78      	adds	r0, r7, #1
 800c5a6:	d1d6      	bne.n	800c556 <_vfiprintf_r+0x19e>
 800c5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d405      	bmi.n	800c5ba <_vfiprintf_r+0x202>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d402      	bmi.n	800c5ba <_vfiprintf_r+0x202>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5b6:	f7fe f8fe 	bl	800a7b6 <__retarget_lock_release_recursive>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	065b      	lsls	r3, r3, #25
 800c5be:	f53f af1d 	bmi.w	800c3fc <_vfiprintf_r+0x44>
 800c5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5c4:	e71c      	b.n	800c400 <_vfiprintf_r+0x48>
 800c5c6:	ab03      	add	r3, sp, #12
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	462a      	mov	r2, r5
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <_vfiprintf_r+0x22c>)
 800c5ce:	a904      	add	r1, sp, #16
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7fd fe09 	bl	800a1e8 <_printf_i>
 800c5d6:	e7e4      	b.n	800c5a2 <_vfiprintf_r+0x1ea>
 800c5d8:	08021554 	.word	0x08021554
 800c5dc:	0802155e 	.word	0x0802155e
 800c5e0:	08009ca1 	.word	0x08009ca1
 800c5e4:	0800c395 	.word	0x0800c395
 800c5e8:	0802155a 	.word	0x0802155a

0800c5ec <__swbuf_r>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	460e      	mov	r6, r1
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b118      	cbz	r0, 800c5fe <__swbuf_r+0x12>
 800c5f6:	6a03      	ldr	r3, [r0, #32]
 800c5f8:	b90b      	cbnz	r3, 800c5fe <__swbuf_r+0x12>
 800c5fa:	f7fd ff91 	bl	800a520 <__sinit>
 800c5fe:	69a3      	ldr	r3, [r4, #24]
 800c600:	60a3      	str	r3, [r4, #8]
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	071a      	lsls	r2, r3, #28
 800c606:	d525      	bpl.n	800c654 <__swbuf_r+0x68>
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	b31b      	cbz	r3, 800c654 <__swbuf_r+0x68>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	6922      	ldr	r2, [r4, #16]
 800c610:	1a98      	subs	r0, r3, r2
 800c612:	6963      	ldr	r3, [r4, #20]
 800c614:	b2f6      	uxtb	r6, r6
 800c616:	4283      	cmp	r3, r0
 800c618:	4637      	mov	r7, r6
 800c61a:	dc04      	bgt.n	800c626 <__swbuf_r+0x3a>
 800c61c:	4621      	mov	r1, r4
 800c61e:	4628      	mov	r0, r5
 800c620:	f7ff fd9e 	bl	800c160 <_fflush_r>
 800c624:	b9e0      	cbnz	r0, 800c660 <__swbuf_r+0x74>
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	3b01      	subs	r3, #1
 800c62a:	60a3      	str	r3, [r4, #8]
 800c62c:	6823      	ldr	r3, [r4, #0]
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	6022      	str	r2, [r4, #0]
 800c632:	701e      	strb	r6, [r3, #0]
 800c634:	6962      	ldr	r2, [r4, #20]
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	429a      	cmp	r2, r3
 800c63a:	d004      	beq.n	800c646 <__swbuf_r+0x5a>
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	07db      	lsls	r3, r3, #31
 800c640:	d506      	bpl.n	800c650 <__swbuf_r+0x64>
 800c642:	2e0a      	cmp	r6, #10
 800c644:	d104      	bne.n	800c650 <__swbuf_r+0x64>
 800c646:	4621      	mov	r1, r4
 800c648:	4628      	mov	r0, r5
 800c64a:	f7ff fd89 	bl	800c160 <_fflush_r>
 800c64e:	b938      	cbnz	r0, 800c660 <__swbuf_r+0x74>
 800c650:	4638      	mov	r0, r7
 800c652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c654:	4621      	mov	r1, r4
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f806 	bl	800c668 <__swsetup_r>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d0d5      	beq.n	800c60c <__swbuf_r+0x20>
 800c660:	f04f 37ff 	mov.w	r7, #4294967295
 800c664:	e7f4      	b.n	800c650 <__swbuf_r+0x64>
	...

0800c668 <__swsetup_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4b2a      	ldr	r3, [pc, #168]	; (800c714 <__swsetup_r+0xac>)
 800c66c:	4605      	mov	r5, r0
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	460c      	mov	r4, r1
 800c672:	b118      	cbz	r0, 800c67c <__swsetup_r+0x14>
 800c674:	6a03      	ldr	r3, [r0, #32]
 800c676:	b90b      	cbnz	r3, 800c67c <__swsetup_r+0x14>
 800c678:	f7fd ff52 	bl	800a520 <__sinit>
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c682:	0718      	lsls	r0, r3, #28
 800c684:	d422      	bmi.n	800c6cc <__swsetup_r+0x64>
 800c686:	06d9      	lsls	r1, r3, #27
 800c688:	d407      	bmi.n	800c69a <__swsetup_r+0x32>
 800c68a:	2309      	movs	r3, #9
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	e034      	b.n	800c704 <__swsetup_r+0x9c>
 800c69a:	0758      	lsls	r0, r3, #29
 800c69c:	d512      	bpl.n	800c6c4 <__swsetup_r+0x5c>
 800c69e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6a0:	b141      	cbz	r1, 800c6b4 <__swsetup_r+0x4c>
 800c6a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6a6:	4299      	cmp	r1, r3
 800c6a8:	d002      	beq.n	800c6b0 <__swsetup_r+0x48>
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7fe fefe 	bl	800b4ac <_free_r>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	2300      	movs	r3, #0
 800c6be:	6063      	str	r3, [r4, #4]
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f043 0308 	orr.w	r3, r3, #8
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	6923      	ldr	r3, [r4, #16]
 800c6ce:	b94b      	cbnz	r3, 800c6e4 <__swsetup_r+0x7c>
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6da:	d003      	beq.n	800c6e4 <__swsetup_r+0x7c>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f884 	bl	800c7ec <__smakebuf_r>
 800c6e4:	89a0      	ldrh	r0, [r4, #12]
 800c6e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6ea:	f010 0301 	ands.w	r3, r0, #1
 800c6ee:	d00a      	beq.n	800c706 <__swsetup_r+0x9e>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60a3      	str	r3, [r4, #8]
 800c6f4:	6963      	ldr	r3, [r4, #20]
 800c6f6:	425b      	negs	r3, r3
 800c6f8:	61a3      	str	r3, [r4, #24]
 800c6fa:	6923      	ldr	r3, [r4, #16]
 800c6fc:	b943      	cbnz	r3, 800c710 <__swsetup_r+0xa8>
 800c6fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c702:	d1c4      	bne.n	800c68e <__swsetup_r+0x26>
 800c704:	bd38      	pop	{r3, r4, r5, pc}
 800c706:	0781      	lsls	r1, r0, #30
 800c708:	bf58      	it	pl
 800c70a:	6963      	ldrpl	r3, [r4, #20]
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	e7f4      	b.n	800c6fa <__swsetup_r+0x92>
 800c710:	2000      	movs	r0, #0
 800c712:	e7f7      	b.n	800c704 <__swsetup_r+0x9c>
 800c714:	20000690 	.word	0x20000690

0800c718 <_raise_r>:
 800c718:	291f      	cmp	r1, #31
 800c71a:	b538      	push	{r3, r4, r5, lr}
 800c71c:	4604      	mov	r4, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	d904      	bls.n	800c72c <_raise_r+0x14>
 800c722:	2316      	movs	r3, #22
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	f04f 30ff 	mov.w	r0, #4294967295
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c72e:	b112      	cbz	r2, 800c736 <_raise_r+0x1e>
 800c730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c734:	b94b      	cbnz	r3, 800c74a <_raise_r+0x32>
 800c736:	4620      	mov	r0, r4
 800c738:	f000 f830 	bl	800c79c <_getpid_r>
 800c73c:	462a      	mov	r2, r5
 800c73e:	4601      	mov	r1, r0
 800c740:	4620      	mov	r0, r4
 800c742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c746:	f000 b817 	b.w	800c778 <_kill_r>
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d00a      	beq.n	800c764 <_raise_r+0x4c>
 800c74e:	1c59      	adds	r1, r3, #1
 800c750:	d103      	bne.n	800c75a <_raise_r+0x42>
 800c752:	2316      	movs	r3, #22
 800c754:	6003      	str	r3, [r0, #0]
 800c756:	2001      	movs	r0, #1
 800c758:	e7e7      	b.n	800c72a <_raise_r+0x12>
 800c75a:	2400      	movs	r4, #0
 800c75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c760:	4628      	mov	r0, r5
 800c762:	4798      	blx	r3
 800c764:	2000      	movs	r0, #0
 800c766:	e7e0      	b.n	800c72a <_raise_r+0x12>

0800c768 <raise>:
 800c768:	4b02      	ldr	r3, [pc, #8]	; (800c774 <raise+0xc>)
 800c76a:	4601      	mov	r1, r0
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	f7ff bfd3 	b.w	800c718 <_raise_r>
 800c772:	bf00      	nop
 800c774:	20000690 	.word	0x20000690

0800c778 <_kill_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d07      	ldr	r5, [pc, #28]	; (800c798 <_kill_r+0x20>)
 800c77c:	2300      	movs	r3, #0
 800c77e:	4604      	mov	r4, r0
 800c780:	4608      	mov	r0, r1
 800c782:	4611      	mov	r1, r2
 800c784:	602b      	str	r3, [r5, #0]
 800c786:	f7f5 feef 	bl	8002568 <_kill>
 800c78a:	1c43      	adds	r3, r0, #1
 800c78c:	d102      	bne.n	800c794 <_kill_r+0x1c>
 800c78e:	682b      	ldr	r3, [r5, #0]
 800c790:	b103      	cbz	r3, 800c794 <_kill_r+0x1c>
 800c792:	6023      	str	r3, [r4, #0]
 800c794:	bd38      	pop	{r3, r4, r5, pc}
 800c796:	bf00      	nop
 800c798:	2000cea4 	.word	0x2000cea4

0800c79c <_getpid_r>:
 800c79c:	f7f5 bedc 	b.w	8002558 <_getpid>

0800c7a0 <__swhatbuf_r>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	b096      	sub	sp, #88	; 0x58
 800c7ac:	4615      	mov	r5, r2
 800c7ae:	461e      	mov	r6, r3
 800c7b0:	da0d      	bge.n	800c7ce <__swhatbuf_r+0x2e>
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7b8:	f04f 0100 	mov.w	r1, #0
 800c7bc:	bf0c      	ite	eq
 800c7be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7c2:	2340      	movne	r3, #64	; 0x40
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	6031      	str	r1, [r6, #0]
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	b016      	add	sp, #88	; 0x58
 800c7cc:	bd70      	pop	{r4, r5, r6, pc}
 800c7ce:	466a      	mov	r2, sp
 800c7d0:	f000 f848 	bl	800c864 <_fstat_r>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	dbec      	blt.n	800c7b2 <__swhatbuf_r+0x12>
 800c7d8:	9901      	ldr	r1, [sp, #4]
 800c7da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7e2:	4259      	negs	r1, r3
 800c7e4:	4159      	adcs	r1, r3
 800c7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ea:	e7eb      	b.n	800c7c4 <__swhatbuf_r+0x24>

0800c7ec <__smakebuf_r>:
 800c7ec:	898b      	ldrh	r3, [r1, #12]
 800c7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7f0:	079d      	lsls	r5, r3, #30
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	d507      	bpl.n	800c808 <__smakebuf_r+0x1c>
 800c7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	6123      	str	r3, [r4, #16]
 800c800:	2301      	movs	r3, #1
 800c802:	6163      	str	r3, [r4, #20]
 800c804:	b002      	add	sp, #8
 800c806:	bd70      	pop	{r4, r5, r6, pc}
 800c808:	ab01      	add	r3, sp, #4
 800c80a:	466a      	mov	r2, sp
 800c80c:	f7ff ffc8 	bl	800c7a0 <__swhatbuf_r>
 800c810:	9900      	ldr	r1, [sp, #0]
 800c812:	4605      	mov	r5, r0
 800c814:	4630      	mov	r0, r6
 800c816:	f7fe febd 	bl	800b594 <_malloc_r>
 800c81a:	b948      	cbnz	r0, 800c830 <__smakebuf_r+0x44>
 800c81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c820:	059a      	lsls	r2, r3, #22
 800c822:	d4ef      	bmi.n	800c804 <__smakebuf_r+0x18>
 800c824:	f023 0303 	bic.w	r3, r3, #3
 800c828:	f043 0302 	orr.w	r3, r3, #2
 800c82c:	81a3      	strh	r3, [r4, #12]
 800c82e:	e7e3      	b.n	800c7f8 <__smakebuf_r+0xc>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	6020      	str	r0, [r4, #0]
 800c834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	6163      	str	r3, [r4, #20]
 800c83e:	9b01      	ldr	r3, [sp, #4]
 800c840:	6120      	str	r0, [r4, #16]
 800c842:	b15b      	cbz	r3, 800c85c <__smakebuf_r+0x70>
 800c844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c848:	4630      	mov	r0, r6
 800c84a:	f000 f81d 	bl	800c888 <_isatty_r>
 800c84e:	b128      	cbz	r0, 800c85c <__smakebuf_r+0x70>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	f043 0301 	orr.w	r3, r3, #1
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	431d      	orrs	r5, r3
 800c860:	81a5      	strh	r5, [r4, #12]
 800c862:	e7cf      	b.n	800c804 <__smakebuf_r+0x18>

0800c864 <_fstat_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4d07      	ldr	r5, [pc, #28]	; (800c884 <_fstat_r+0x20>)
 800c868:	2300      	movs	r3, #0
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	4611      	mov	r1, r2
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	f7f5 fed8 	bl	8002626 <_fstat>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d102      	bne.n	800c880 <_fstat_r+0x1c>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	b103      	cbz	r3, 800c880 <_fstat_r+0x1c>
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	bd38      	pop	{r3, r4, r5, pc}
 800c882:	bf00      	nop
 800c884:	2000cea4 	.word	0x2000cea4

0800c888 <_isatty_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4d06      	ldr	r5, [pc, #24]	; (800c8a4 <_isatty_r+0x1c>)
 800c88c:	2300      	movs	r3, #0
 800c88e:	4604      	mov	r4, r0
 800c890:	4608      	mov	r0, r1
 800c892:	602b      	str	r3, [r5, #0]
 800c894:	f7f5 fed7 	bl	8002646 <_isatty>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d102      	bne.n	800c8a2 <_isatty_r+0x1a>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	b103      	cbz	r3, 800c8a2 <_isatty_r+0x1a>
 800c8a0:	6023      	str	r3, [r4, #0]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	2000cea4 	.word	0x2000cea4

0800c8a8 <atan2>:
 800c8a8:	f000 ba02 	b.w	800ccb0 <__ieee754_atan2>
 800c8ac:	0000      	movs	r0, r0
	...

0800c8b0 <cos>:
 800c8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8b2:	ec53 2b10 	vmov	r2, r3, d0
 800c8b6:	4826      	ldr	r0, [pc, #152]	; (800c950 <cos+0xa0>)
 800c8b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8bc:	4281      	cmp	r1, r0
 800c8be:	dc06      	bgt.n	800c8ce <cos+0x1e>
 800c8c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c948 <cos+0x98>
 800c8c4:	b005      	add	sp, #20
 800c8c6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ca:	f000 b869 	b.w	800c9a0 <__kernel_cos>
 800c8ce:	4821      	ldr	r0, [pc, #132]	; (800c954 <cos+0xa4>)
 800c8d0:	4281      	cmp	r1, r0
 800c8d2:	dd09      	ble.n	800c8e8 <cos+0x38>
 800c8d4:	ee10 0a10 	vmov	r0, s0
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f7f3 fd55 	bl	8000388 <__aeabi_dsub>
 800c8de:	ec41 0b10 	vmov	d0, r0, r1
 800c8e2:	b005      	add	sp, #20
 800c8e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8e8:	4668      	mov	r0, sp
 800c8ea:	f000 faa9 	bl	800ce40 <__ieee754_rem_pio2>
 800c8ee:	f000 0003 	and.w	r0, r0, #3
 800c8f2:	2801      	cmp	r0, #1
 800c8f4:	d00b      	beq.n	800c90e <cos+0x5e>
 800c8f6:	2802      	cmp	r0, #2
 800c8f8:	d016      	beq.n	800c928 <cos+0x78>
 800c8fa:	b9e0      	cbnz	r0, 800c936 <cos+0x86>
 800c8fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c900:	ed9d 0b00 	vldr	d0, [sp]
 800c904:	f000 f84c 	bl	800c9a0 <__kernel_cos>
 800c908:	ec51 0b10 	vmov	r0, r1, d0
 800c90c:	e7e7      	b.n	800c8de <cos+0x2e>
 800c90e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c912:	ed9d 0b00 	vldr	d0, [sp]
 800c916:	f000 f90b 	bl	800cb30 <__kernel_sin>
 800c91a:	ec53 2b10 	vmov	r2, r3, d0
 800c91e:	ee10 0a10 	vmov	r0, s0
 800c922:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c926:	e7da      	b.n	800c8de <cos+0x2e>
 800c928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c92c:	ed9d 0b00 	vldr	d0, [sp]
 800c930:	f000 f836 	bl	800c9a0 <__kernel_cos>
 800c934:	e7f1      	b.n	800c91a <cos+0x6a>
 800c936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c93a:	ed9d 0b00 	vldr	d0, [sp]
 800c93e:	2001      	movs	r0, #1
 800c940:	f000 f8f6 	bl	800cb30 <__kernel_sin>
 800c944:	e7e0      	b.n	800c908 <cos+0x58>
 800c946:	bf00      	nop
	...
 800c950:	3fe921fb 	.word	0x3fe921fb
 800c954:	7fefffff 	.word	0x7fefffff

0800c958 <sqrtf>:
 800c958:	b508      	push	{r3, lr}
 800c95a:	ed2d 8b02 	vpush	{d8}
 800c95e:	eeb0 8a40 	vmov.f32	s16, s0
 800c962:	f000 f817 	bl	800c994 <__ieee754_sqrtf>
 800c966:	eeb4 8a48 	vcmp.f32	s16, s16
 800c96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96e:	d60c      	bvs.n	800c98a <sqrtf+0x32>
 800c970:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c990 <sqrtf+0x38>
 800c974:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97c:	d505      	bpl.n	800c98a <sqrtf+0x32>
 800c97e:	f7fd feef 	bl	800a760 <__errno>
 800c982:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c986:	2321      	movs	r3, #33	; 0x21
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	ecbd 8b02 	vpop	{d8}
 800c98e:	bd08      	pop	{r3, pc}
 800c990:	00000000 	.word	0x00000000

0800c994 <__ieee754_sqrtf>:
 800c994:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c998:	4770      	bx	lr
 800c99a:	0000      	movs	r0, r0
 800c99c:	0000      	movs	r0, r0
	...

0800c9a0 <__kernel_cos>:
 800c9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	ec57 6b10 	vmov	r6, r7, d0
 800c9a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c9ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c9b0:	ed8d 1b00 	vstr	d1, [sp]
 800c9b4:	da07      	bge.n	800c9c6 <__kernel_cos+0x26>
 800c9b6:	ee10 0a10 	vmov	r0, s0
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f4 f94c 	bl	8000c58 <__aeabi_d2iz>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f000 8088 	beq.w	800cad6 <__kernel_cos+0x136>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	f7f3 fe93 	bl	80006f8 <__aeabi_dmul>
 800c9d2:	4b51      	ldr	r3, [pc, #324]	; (800cb18 <__kernel_cos+0x178>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	460d      	mov	r5, r1
 800c9da:	f7f3 fe8d 	bl	80006f8 <__aeabi_dmul>
 800c9de:	a340      	add	r3, pc, #256	; (adr r3, 800cae0 <__kernel_cos+0x140>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	4682      	mov	sl, r0
 800c9e6:	468b      	mov	fp, r1
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f3 fe84 	bl	80006f8 <__aeabi_dmul>
 800c9f0:	a33d      	add	r3, pc, #244	; (adr r3, 800cae8 <__kernel_cos+0x148>)
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	f7f3 fcc9 	bl	800038c <__adddf3>
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	f7f3 fe7b 	bl	80006f8 <__aeabi_dmul>
 800ca02:	a33b      	add	r3, pc, #236	; (adr r3, 800caf0 <__kernel_cos+0x150>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f3 fcbe 	bl	8000388 <__aeabi_dsub>
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	462b      	mov	r3, r5
 800ca10:	f7f3 fe72 	bl	80006f8 <__aeabi_dmul>
 800ca14:	a338      	add	r3, pc, #224	; (adr r3, 800caf8 <__kernel_cos+0x158>)
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f7f3 fcb7 	bl	800038c <__adddf3>
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	f7f3 fe69 	bl	80006f8 <__aeabi_dmul>
 800ca26:	a336      	add	r3, pc, #216	; (adr r3, 800cb00 <__kernel_cos+0x160>)
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	f7f3 fcac 	bl	8000388 <__aeabi_dsub>
 800ca30:	4622      	mov	r2, r4
 800ca32:	462b      	mov	r3, r5
 800ca34:	f7f3 fe60 	bl	80006f8 <__aeabi_dmul>
 800ca38:	a333      	add	r3, pc, #204	; (adr r3, 800cb08 <__kernel_cos+0x168>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fca5 	bl	800038c <__adddf3>
 800ca42:	4622      	mov	r2, r4
 800ca44:	462b      	mov	r3, r5
 800ca46:	f7f3 fe57 	bl	80006f8 <__aeabi_dmul>
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	f7f3 fe53 	bl	80006f8 <__aeabi_dmul>
 800ca52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca56:	4604      	mov	r4, r0
 800ca58:	460d      	mov	r5, r1
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	f7f3 fe4b 	bl	80006f8 <__aeabi_dmul>
 800ca62:	460b      	mov	r3, r1
 800ca64:	4602      	mov	r2, r0
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7f3 fc8d 	bl	8000388 <__aeabi_dsub>
 800ca6e:	4b2b      	ldr	r3, [pc, #172]	; (800cb1c <__kernel_cos+0x17c>)
 800ca70:	4598      	cmp	r8, r3
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	dc10      	bgt.n	800ca9a <__kernel_cos+0xfa>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	4659      	mov	r1, fp
 800ca80:	f7f3 fc82 	bl	8000388 <__aeabi_dsub>
 800ca84:	460b      	mov	r3, r1
 800ca86:	4926      	ldr	r1, [pc, #152]	; (800cb20 <__kernel_cos+0x180>)
 800ca88:	4602      	mov	r2, r0
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	f7f3 fc7c 	bl	8000388 <__aeabi_dsub>
 800ca90:	ec41 0b10 	vmov	d0, r0, r1
 800ca94:	b003      	add	sp, #12
 800ca96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9a:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <__kernel_cos+0x184>)
 800ca9c:	4920      	ldr	r1, [pc, #128]	; (800cb20 <__kernel_cos+0x180>)
 800ca9e:	4598      	cmp	r8, r3
 800caa0:	bfcc      	ite	gt
 800caa2:	4d21      	ldrgt	r5, [pc, #132]	; (800cb28 <__kernel_cos+0x188>)
 800caa4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800caa8:	2400      	movs	r4, #0
 800caaa:	4622      	mov	r2, r4
 800caac:	462b      	mov	r3, r5
 800caae:	2000      	movs	r0, #0
 800cab0:	f7f3 fc6a 	bl	8000388 <__aeabi_dsub>
 800cab4:	4622      	mov	r2, r4
 800cab6:	4680      	mov	r8, r0
 800cab8:	4689      	mov	r9, r1
 800caba:	462b      	mov	r3, r5
 800cabc:	4650      	mov	r0, sl
 800cabe:	4659      	mov	r1, fp
 800cac0:	f7f3 fc62 	bl	8000388 <__aeabi_dsub>
 800cac4:	4632      	mov	r2, r6
 800cac6:	463b      	mov	r3, r7
 800cac8:	f7f3 fc5e 	bl	8000388 <__aeabi_dsub>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4640      	mov	r0, r8
 800cad2:	4649      	mov	r1, r9
 800cad4:	e7da      	b.n	800ca8c <__kernel_cos+0xec>
 800cad6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cb10 <__kernel_cos+0x170>
 800cada:	e7db      	b.n	800ca94 <__kernel_cos+0xf4>
 800cadc:	f3af 8000 	nop.w
 800cae0:	be8838d4 	.word	0xbe8838d4
 800cae4:	bda8fae9 	.word	0xbda8fae9
 800cae8:	bdb4b1c4 	.word	0xbdb4b1c4
 800caec:	3e21ee9e 	.word	0x3e21ee9e
 800caf0:	809c52ad 	.word	0x809c52ad
 800caf4:	3e927e4f 	.word	0x3e927e4f
 800caf8:	19cb1590 	.word	0x19cb1590
 800cafc:	3efa01a0 	.word	0x3efa01a0
 800cb00:	16c15177 	.word	0x16c15177
 800cb04:	3f56c16c 	.word	0x3f56c16c
 800cb08:	5555554c 	.word	0x5555554c
 800cb0c:	3fa55555 	.word	0x3fa55555
 800cb10:	00000000 	.word	0x00000000
 800cb14:	3ff00000 	.word	0x3ff00000
 800cb18:	3fe00000 	.word	0x3fe00000
 800cb1c:	3fd33332 	.word	0x3fd33332
 800cb20:	3ff00000 	.word	0x3ff00000
 800cb24:	3fe90000 	.word	0x3fe90000
 800cb28:	3fd20000 	.word	0x3fd20000
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <__kernel_sin>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	ed2d 8b04 	vpush	{d8-d9}
 800cb38:	eeb0 8a41 	vmov.f32	s16, s2
 800cb3c:	eef0 8a61 	vmov.f32	s17, s3
 800cb40:	ec55 4b10 	vmov	r4, r5, d0
 800cb44:	b083      	sub	sp, #12
 800cb46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb4e:	9001      	str	r0, [sp, #4]
 800cb50:	da06      	bge.n	800cb60 <__kernel_sin+0x30>
 800cb52:	ee10 0a10 	vmov	r0, s0
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f4 f87e 	bl	8000c58 <__aeabi_d2iz>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d051      	beq.n	800cc04 <__kernel_sin+0xd4>
 800cb60:	4622      	mov	r2, r4
 800cb62:	462b      	mov	r3, r5
 800cb64:	4620      	mov	r0, r4
 800cb66:	4629      	mov	r1, r5
 800cb68:	f7f3 fdc6 	bl	80006f8 <__aeabi_dmul>
 800cb6c:	4682      	mov	sl, r0
 800cb6e:	468b      	mov	fp, r1
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 fdbe 	bl	80006f8 <__aeabi_dmul>
 800cb7c:	a341      	add	r3, pc, #260	; (adr r3, 800cc84 <__kernel_sin+0x154>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	4680      	mov	r8, r0
 800cb84:	4689      	mov	r9, r1
 800cb86:	4650      	mov	r0, sl
 800cb88:	4659      	mov	r1, fp
 800cb8a:	f7f3 fdb5 	bl	80006f8 <__aeabi_dmul>
 800cb8e:	a33f      	add	r3, pc, #252	; (adr r3, 800cc8c <__kernel_sin+0x15c>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fbf8 	bl	8000388 <__aeabi_dsub>
 800cb98:	4652      	mov	r2, sl
 800cb9a:	465b      	mov	r3, fp
 800cb9c:	f7f3 fdac 	bl	80006f8 <__aeabi_dmul>
 800cba0:	a33c      	add	r3, pc, #240	; (adr r3, 800cc94 <__kernel_sin+0x164>)
 800cba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba6:	f7f3 fbf1 	bl	800038c <__adddf3>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	f7f3 fda3 	bl	80006f8 <__aeabi_dmul>
 800cbb2:	a33a      	add	r3, pc, #232	; (adr r3, 800cc9c <__kernel_sin+0x16c>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f7f3 fbe6 	bl	8000388 <__aeabi_dsub>
 800cbbc:	4652      	mov	r2, sl
 800cbbe:	465b      	mov	r3, fp
 800cbc0:	f7f3 fd9a 	bl	80006f8 <__aeabi_dmul>
 800cbc4:	a337      	add	r3, pc, #220	; (adr r3, 800cca4 <__kernel_sin+0x174>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	f7f3 fbdf 	bl	800038c <__adddf3>
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	460f      	mov	r7, r1
 800cbd4:	b9eb      	cbnz	r3, 800cc12 <__kernel_sin+0xe2>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 fd8b 	bl	80006f8 <__aeabi_dmul>
 800cbe2:	a325      	add	r3, pc, #148	; (adr r3, 800cc78 <__kernel_sin+0x148>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fbce 	bl	8000388 <__aeabi_dsub>
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	f7f3 fd82 	bl	80006f8 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fbc6 	bl	800038c <__adddf3>
 800cc00:	4604      	mov	r4, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	ec45 4b10 	vmov	d0, r4, r5
 800cc08:	b003      	add	sp, #12
 800cc0a:	ecbd 8b04 	vpop	{d8-d9}
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	4b1b      	ldr	r3, [pc, #108]	; (800cc80 <__kernel_sin+0x150>)
 800cc14:	ec51 0b18 	vmov	r0, r1, d8
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f7f3 fd6d 	bl	80006f8 <__aeabi_dmul>
 800cc1e:	4632      	mov	r2, r6
 800cc20:	ec41 0b19 	vmov	d9, r0, r1
 800cc24:	463b      	mov	r3, r7
 800cc26:	4640      	mov	r0, r8
 800cc28:	4649      	mov	r1, r9
 800cc2a:	f7f3 fd65 	bl	80006f8 <__aeabi_dmul>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	ec51 0b19 	vmov	r0, r1, d9
 800cc36:	f7f3 fba7 	bl	8000388 <__aeabi_dsub>
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	f7f3 fd5b 	bl	80006f8 <__aeabi_dmul>
 800cc42:	ec53 2b18 	vmov	r2, r3, d8
 800cc46:	f7f3 fb9f 	bl	8000388 <__aeabi_dsub>
 800cc4a:	a30b      	add	r3, pc, #44	; (adr r3, 800cc78 <__kernel_sin+0x148>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	4606      	mov	r6, r0
 800cc52:	460f      	mov	r7, r1
 800cc54:	4640      	mov	r0, r8
 800cc56:	4649      	mov	r1, r9
 800cc58:	f7f3 fd4e 	bl	80006f8 <__aeabi_dmul>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4630      	mov	r0, r6
 800cc62:	4639      	mov	r1, r7
 800cc64:	f7f3 fb92 	bl	800038c <__adddf3>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	f7f3 fb8a 	bl	8000388 <__aeabi_dsub>
 800cc74:	e7c4      	b.n	800cc00 <__kernel_sin+0xd0>
 800cc76:	bf00      	nop
 800cc78:	55555549 	.word	0x55555549
 800cc7c:	3fc55555 	.word	0x3fc55555
 800cc80:	3fe00000 	.word	0x3fe00000
 800cc84:	5acfd57c 	.word	0x5acfd57c
 800cc88:	3de5d93a 	.word	0x3de5d93a
 800cc8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc90:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc94:	57b1fe7d 	.word	0x57b1fe7d
 800cc98:	3ec71de3 	.word	0x3ec71de3
 800cc9c:	19c161d5 	.word	0x19c161d5
 800cca0:	3f2a01a0 	.word	0x3f2a01a0
 800cca4:	1110f8a6 	.word	0x1110f8a6
 800cca8:	3f811111 	.word	0x3f811111
 800ccac:	00000000 	.word	0x00000000

0800ccb0 <__ieee754_atan2>:
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb4:	ec57 6b11 	vmov	r6, r7, d1
 800ccb8:	4273      	negs	r3, r6
 800ccba:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ce38 <__ieee754_atan2+0x188>
 800ccbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ccc2:	4333      	orrs	r3, r6
 800ccc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ccc8:	4543      	cmp	r3, r8
 800ccca:	ec51 0b10 	vmov	r0, r1, d0
 800ccce:	ee11 5a10 	vmov	r5, s2
 800ccd2:	d80a      	bhi.n	800ccea <__ieee754_atan2+0x3a>
 800ccd4:	4244      	negs	r4, r0
 800ccd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccda:	4304      	orrs	r4, r0
 800ccdc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cce0:	4544      	cmp	r4, r8
 800cce2:	ee10 9a10 	vmov	r9, s0
 800cce6:	468e      	mov	lr, r1
 800cce8:	d907      	bls.n	800ccfa <__ieee754_atan2+0x4a>
 800ccea:	4632      	mov	r2, r6
 800ccec:	463b      	mov	r3, r7
 800ccee:	f7f3 fb4d 	bl	800038c <__adddf3>
 800ccf2:	ec41 0b10 	vmov	d0, r0, r1
 800ccf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ccfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd02:	4334      	orrs	r4, r6
 800cd04:	d103      	bne.n	800cd0e <__ieee754_atan2+0x5e>
 800cd06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd0a:	f000 baa1 	b.w	800d250 <atan>
 800cd0e:	17bc      	asrs	r4, r7, #30
 800cd10:	f004 0402 	and.w	r4, r4, #2
 800cd14:	ea53 0909 	orrs.w	r9, r3, r9
 800cd18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cd1c:	d107      	bne.n	800cd2e <__ieee754_atan2+0x7e>
 800cd1e:	2c02      	cmp	r4, #2
 800cd20:	d05f      	beq.n	800cde2 <__ieee754_atan2+0x132>
 800cd22:	2c03      	cmp	r4, #3
 800cd24:	d1e5      	bne.n	800ccf2 <__ieee754_atan2+0x42>
 800cd26:	a140      	add	r1, pc, #256	; (adr r1, 800ce28 <__ieee754_atan2+0x178>)
 800cd28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd2c:	e7e1      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cd2e:	4315      	orrs	r5, r2
 800cd30:	d106      	bne.n	800cd40 <__ieee754_atan2+0x90>
 800cd32:	f1be 0f00 	cmp.w	lr, #0
 800cd36:	da5f      	bge.n	800cdf8 <__ieee754_atan2+0x148>
 800cd38:	a13d      	add	r1, pc, #244	; (adr r1, 800ce30 <__ieee754_atan2+0x180>)
 800cd3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd3e:	e7d8      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cd40:	4542      	cmp	r2, r8
 800cd42:	d10f      	bne.n	800cd64 <__ieee754_atan2+0xb4>
 800cd44:	4293      	cmp	r3, r2
 800cd46:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd4a:	d107      	bne.n	800cd5c <__ieee754_atan2+0xac>
 800cd4c:	2c02      	cmp	r4, #2
 800cd4e:	d84c      	bhi.n	800cdea <__ieee754_atan2+0x13a>
 800cd50:	4b33      	ldr	r3, [pc, #204]	; (800ce20 <__ieee754_atan2+0x170>)
 800cd52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd5a:	e7ca      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cd5c:	2c02      	cmp	r4, #2
 800cd5e:	d848      	bhi.n	800cdf2 <__ieee754_atan2+0x142>
 800cd60:	4b30      	ldr	r3, [pc, #192]	; (800ce24 <__ieee754_atan2+0x174>)
 800cd62:	e7f6      	b.n	800cd52 <__ieee754_atan2+0xa2>
 800cd64:	4543      	cmp	r3, r8
 800cd66:	d0e4      	beq.n	800cd32 <__ieee754_atan2+0x82>
 800cd68:	1a9b      	subs	r3, r3, r2
 800cd6a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cd6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd72:	da1e      	bge.n	800cdb2 <__ieee754_atan2+0x102>
 800cd74:	2f00      	cmp	r7, #0
 800cd76:	da01      	bge.n	800cd7c <__ieee754_atan2+0xcc>
 800cd78:	323c      	adds	r2, #60	; 0x3c
 800cd7a:	db1e      	blt.n	800cdba <__ieee754_atan2+0x10a>
 800cd7c:	4632      	mov	r2, r6
 800cd7e:	463b      	mov	r3, r7
 800cd80:	f7f3 fde4 	bl	800094c <__aeabi_ddiv>
 800cd84:	ec41 0b10 	vmov	d0, r0, r1
 800cd88:	f000 fc02 	bl	800d590 <fabs>
 800cd8c:	f000 fa60 	bl	800d250 <atan>
 800cd90:	ec51 0b10 	vmov	r0, r1, d0
 800cd94:	2c01      	cmp	r4, #1
 800cd96:	d013      	beq.n	800cdc0 <__ieee754_atan2+0x110>
 800cd98:	2c02      	cmp	r4, #2
 800cd9a:	d015      	beq.n	800cdc8 <__ieee754_atan2+0x118>
 800cd9c:	2c00      	cmp	r4, #0
 800cd9e:	d0a8      	beq.n	800ccf2 <__ieee754_atan2+0x42>
 800cda0:	a317      	add	r3, pc, #92	; (adr r3, 800ce00 <__ieee754_atan2+0x150>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	f7f3 faef 	bl	8000388 <__aeabi_dsub>
 800cdaa:	a317      	add	r3, pc, #92	; (adr r3, 800ce08 <__ieee754_atan2+0x158>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	e014      	b.n	800cddc <__ieee754_atan2+0x12c>
 800cdb2:	a117      	add	r1, pc, #92	; (adr r1, 800ce10 <__ieee754_atan2+0x160>)
 800cdb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdb8:	e7ec      	b.n	800cd94 <__ieee754_atan2+0xe4>
 800cdba:	2000      	movs	r0, #0
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	e7e9      	b.n	800cd94 <__ieee754_atan2+0xe4>
 800cdc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	e794      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cdc8:	a30d      	add	r3, pc, #52	; (adr r3, 800ce00 <__ieee754_atan2+0x150>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	f7f3 fadb 	bl	8000388 <__aeabi_dsub>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	a10c      	add	r1, pc, #48	; (adr r1, 800ce08 <__ieee754_atan2+0x158>)
 800cdd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cddc:	f7f3 fad4 	bl	8000388 <__aeabi_dsub>
 800cde0:	e787      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cde2:	a109      	add	r1, pc, #36	; (adr r1, 800ce08 <__ieee754_atan2+0x158>)
 800cde4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde8:	e783      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cdea:	a10b      	add	r1, pc, #44	; (adr r1, 800ce18 <__ieee754_atan2+0x168>)
 800cdec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf0:	e77f      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	e77c      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800cdf8:	a105      	add	r1, pc, #20	; (adr r1, 800ce10 <__ieee754_atan2+0x160>)
 800cdfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdfe:	e778      	b.n	800ccf2 <__ieee754_atan2+0x42>
 800ce00:	33145c07 	.word	0x33145c07
 800ce04:	3ca1a626 	.word	0x3ca1a626
 800ce08:	54442d18 	.word	0x54442d18
 800ce0c:	400921fb 	.word	0x400921fb
 800ce10:	54442d18 	.word	0x54442d18
 800ce14:	3ff921fb 	.word	0x3ff921fb
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	3fe921fb 	.word	0x3fe921fb
 800ce20:	080216b0 	.word	0x080216b0
 800ce24:	080216c8 	.word	0x080216c8
 800ce28:	54442d18 	.word	0x54442d18
 800ce2c:	c00921fb 	.word	0xc00921fb
 800ce30:	54442d18 	.word	0x54442d18
 800ce34:	bff921fb 	.word	0xbff921fb
 800ce38:	7ff00000 	.word	0x7ff00000
 800ce3c:	00000000 	.word	0x00000000

0800ce40 <__ieee754_rem_pio2>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	ed2d 8b02 	vpush	{d8}
 800ce48:	ec55 4b10 	vmov	r4, r5, d0
 800ce4c:	4bca      	ldr	r3, [pc, #808]	; (800d178 <__ieee754_rem_pio2+0x338>)
 800ce4e:	b08b      	sub	sp, #44	; 0x2c
 800ce50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ce54:	4598      	cmp	r8, r3
 800ce56:	4682      	mov	sl, r0
 800ce58:	9502      	str	r5, [sp, #8]
 800ce5a:	dc08      	bgt.n	800ce6e <__ieee754_rem_pio2+0x2e>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2300      	movs	r3, #0
 800ce60:	ed80 0b00 	vstr	d0, [r0]
 800ce64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ce68:	f04f 0b00 	mov.w	fp, #0
 800ce6c:	e028      	b.n	800cec0 <__ieee754_rem_pio2+0x80>
 800ce6e:	4bc3      	ldr	r3, [pc, #780]	; (800d17c <__ieee754_rem_pio2+0x33c>)
 800ce70:	4598      	cmp	r8, r3
 800ce72:	dc78      	bgt.n	800cf66 <__ieee754_rem_pio2+0x126>
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	4ec2      	ldr	r6, [pc, #776]	; (800d180 <__ieee754_rem_pio2+0x340>)
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	ee10 0a10 	vmov	r0, s0
 800ce7e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d140 <__ieee754_rem_pio2+0x300>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	4629      	mov	r1, r5
 800ce86:	dd39      	ble.n	800cefc <__ieee754_rem_pio2+0xbc>
 800ce88:	f7f3 fa7e 	bl	8000388 <__aeabi_dsub>
 800ce8c:	45b0      	cmp	r8, r6
 800ce8e:	4604      	mov	r4, r0
 800ce90:	460d      	mov	r5, r1
 800ce92:	d01b      	beq.n	800cecc <__ieee754_rem_pio2+0x8c>
 800ce94:	a3ac      	add	r3, pc, #688	; (adr r3, 800d148 <__ieee754_rem_pio2+0x308>)
 800ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9a:	f7f3 fa75 	bl	8000388 <__aeabi_dsub>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	e9ca 2300 	strd	r2, r3, [sl]
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fa6d 	bl	8000388 <__aeabi_dsub>
 800ceae:	a3a6      	add	r3, pc, #664	; (adr r3, 800d148 <__ieee754_rem_pio2+0x308>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	f7f3 fa68 	bl	8000388 <__aeabi_dsub>
 800ceb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cebc:	f04f 0b01 	mov.w	fp, #1
 800cec0:	4658      	mov	r0, fp
 800cec2:	b00b      	add	sp, #44	; 0x2c
 800cec4:	ecbd 8b02 	vpop	{d8}
 800cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cecc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d150 <__ieee754_rem_pio2+0x310>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 fa59 	bl	8000388 <__aeabi_dsub>
 800ced6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d158 <__ieee754_rem_pio2+0x318>)
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	4604      	mov	r4, r0
 800cede:	460d      	mov	r5, r1
 800cee0:	f7f3 fa52 	bl	8000388 <__aeabi_dsub>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	e9ca 2300 	strd	r2, r3, [sl]
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fa4a 	bl	8000388 <__aeabi_dsub>
 800cef4:	a398      	add	r3, pc, #608	; (adr r3, 800d158 <__ieee754_rem_pio2+0x318>)
 800cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefa:	e7db      	b.n	800ceb4 <__ieee754_rem_pio2+0x74>
 800cefc:	f7f3 fa46 	bl	800038c <__adddf3>
 800cf00:	45b0      	cmp	r8, r6
 800cf02:	4604      	mov	r4, r0
 800cf04:	460d      	mov	r5, r1
 800cf06:	d016      	beq.n	800cf36 <__ieee754_rem_pio2+0xf6>
 800cf08:	a38f      	add	r3, pc, #572	; (adr r3, 800d148 <__ieee754_rem_pio2+0x308>)
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	f7f3 fa3d 	bl	800038c <__adddf3>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	e9ca 2300 	strd	r2, r3, [sl]
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	f7f3 fa33 	bl	8000388 <__aeabi_dsub>
 800cf22:	a389      	add	r3, pc, #548	; (adr r3, 800d148 <__ieee754_rem_pio2+0x308>)
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	f7f3 fa30 	bl	800038c <__adddf3>
 800cf2c:	f04f 3bff 	mov.w	fp, #4294967295
 800cf30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf34:	e7c4      	b.n	800cec0 <__ieee754_rem_pio2+0x80>
 800cf36:	a386      	add	r3, pc, #536	; (adr r3, 800d150 <__ieee754_rem_pio2+0x310>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	f7f3 fa26 	bl	800038c <__adddf3>
 800cf40:	a385      	add	r3, pc, #532	; (adr r3, 800d158 <__ieee754_rem_pio2+0x318>)
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	f7f3 fa1f 	bl	800038c <__adddf3>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	e9ca 2300 	strd	r2, r3, [sl]
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	f7f3 fa15 	bl	8000388 <__aeabi_dsub>
 800cf5e:	a37e      	add	r3, pc, #504	; (adr r3, 800d158 <__ieee754_rem_pio2+0x318>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	e7e0      	b.n	800cf28 <__ieee754_rem_pio2+0xe8>
 800cf66:	4b87      	ldr	r3, [pc, #540]	; (800d184 <__ieee754_rem_pio2+0x344>)
 800cf68:	4598      	cmp	r8, r3
 800cf6a:	f300 80d8 	bgt.w	800d11e <__ieee754_rem_pio2+0x2de>
 800cf6e:	f000 fb0f 	bl	800d590 <fabs>
 800cf72:	ec55 4b10 	vmov	r4, r5, d0
 800cf76:	ee10 0a10 	vmov	r0, s0
 800cf7a:	a379      	add	r3, pc, #484	; (adr r3, 800d160 <__ieee754_rem_pio2+0x320>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	4629      	mov	r1, r5
 800cf82:	f7f3 fbb9 	bl	80006f8 <__aeabi_dmul>
 800cf86:	4b80      	ldr	r3, [pc, #512]	; (800d188 <__ieee754_rem_pio2+0x348>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f7f3 f9ff 	bl	800038c <__adddf3>
 800cf8e:	f7f3 fe63 	bl	8000c58 <__aeabi_d2iz>
 800cf92:	4683      	mov	fp, r0
 800cf94:	f7f3 fb46 	bl	8000624 <__aeabi_i2d>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	ec43 2b18 	vmov	d8, r2, r3
 800cfa0:	a367      	add	r3, pc, #412	; (adr r3, 800d140 <__ieee754_rem_pio2+0x300>)
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f7f3 fba7 	bl	80006f8 <__aeabi_dmul>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 f9e9 	bl	8000388 <__aeabi_dsub>
 800cfb6:	a364      	add	r3, pc, #400	; (adr r3, 800d148 <__ieee754_rem_pio2+0x308>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	ec51 0b18 	vmov	r0, r1, d8
 800cfc4:	f7f3 fb98 	bl	80006f8 <__aeabi_dmul>
 800cfc8:	f1bb 0f1f 	cmp.w	fp, #31
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	dc0d      	bgt.n	800cfee <__ieee754_rem_pio2+0x1ae>
 800cfd2:	4b6e      	ldr	r3, [pc, #440]	; (800d18c <__ieee754_rem_pio2+0x34c>)
 800cfd4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfdc:	4543      	cmp	r3, r8
 800cfde:	d006      	beq.n	800cfee <__ieee754_rem_pio2+0x1ae>
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	462b      	mov	r3, r5
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f7f3 f9ce 	bl	8000388 <__aeabi_dsub>
 800cfec:	e00e      	b.n	800d00c <__ieee754_rem_pio2+0x1cc>
 800cfee:	462b      	mov	r3, r5
 800cff0:	4622      	mov	r2, r4
 800cff2:	4630      	mov	r0, r6
 800cff4:	4639      	mov	r1, r7
 800cff6:	f7f3 f9c7 	bl	8000388 <__aeabi_dsub>
 800cffa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cffe:	9303      	str	r3, [sp, #12]
 800d000:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d004:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d008:	2b10      	cmp	r3, #16
 800d00a:	dc02      	bgt.n	800d012 <__ieee754_rem_pio2+0x1d2>
 800d00c:	e9ca 0100 	strd	r0, r1, [sl]
 800d010:	e039      	b.n	800d086 <__ieee754_rem_pio2+0x246>
 800d012:	a34f      	add	r3, pc, #316	; (adr r3, 800d150 <__ieee754_rem_pio2+0x310>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	ec51 0b18 	vmov	r0, r1, d8
 800d01c:	f7f3 fb6c 	bl	80006f8 <__aeabi_dmul>
 800d020:	4604      	mov	r4, r0
 800d022:	460d      	mov	r5, r1
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4630      	mov	r0, r6
 800d02a:	4639      	mov	r1, r7
 800d02c:	f7f3 f9ac 	bl	8000388 <__aeabi_dsub>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	4680      	mov	r8, r0
 800d036:	4689      	mov	r9, r1
 800d038:	4630      	mov	r0, r6
 800d03a:	4639      	mov	r1, r7
 800d03c:	f7f3 f9a4 	bl	8000388 <__aeabi_dsub>
 800d040:	4622      	mov	r2, r4
 800d042:	462b      	mov	r3, r5
 800d044:	f7f3 f9a0 	bl	8000388 <__aeabi_dsub>
 800d048:	a343      	add	r3, pc, #268	; (adr r3, 800d158 <__ieee754_rem_pio2+0x318>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	4604      	mov	r4, r0
 800d050:	460d      	mov	r5, r1
 800d052:	ec51 0b18 	vmov	r0, r1, d8
 800d056:	f7f3 fb4f 	bl	80006f8 <__aeabi_dmul>
 800d05a:	4622      	mov	r2, r4
 800d05c:	462b      	mov	r3, r5
 800d05e:	f7f3 f993 	bl	8000388 <__aeabi_dsub>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4604      	mov	r4, r0
 800d068:	460d      	mov	r5, r1
 800d06a:	4640      	mov	r0, r8
 800d06c:	4649      	mov	r1, r9
 800d06e:	f7f3 f98b 	bl	8000388 <__aeabi_dsub>
 800d072:	9a03      	ldr	r2, [sp, #12]
 800d074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	2b31      	cmp	r3, #49	; 0x31
 800d07c:	dc24      	bgt.n	800d0c8 <__ieee754_rem_pio2+0x288>
 800d07e:	e9ca 0100 	strd	r0, r1, [sl]
 800d082:	4646      	mov	r6, r8
 800d084:	464f      	mov	r7, r9
 800d086:	e9da 8900 	ldrd	r8, r9, [sl]
 800d08a:	4630      	mov	r0, r6
 800d08c:	4642      	mov	r2, r8
 800d08e:	464b      	mov	r3, r9
 800d090:	4639      	mov	r1, r7
 800d092:	f7f3 f979 	bl	8000388 <__aeabi_dsub>
 800d096:	462b      	mov	r3, r5
 800d098:	4622      	mov	r2, r4
 800d09a:	f7f3 f975 	bl	8000388 <__aeabi_dsub>
 800d09e:	9b02      	ldr	r3, [sp, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0a6:	f6bf af0b 	bge.w	800cec0 <__ieee754_rem_pio2+0x80>
 800d0aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0ae:	f8ca 3004 	str.w	r3, [sl, #4]
 800d0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0b6:	f8ca 8000 	str.w	r8, [sl]
 800d0ba:	f8ca 0008 	str.w	r0, [sl, #8]
 800d0be:	f8ca 300c 	str.w	r3, [sl, #12]
 800d0c2:	f1cb 0b00 	rsb	fp, fp, #0
 800d0c6:	e6fb      	b.n	800cec0 <__ieee754_rem_pio2+0x80>
 800d0c8:	a327      	add	r3, pc, #156	; (adr r3, 800d168 <__ieee754_rem_pio2+0x328>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	ec51 0b18 	vmov	r0, r1, d8
 800d0d2:	f7f3 fb11 	bl	80006f8 <__aeabi_dmul>
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	460d      	mov	r5, r1
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4640      	mov	r0, r8
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	f7f3 f951 	bl	8000388 <__aeabi_dsub>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	460f      	mov	r7, r1
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	4649      	mov	r1, r9
 800d0f2:	f7f3 f949 	bl	8000388 <__aeabi_dsub>
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	462b      	mov	r3, r5
 800d0fa:	f7f3 f945 	bl	8000388 <__aeabi_dsub>
 800d0fe:	a31c      	add	r3, pc, #112	; (adr r3, 800d170 <__ieee754_rem_pio2+0x330>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	4604      	mov	r4, r0
 800d106:	460d      	mov	r5, r1
 800d108:	ec51 0b18 	vmov	r0, r1, d8
 800d10c:	f7f3 faf4 	bl	80006f8 <__aeabi_dmul>
 800d110:	4622      	mov	r2, r4
 800d112:	462b      	mov	r3, r5
 800d114:	f7f3 f938 	bl	8000388 <__aeabi_dsub>
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	e760      	b.n	800cfe0 <__ieee754_rem_pio2+0x1a0>
 800d11e:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <__ieee754_rem_pio2+0x350>)
 800d120:	4598      	cmp	r8, r3
 800d122:	dd37      	ble.n	800d194 <__ieee754_rem_pio2+0x354>
 800d124:	ee10 2a10 	vmov	r2, s0
 800d128:	462b      	mov	r3, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 f92b 	bl	8000388 <__aeabi_dsub>
 800d132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d136:	e9ca 0100 	strd	r0, r1, [sl]
 800d13a:	e695      	b.n	800ce68 <__ieee754_rem_pio2+0x28>
 800d13c:	f3af 8000 	nop.w
 800d140:	54400000 	.word	0x54400000
 800d144:	3ff921fb 	.word	0x3ff921fb
 800d148:	1a626331 	.word	0x1a626331
 800d14c:	3dd0b461 	.word	0x3dd0b461
 800d150:	1a600000 	.word	0x1a600000
 800d154:	3dd0b461 	.word	0x3dd0b461
 800d158:	2e037073 	.word	0x2e037073
 800d15c:	3ba3198a 	.word	0x3ba3198a
 800d160:	6dc9c883 	.word	0x6dc9c883
 800d164:	3fe45f30 	.word	0x3fe45f30
 800d168:	2e000000 	.word	0x2e000000
 800d16c:	3ba3198a 	.word	0x3ba3198a
 800d170:	252049c1 	.word	0x252049c1
 800d174:	397b839a 	.word	0x397b839a
 800d178:	3fe921fb 	.word	0x3fe921fb
 800d17c:	4002d97b 	.word	0x4002d97b
 800d180:	3ff921fb 	.word	0x3ff921fb
 800d184:	413921fb 	.word	0x413921fb
 800d188:	3fe00000 	.word	0x3fe00000
 800d18c:	080216e0 	.word	0x080216e0
 800d190:	7fefffff 	.word	0x7fefffff
 800d194:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d198:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d19c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	f7f3 fd58 	bl	8000c58 <__aeabi_d2iz>
 800d1a8:	f7f3 fa3c 	bl	8000624 <__aeabi_i2d>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1b8:	f7f3 f8e6 	bl	8000388 <__aeabi_dsub>
 800d1bc:	4b21      	ldr	r3, [pc, #132]	; (800d244 <__ieee754_rem_pio2+0x404>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f7f3 fa9a 	bl	80006f8 <__aeabi_dmul>
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	f7f3 fd46 	bl	8000c58 <__aeabi_d2iz>
 800d1cc:	f7f3 fa2a 	bl	8000624 <__aeabi_i2d>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d1dc:	f7f3 f8d4 	bl	8000388 <__aeabi_dsub>
 800d1e0:	4b18      	ldr	r3, [pc, #96]	; (800d244 <__ieee754_rem_pio2+0x404>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f7f3 fa88 	bl	80006f8 <__aeabi_dmul>
 800d1e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d1f0:	2703      	movs	r7, #3
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	2500      	movs	r5, #0
 800d1f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	46b9      	mov	r9, r7
 800d200:	3f01      	subs	r7, #1
 800d202:	f7f3 fce1 	bl	8000bc8 <__aeabi_dcmpeq>
 800d206:	2800      	cmp	r0, #0
 800d208:	d1f5      	bne.n	800d1f6 <__ieee754_rem_pio2+0x3b6>
 800d20a:	4b0f      	ldr	r3, [pc, #60]	; (800d248 <__ieee754_rem_pio2+0x408>)
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	2302      	movs	r3, #2
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	4632      	mov	r2, r6
 800d214:	464b      	mov	r3, r9
 800d216:	4651      	mov	r1, sl
 800d218:	a804      	add	r0, sp, #16
 800d21a:	f000 f9c5 	bl	800d5a8 <__kernel_rem_pio2>
 800d21e:	9b02      	ldr	r3, [sp, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	4683      	mov	fp, r0
 800d224:	f6bf ae4c 	bge.w	800cec0 <__ieee754_rem_pio2+0x80>
 800d228:	e9da 2100 	ldrd	r2, r1, [sl]
 800d22c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d230:	e9ca 2300 	strd	r2, r3, [sl]
 800d234:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d23c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d240:	e73f      	b.n	800d0c2 <__ieee754_rem_pio2+0x282>
 800d242:	bf00      	nop
 800d244:	41700000 	.word	0x41700000
 800d248:	08021760 	.word	0x08021760
 800d24c:	00000000 	.word	0x00000000

0800d250 <atan>:
 800d250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ec55 4b10 	vmov	r4, r5, d0
 800d258:	4bc3      	ldr	r3, [pc, #780]	; (800d568 <atan+0x318>)
 800d25a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d25e:	429e      	cmp	r6, r3
 800d260:	46ab      	mov	fp, r5
 800d262:	dd18      	ble.n	800d296 <atan+0x46>
 800d264:	4bc1      	ldr	r3, [pc, #772]	; (800d56c <atan+0x31c>)
 800d266:	429e      	cmp	r6, r3
 800d268:	dc01      	bgt.n	800d26e <atan+0x1e>
 800d26a:	d109      	bne.n	800d280 <atan+0x30>
 800d26c:	b144      	cbz	r4, 800d280 <atan+0x30>
 800d26e:	4622      	mov	r2, r4
 800d270:	462b      	mov	r3, r5
 800d272:	4620      	mov	r0, r4
 800d274:	4629      	mov	r1, r5
 800d276:	f7f3 f889 	bl	800038c <__adddf3>
 800d27a:	4604      	mov	r4, r0
 800d27c:	460d      	mov	r5, r1
 800d27e:	e006      	b.n	800d28e <atan+0x3e>
 800d280:	f1bb 0f00 	cmp.w	fp, #0
 800d284:	f300 8131 	bgt.w	800d4ea <atan+0x29a>
 800d288:	a59b      	add	r5, pc, #620	; (adr r5, 800d4f8 <atan+0x2a8>)
 800d28a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d28e:	ec45 4b10 	vmov	d0, r4, r5
 800d292:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d296:	4bb6      	ldr	r3, [pc, #728]	; (800d570 <atan+0x320>)
 800d298:	429e      	cmp	r6, r3
 800d29a:	dc14      	bgt.n	800d2c6 <atan+0x76>
 800d29c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d2a0:	429e      	cmp	r6, r3
 800d2a2:	dc0d      	bgt.n	800d2c0 <atan+0x70>
 800d2a4:	a396      	add	r3, pc, #600	; (adr r3, 800d500 <atan+0x2b0>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	ee10 0a10 	vmov	r0, s0
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f7f3 f86c 	bl	800038c <__adddf3>
 800d2b4:	4baf      	ldr	r3, [pc, #700]	; (800d574 <atan+0x324>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f7f3 fcae 	bl	8000c18 <__aeabi_dcmpgt>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d1e6      	bne.n	800d28e <atan+0x3e>
 800d2c0:	f04f 3aff 	mov.w	sl, #4294967295
 800d2c4:	e02b      	b.n	800d31e <atan+0xce>
 800d2c6:	f000 f963 	bl	800d590 <fabs>
 800d2ca:	4bab      	ldr	r3, [pc, #684]	; (800d578 <atan+0x328>)
 800d2cc:	429e      	cmp	r6, r3
 800d2ce:	ec55 4b10 	vmov	r4, r5, d0
 800d2d2:	f300 80bf 	bgt.w	800d454 <atan+0x204>
 800d2d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d2da:	429e      	cmp	r6, r3
 800d2dc:	f300 80a0 	bgt.w	800d420 <atan+0x1d0>
 800d2e0:	ee10 2a10 	vmov	r2, s0
 800d2e4:	ee10 0a10 	vmov	r0, s0
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	f7f3 f84e 	bl	800038c <__adddf3>
 800d2f0:	4ba0      	ldr	r3, [pc, #640]	; (800d574 <atan+0x324>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f7f3 f848 	bl	8000388 <__aeabi_dsub>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f3 f841 	bl	800038c <__adddf3>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4630      	mov	r0, r6
 800d310:	4639      	mov	r1, r7
 800d312:	f7f3 fb1b 	bl	800094c <__aeabi_ddiv>
 800d316:	f04f 0a00 	mov.w	sl, #0
 800d31a:	4604      	mov	r4, r0
 800d31c:	460d      	mov	r5, r1
 800d31e:	4622      	mov	r2, r4
 800d320:	462b      	mov	r3, r5
 800d322:	4620      	mov	r0, r4
 800d324:	4629      	mov	r1, r5
 800d326:	f7f3 f9e7 	bl	80006f8 <__aeabi_dmul>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4680      	mov	r8, r0
 800d330:	4689      	mov	r9, r1
 800d332:	f7f3 f9e1 	bl	80006f8 <__aeabi_dmul>
 800d336:	a374      	add	r3, pc, #464	; (adr r3, 800d508 <atan+0x2b8>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	f7f3 f9da 	bl	80006f8 <__aeabi_dmul>
 800d344:	a372      	add	r3, pc, #456	; (adr r3, 800d510 <atan+0x2c0>)
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	f7f3 f81f 	bl	800038c <__adddf3>
 800d34e:	4632      	mov	r2, r6
 800d350:	463b      	mov	r3, r7
 800d352:	f7f3 f9d1 	bl	80006f8 <__aeabi_dmul>
 800d356:	a370      	add	r3, pc, #448	; (adr r3, 800d518 <atan+0x2c8>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f7f3 f816 	bl	800038c <__adddf3>
 800d360:	4632      	mov	r2, r6
 800d362:	463b      	mov	r3, r7
 800d364:	f7f3 f9c8 	bl	80006f8 <__aeabi_dmul>
 800d368:	a36d      	add	r3, pc, #436	; (adr r3, 800d520 <atan+0x2d0>)
 800d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36e:	f7f3 f80d 	bl	800038c <__adddf3>
 800d372:	4632      	mov	r2, r6
 800d374:	463b      	mov	r3, r7
 800d376:	f7f3 f9bf 	bl	80006f8 <__aeabi_dmul>
 800d37a:	a36b      	add	r3, pc, #428	; (adr r3, 800d528 <atan+0x2d8>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f3 f804 	bl	800038c <__adddf3>
 800d384:	4632      	mov	r2, r6
 800d386:	463b      	mov	r3, r7
 800d388:	f7f3 f9b6 	bl	80006f8 <__aeabi_dmul>
 800d38c:	a368      	add	r3, pc, #416	; (adr r3, 800d530 <atan+0x2e0>)
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	f7f2 fffb 	bl	800038c <__adddf3>
 800d396:	4642      	mov	r2, r8
 800d398:	464b      	mov	r3, r9
 800d39a:	f7f3 f9ad 	bl	80006f8 <__aeabi_dmul>
 800d39e:	a366      	add	r3, pc, #408	; (adr r3, 800d538 <atan+0x2e8>)
 800d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 f9a4 	bl	80006f8 <__aeabi_dmul>
 800d3b0:	a363      	add	r3, pc, #396	; (adr r3, 800d540 <atan+0x2f0>)
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	f7f2 ffe7 	bl	8000388 <__aeabi_dsub>
 800d3ba:	4632      	mov	r2, r6
 800d3bc:	463b      	mov	r3, r7
 800d3be:	f7f3 f99b 	bl	80006f8 <__aeabi_dmul>
 800d3c2:	a361      	add	r3, pc, #388	; (adr r3, 800d548 <atan+0x2f8>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f2 ffde 	bl	8000388 <__aeabi_dsub>
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	463b      	mov	r3, r7
 800d3d0:	f7f3 f992 	bl	80006f8 <__aeabi_dmul>
 800d3d4:	a35e      	add	r3, pc, #376	; (adr r3, 800d550 <atan+0x300>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	f7f2 ffd5 	bl	8000388 <__aeabi_dsub>
 800d3de:	4632      	mov	r2, r6
 800d3e0:	463b      	mov	r3, r7
 800d3e2:	f7f3 f989 	bl	80006f8 <__aeabi_dmul>
 800d3e6:	a35c      	add	r3, pc, #368	; (adr r3, 800d558 <atan+0x308>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f2 ffcc 	bl	8000388 <__aeabi_dsub>
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	f7f3 f980 	bl	80006f8 <__aeabi_dmul>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	4649      	mov	r1, r9
 800d400:	f7f2 ffc4 	bl	800038c <__adddf3>
 800d404:	4622      	mov	r2, r4
 800d406:	462b      	mov	r3, r5
 800d408:	f7f3 f976 	bl	80006f8 <__aeabi_dmul>
 800d40c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	d14b      	bne.n	800d4ae <atan+0x25e>
 800d416:	4620      	mov	r0, r4
 800d418:	4629      	mov	r1, r5
 800d41a:	f7f2 ffb5 	bl	8000388 <__aeabi_dsub>
 800d41e:	e72c      	b.n	800d27a <atan+0x2a>
 800d420:	ee10 0a10 	vmov	r0, s0
 800d424:	4b53      	ldr	r3, [pc, #332]	; (800d574 <atan+0x324>)
 800d426:	2200      	movs	r2, #0
 800d428:	4629      	mov	r1, r5
 800d42a:	f7f2 ffad 	bl	8000388 <__aeabi_dsub>
 800d42e:	4b51      	ldr	r3, [pc, #324]	; (800d574 <atan+0x324>)
 800d430:	4606      	mov	r6, r0
 800d432:	460f      	mov	r7, r1
 800d434:	2200      	movs	r2, #0
 800d436:	4620      	mov	r0, r4
 800d438:	4629      	mov	r1, r5
 800d43a:	f7f2 ffa7 	bl	800038c <__adddf3>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	f7f3 fa81 	bl	800094c <__aeabi_ddiv>
 800d44a:	f04f 0a01 	mov.w	sl, #1
 800d44e:	4604      	mov	r4, r0
 800d450:	460d      	mov	r5, r1
 800d452:	e764      	b.n	800d31e <atan+0xce>
 800d454:	4b49      	ldr	r3, [pc, #292]	; (800d57c <atan+0x32c>)
 800d456:	429e      	cmp	r6, r3
 800d458:	da1d      	bge.n	800d496 <atan+0x246>
 800d45a:	ee10 0a10 	vmov	r0, s0
 800d45e:	4b48      	ldr	r3, [pc, #288]	; (800d580 <atan+0x330>)
 800d460:	2200      	movs	r2, #0
 800d462:	4629      	mov	r1, r5
 800d464:	f7f2 ff90 	bl	8000388 <__aeabi_dsub>
 800d468:	4b45      	ldr	r3, [pc, #276]	; (800d580 <atan+0x330>)
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	2200      	movs	r2, #0
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f3 f940 	bl	80006f8 <__aeabi_dmul>
 800d478:	4b3e      	ldr	r3, [pc, #248]	; (800d574 <atan+0x324>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	f7f2 ff86 	bl	800038c <__adddf3>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4630      	mov	r0, r6
 800d486:	4639      	mov	r1, r7
 800d488:	f7f3 fa60 	bl	800094c <__aeabi_ddiv>
 800d48c:	f04f 0a02 	mov.w	sl, #2
 800d490:	4604      	mov	r4, r0
 800d492:	460d      	mov	r5, r1
 800d494:	e743      	b.n	800d31e <atan+0xce>
 800d496:	462b      	mov	r3, r5
 800d498:	ee10 2a10 	vmov	r2, s0
 800d49c:	4939      	ldr	r1, [pc, #228]	; (800d584 <atan+0x334>)
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f7f3 fa54 	bl	800094c <__aeabi_ddiv>
 800d4a4:	f04f 0a03 	mov.w	sl, #3
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	e737      	b.n	800d31e <atan+0xce>
 800d4ae:	4b36      	ldr	r3, [pc, #216]	; (800d588 <atan+0x338>)
 800d4b0:	4e36      	ldr	r6, [pc, #216]	; (800d58c <atan+0x33c>)
 800d4b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	f7f2 ff65 	bl	8000388 <__aeabi_dsub>
 800d4be:	4622      	mov	r2, r4
 800d4c0:	462b      	mov	r3, r5
 800d4c2:	f7f2 ff61 	bl	8000388 <__aeabi_dsub>
 800d4c6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d4d2:	f7f2 ff59 	bl	8000388 <__aeabi_dsub>
 800d4d6:	f1bb 0f00 	cmp.w	fp, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	460d      	mov	r5, r1
 800d4de:	f6bf aed6 	bge.w	800d28e <atan+0x3e>
 800d4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4e6:	461d      	mov	r5, r3
 800d4e8:	e6d1      	b.n	800d28e <atan+0x3e>
 800d4ea:	a51d      	add	r5, pc, #116	; (adr r5, 800d560 <atan+0x310>)
 800d4ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d4f0:	e6cd      	b.n	800d28e <atan+0x3e>
 800d4f2:	bf00      	nop
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	54442d18 	.word	0x54442d18
 800d4fc:	bff921fb 	.word	0xbff921fb
 800d500:	8800759c 	.word	0x8800759c
 800d504:	7e37e43c 	.word	0x7e37e43c
 800d508:	e322da11 	.word	0xe322da11
 800d50c:	3f90ad3a 	.word	0x3f90ad3a
 800d510:	24760deb 	.word	0x24760deb
 800d514:	3fa97b4b 	.word	0x3fa97b4b
 800d518:	a0d03d51 	.word	0xa0d03d51
 800d51c:	3fb10d66 	.word	0x3fb10d66
 800d520:	c54c206e 	.word	0xc54c206e
 800d524:	3fb745cd 	.word	0x3fb745cd
 800d528:	920083ff 	.word	0x920083ff
 800d52c:	3fc24924 	.word	0x3fc24924
 800d530:	5555550d 	.word	0x5555550d
 800d534:	3fd55555 	.word	0x3fd55555
 800d538:	2c6a6c2f 	.word	0x2c6a6c2f
 800d53c:	bfa2b444 	.word	0xbfa2b444
 800d540:	52defd9a 	.word	0x52defd9a
 800d544:	3fadde2d 	.word	0x3fadde2d
 800d548:	af749a6d 	.word	0xaf749a6d
 800d54c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d550:	fe231671 	.word	0xfe231671
 800d554:	3fbc71c6 	.word	0x3fbc71c6
 800d558:	9998ebc4 	.word	0x9998ebc4
 800d55c:	3fc99999 	.word	0x3fc99999
 800d560:	54442d18 	.word	0x54442d18
 800d564:	3ff921fb 	.word	0x3ff921fb
 800d568:	440fffff 	.word	0x440fffff
 800d56c:	7ff00000 	.word	0x7ff00000
 800d570:	3fdbffff 	.word	0x3fdbffff
 800d574:	3ff00000 	.word	0x3ff00000
 800d578:	3ff2ffff 	.word	0x3ff2ffff
 800d57c:	40038000 	.word	0x40038000
 800d580:	3ff80000 	.word	0x3ff80000
 800d584:	bff00000 	.word	0xbff00000
 800d588:	08021888 	.word	0x08021888
 800d58c:	08021868 	.word	0x08021868

0800d590 <fabs>:
 800d590:	ec51 0b10 	vmov	r0, r1, d0
 800d594:	ee10 2a10 	vmov	r2, s0
 800d598:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d59c:	ec43 2b10 	vmov	d0, r2, r3
 800d5a0:	4770      	bx	lr
 800d5a2:	0000      	movs	r0, r0
 800d5a4:	0000      	movs	r0, r0
	...

0800d5a8 <__kernel_rem_pio2>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	ed2d 8b02 	vpush	{d8}
 800d5b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d5b4:	f112 0f14 	cmn.w	r2, #20
 800d5b8:	9306      	str	r3, [sp, #24]
 800d5ba:	9104      	str	r1, [sp, #16]
 800d5bc:	4bc2      	ldr	r3, [pc, #776]	; (800d8c8 <__kernel_rem_pio2+0x320>)
 800d5be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d5c0:	9009      	str	r0, [sp, #36]	; 0x24
 800d5c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	9b06      	ldr	r3, [sp, #24]
 800d5ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5ce:	bfa8      	it	ge
 800d5d0:	1ed4      	subge	r4, r2, #3
 800d5d2:	9305      	str	r3, [sp, #20]
 800d5d4:	bfb2      	itee	lt
 800d5d6:	2400      	movlt	r4, #0
 800d5d8:	2318      	movge	r3, #24
 800d5da:	fb94 f4f3 	sdivge	r4, r4, r3
 800d5de:	f06f 0317 	mvn.w	r3, #23
 800d5e2:	fb04 3303 	mla	r3, r4, r3, r3
 800d5e6:	eb03 0a02 	add.w	sl, r3, r2
 800d5ea:	9b00      	ldr	r3, [sp, #0]
 800d5ec:	9a05      	ldr	r2, [sp, #20]
 800d5ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d8b8 <__kernel_rem_pio2+0x310>
 800d5f2:	eb03 0802 	add.w	r8, r3, r2
 800d5f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d5f8:	1aa7      	subs	r7, r4, r2
 800d5fa:	ae20      	add	r6, sp, #128	; 0x80
 800d5fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d600:	2500      	movs	r5, #0
 800d602:	4545      	cmp	r5, r8
 800d604:	dd13      	ble.n	800d62e <__kernel_rem_pio2+0x86>
 800d606:	9b06      	ldr	r3, [sp, #24]
 800d608:	aa20      	add	r2, sp, #128	; 0x80
 800d60a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d60e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d612:	f04f 0800 	mov.w	r8, #0
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	4598      	cmp	r8, r3
 800d61a:	dc31      	bgt.n	800d680 <__kernel_rem_pio2+0xd8>
 800d61c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d8b8 <__kernel_rem_pio2+0x310>
 800d620:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d624:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d628:	462f      	mov	r7, r5
 800d62a:	2600      	movs	r6, #0
 800d62c:	e01b      	b.n	800d666 <__kernel_rem_pio2+0xbe>
 800d62e:	42ef      	cmn	r7, r5
 800d630:	d407      	bmi.n	800d642 <__kernel_rem_pio2+0x9a>
 800d632:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d636:	f7f2 fff5 	bl	8000624 <__aeabi_i2d>
 800d63a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d63e:	3501      	adds	r5, #1
 800d640:	e7df      	b.n	800d602 <__kernel_rem_pio2+0x5a>
 800d642:	ec51 0b18 	vmov	r0, r1, d8
 800d646:	e7f8      	b.n	800d63a <__kernel_rem_pio2+0x92>
 800d648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d64c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d650:	f7f3 f852 	bl	80006f8 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d65c:	f7f2 fe96 	bl	800038c <__adddf3>
 800d660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d664:	3601      	adds	r6, #1
 800d666:	9b05      	ldr	r3, [sp, #20]
 800d668:	429e      	cmp	r6, r3
 800d66a:	f1a7 0708 	sub.w	r7, r7, #8
 800d66e:	ddeb      	ble.n	800d648 <__kernel_rem_pio2+0xa0>
 800d670:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d674:	f108 0801 	add.w	r8, r8, #1
 800d678:	ecab 7b02 	vstmia	fp!, {d7}
 800d67c:	3508      	adds	r5, #8
 800d67e:	e7ca      	b.n	800d616 <__kernel_rem_pio2+0x6e>
 800d680:	9b00      	ldr	r3, [sp, #0]
 800d682:	aa0c      	add	r2, sp, #48	; 0x30
 800d684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d688:	930b      	str	r3, [sp, #44]	; 0x2c
 800d68a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d68c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d690:	9c00      	ldr	r4, [sp, #0]
 800d692:	930a      	str	r3, [sp, #40]	; 0x28
 800d694:	00e3      	lsls	r3, r4, #3
 800d696:	9308      	str	r3, [sp, #32]
 800d698:	ab98      	add	r3, sp, #608	; 0x260
 800d69a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d69e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d6a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d6a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800d6a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d6ac:	46c3      	mov	fp, r8
 800d6ae:	46a1      	mov	r9, r4
 800d6b0:	f1b9 0f00 	cmp.w	r9, #0
 800d6b4:	f1a5 0508 	sub.w	r5, r5, #8
 800d6b8:	dc77      	bgt.n	800d7aa <__kernel_rem_pio2+0x202>
 800d6ba:	ec47 6b10 	vmov	d0, r6, r7
 800d6be:	4650      	mov	r0, sl
 800d6c0:	f000 fac2 	bl	800dc48 <scalbn>
 800d6c4:	ec57 6b10 	vmov	r6, r7, d0
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d6ce:	ee10 0a10 	vmov	r0, s0
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f3 f810 	bl	80006f8 <__aeabi_dmul>
 800d6d8:	ec41 0b10 	vmov	d0, r0, r1
 800d6dc:	f000 fb34 	bl	800dd48 <floor>
 800d6e0:	4b7a      	ldr	r3, [pc, #488]	; (800d8cc <__kernel_rem_pio2+0x324>)
 800d6e2:	ec51 0b10 	vmov	r0, r1, d0
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f7f3 f806 	bl	80006f8 <__aeabi_dmul>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f7f2 fe48 	bl	8000388 <__aeabi_dsub>
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	f7f3 faac 	bl	8000c58 <__aeabi_d2iz>
 800d700:	9002      	str	r0, [sp, #8]
 800d702:	f7f2 ff8f 	bl	8000624 <__aeabi_i2d>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	4630      	mov	r0, r6
 800d70c:	4639      	mov	r1, r7
 800d70e:	f7f2 fe3b 	bl	8000388 <__aeabi_dsub>
 800d712:	f1ba 0f00 	cmp.w	sl, #0
 800d716:	4606      	mov	r6, r0
 800d718:	460f      	mov	r7, r1
 800d71a:	dd6d      	ble.n	800d7f8 <__kernel_rem_pio2+0x250>
 800d71c:	1e61      	subs	r1, r4, #1
 800d71e:	ab0c      	add	r3, sp, #48	; 0x30
 800d720:	9d02      	ldr	r5, [sp, #8]
 800d722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d726:	f1ca 0018 	rsb	r0, sl, #24
 800d72a:	fa43 f200 	asr.w	r2, r3, r0
 800d72e:	4415      	add	r5, r2
 800d730:	4082      	lsls	r2, r0
 800d732:	1a9b      	subs	r3, r3, r2
 800d734:	aa0c      	add	r2, sp, #48	; 0x30
 800d736:	9502      	str	r5, [sp, #8]
 800d738:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d73c:	f1ca 0217 	rsb	r2, sl, #23
 800d740:	fa43 fb02 	asr.w	fp, r3, r2
 800d744:	f1bb 0f00 	cmp.w	fp, #0
 800d748:	dd65      	ble.n	800d816 <__kernel_rem_pio2+0x26e>
 800d74a:	9b02      	ldr	r3, [sp, #8]
 800d74c:	2200      	movs	r2, #0
 800d74e:	3301      	adds	r3, #1
 800d750:	9302      	str	r3, [sp, #8]
 800d752:	4615      	mov	r5, r2
 800d754:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d758:	4294      	cmp	r4, r2
 800d75a:	f300 809f 	bgt.w	800d89c <__kernel_rem_pio2+0x2f4>
 800d75e:	f1ba 0f00 	cmp.w	sl, #0
 800d762:	dd07      	ble.n	800d774 <__kernel_rem_pio2+0x1cc>
 800d764:	f1ba 0f01 	cmp.w	sl, #1
 800d768:	f000 80c1 	beq.w	800d8ee <__kernel_rem_pio2+0x346>
 800d76c:	f1ba 0f02 	cmp.w	sl, #2
 800d770:	f000 80c7 	beq.w	800d902 <__kernel_rem_pio2+0x35a>
 800d774:	f1bb 0f02 	cmp.w	fp, #2
 800d778:	d14d      	bne.n	800d816 <__kernel_rem_pio2+0x26e>
 800d77a:	4632      	mov	r2, r6
 800d77c:	463b      	mov	r3, r7
 800d77e:	4954      	ldr	r1, [pc, #336]	; (800d8d0 <__kernel_rem_pio2+0x328>)
 800d780:	2000      	movs	r0, #0
 800d782:	f7f2 fe01 	bl	8000388 <__aeabi_dsub>
 800d786:	4606      	mov	r6, r0
 800d788:	460f      	mov	r7, r1
 800d78a:	2d00      	cmp	r5, #0
 800d78c:	d043      	beq.n	800d816 <__kernel_rem_pio2+0x26e>
 800d78e:	4650      	mov	r0, sl
 800d790:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d794:	f000 fa58 	bl	800dc48 <scalbn>
 800d798:	4630      	mov	r0, r6
 800d79a:	4639      	mov	r1, r7
 800d79c:	ec53 2b10 	vmov	r2, r3, d0
 800d7a0:	f7f2 fdf2 	bl	8000388 <__aeabi_dsub>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	460f      	mov	r7, r1
 800d7a8:	e035      	b.n	800d816 <__kernel_rem_pio2+0x26e>
 800d7aa:	4b4a      	ldr	r3, [pc, #296]	; (800d8d4 <__kernel_rem_pio2+0x32c>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	f7f2 ffa1 	bl	80006f8 <__aeabi_dmul>
 800d7b6:	f7f3 fa4f 	bl	8000c58 <__aeabi_d2iz>
 800d7ba:	f7f2 ff33 	bl	8000624 <__aeabi_i2d>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	ec43 2b18 	vmov	d8, r2, r3
 800d7c6:	4b44      	ldr	r3, [pc, #272]	; (800d8d8 <__kernel_rem_pio2+0x330>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f7f2 ff95 	bl	80006f8 <__aeabi_dmul>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f2 fdd7 	bl	8000388 <__aeabi_dsub>
 800d7da:	f7f3 fa3d 	bl	8000c58 <__aeabi_d2iz>
 800d7de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7e2:	f84b 0b04 	str.w	r0, [fp], #4
 800d7e6:	ec51 0b18 	vmov	r0, r1, d8
 800d7ea:	f7f2 fdcf 	bl	800038c <__adddf3>
 800d7ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	e75b      	b.n	800d6b0 <__kernel_rem_pio2+0x108>
 800d7f8:	d106      	bne.n	800d808 <__kernel_rem_pio2+0x260>
 800d7fa:	1e63      	subs	r3, r4, #1
 800d7fc:	aa0c      	add	r2, sp, #48	; 0x30
 800d7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d802:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d806:	e79d      	b.n	800d744 <__kernel_rem_pio2+0x19c>
 800d808:	4b34      	ldr	r3, [pc, #208]	; (800d8dc <__kernel_rem_pio2+0x334>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	f7f3 f9fa 	bl	8000c04 <__aeabi_dcmpge>
 800d810:	2800      	cmp	r0, #0
 800d812:	d140      	bne.n	800d896 <__kernel_rem_pio2+0x2ee>
 800d814:	4683      	mov	fp, r0
 800d816:	2200      	movs	r2, #0
 800d818:	2300      	movs	r3, #0
 800d81a:	4630      	mov	r0, r6
 800d81c:	4639      	mov	r1, r7
 800d81e:	f7f3 f9d3 	bl	8000bc8 <__aeabi_dcmpeq>
 800d822:	2800      	cmp	r0, #0
 800d824:	f000 80c1 	beq.w	800d9aa <__kernel_rem_pio2+0x402>
 800d828:	1e65      	subs	r5, r4, #1
 800d82a:	462b      	mov	r3, r5
 800d82c:	2200      	movs	r2, #0
 800d82e:	9900      	ldr	r1, [sp, #0]
 800d830:	428b      	cmp	r3, r1
 800d832:	da6d      	bge.n	800d910 <__kernel_rem_pio2+0x368>
 800d834:	2a00      	cmp	r2, #0
 800d836:	f000 808a 	beq.w	800d94e <__kernel_rem_pio2+0x3a6>
 800d83a:	ab0c      	add	r3, sp, #48	; 0x30
 800d83c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d840:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 80ae 	beq.w	800d9a6 <__kernel_rem_pio2+0x3fe>
 800d84a:	4650      	mov	r0, sl
 800d84c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d8c0 <__kernel_rem_pio2+0x318>
 800d850:	f000 f9fa 	bl	800dc48 <scalbn>
 800d854:	1c6b      	adds	r3, r5, #1
 800d856:	00da      	lsls	r2, r3, #3
 800d858:	9205      	str	r2, [sp, #20]
 800d85a:	ec57 6b10 	vmov	r6, r7, d0
 800d85e:	aa70      	add	r2, sp, #448	; 0x1c0
 800d860:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d8d4 <__kernel_rem_pio2+0x32c>
 800d864:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d868:	462c      	mov	r4, r5
 800d86a:	f04f 0800 	mov.w	r8, #0
 800d86e:	2c00      	cmp	r4, #0
 800d870:	f280 80d4 	bge.w	800da1c <__kernel_rem_pio2+0x474>
 800d874:	462c      	mov	r4, r5
 800d876:	2c00      	cmp	r4, #0
 800d878:	f2c0 8102 	blt.w	800da80 <__kernel_rem_pio2+0x4d8>
 800d87c:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <__kernel_rem_pio2+0x338>)
 800d87e:	461e      	mov	r6, r3
 800d880:	ab70      	add	r3, sp, #448	; 0x1c0
 800d882:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d886:	1b2b      	subs	r3, r5, r4
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	f04f 0a00 	mov.w	sl, #0
 800d890:	2700      	movs	r7, #0
 800d892:	9306      	str	r3, [sp, #24]
 800d894:	e0e6      	b.n	800da64 <__kernel_rem_pio2+0x4bc>
 800d896:	f04f 0b02 	mov.w	fp, #2
 800d89a:	e756      	b.n	800d74a <__kernel_rem_pio2+0x1a2>
 800d89c:	f8d8 3000 	ldr.w	r3, [r8]
 800d8a0:	bb05      	cbnz	r5, 800d8e4 <__kernel_rem_pio2+0x33c>
 800d8a2:	b123      	cbz	r3, 800d8ae <__kernel_rem_pio2+0x306>
 800d8a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d8a8:	f8c8 3000 	str.w	r3, [r8]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	3201      	adds	r2, #1
 800d8b0:	f108 0804 	add.w	r8, r8, #4
 800d8b4:	461d      	mov	r5, r3
 800d8b6:	e74f      	b.n	800d758 <__kernel_rem_pio2+0x1b0>
	...
 800d8c4:	3ff00000 	.word	0x3ff00000
 800d8c8:	080218e8 	.word	0x080218e8
 800d8cc:	40200000 	.word	0x40200000
 800d8d0:	3ff00000 	.word	0x3ff00000
 800d8d4:	3e700000 	.word	0x3e700000
 800d8d8:	41700000 	.word	0x41700000
 800d8dc:	3fe00000 	.word	0x3fe00000
 800d8e0:	080218a8 	.word	0x080218a8
 800d8e4:	1acb      	subs	r3, r1, r3
 800d8e6:	f8c8 3000 	str.w	r3, [r8]
 800d8ea:	462b      	mov	r3, r5
 800d8ec:	e7df      	b.n	800d8ae <__kernel_rem_pio2+0x306>
 800d8ee:	1e62      	subs	r2, r4, #1
 800d8f0:	ab0c      	add	r3, sp, #48	; 0x30
 800d8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d8fa:	a90c      	add	r1, sp, #48	; 0x30
 800d8fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d900:	e738      	b.n	800d774 <__kernel_rem_pio2+0x1cc>
 800d902:	1e62      	subs	r2, r4, #1
 800d904:	ab0c      	add	r3, sp, #48	; 0x30
 800d906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d90e:	e7f4      	b.n	800d8fa <__kernel_rem_pio2+0x352>
 800d910:	a90c      	add	r1, sp, #48	; 0x30
 800d912:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d916:	3b01      	subs	r3, #1
 800d918:	430a      	orrs	r2, r1
 800d91a:	e788      	b.n	800d82e <__kernel_rem_pio2+0x286>
 800d91c:	3301      	adds	r3, #1
 800d91e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d922:	2900      	cmp	r1, #0
 800d924:	d0fa      	beq.n	800d91c <__kernel_rem_pio2+0x374>
 800d926:	9a08      	ldr	r2, [sp, #32]
 800d928:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d92c:	446a      	add	r2, sp
 800d92e:	3a98      	subs	r2, #152	; 0x98
 800d930:	9208      	str	r2, [sp, #32]
 800d932:	9a06      	ldr	r2, [sp, #24]
 800d934:	a920      	add	r1, sp, #128	; 0x80
 800d936:	18a2      	adds	r2, r4, r2
 800d938:	18e3      	adds	r3, r4, r3
 800d93a:	f104 0801 	add.w	r8, r4, #1
 800d93e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d942:	9302      	str	r3, [sp, #8]
 800d944:	9b02      	ldr	r3, [sp, #8]
 800d946:	4543      	cmp	r3, r8
 800d948:	da04      	bge.n	800d954 <__kernel_rem_pio2+0x3ac>
 800d94a:	461c      	mov	r4, r3
 800d94c:	e6a2      	b.n	800d694 <__kernel_rem_pio2+0xec>
 800d94e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d950:	2301      	movs	r3, #1
 800d952:	e7e4      	b.n	800d91e <__kernel_rem_pio2+0x376>
 800d954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d956:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d95a:	f7f2 fe63 	bl	8000624 <__aeabi_i2d>
 800d95e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d964:	46ab      	mov	fp, r5
 800d966:	461c      	mov	r4, r3
 800d968:	f04f 0900 	mov.w	r9, #0
 800d96c:	2600      	movs	r6, #0
 800d96e:	2700      	movs	r7, #0
 800d970:	9b05      	ldr	r3, [sp, #20]
 800d972:	4599      	cmp	r9, r3
 800d974:	dd06      	ble.n	800d984 <__kernel_rem_pio2+0x3dc>
 800d976:	9b08      	ldr	r3, [sp, #32]
 800d978:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d97c:	f108 0801 	add.w	r8, r8, #1
 800d980:	9308      	str	r3, [sp, #32]
 800d982:	e7df      	b.n	800d944 <__kernel_rem_pio2+0x39c>
 800d984:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d988:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d98c:	f7f2 feb4 	bl	80006f8 <__aeabi_dmul>
 800d990:	4602      	mov	r2, r0
 800d992:	460b      	mov	r3, r1
 800d994:	4630      	mov	r0, r6
 800d996:	4639      	mov	r1, r7
 800d998:	f7f2 fcf8 	bl	800038c <__adddf3>
 800d99c:	f109 0901 	add.w	r9, r9, #1
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	460f      	mov	r7, r1
 800d9a4:	e7e4      	b.n	800d970 <__kernel_rem_pio2+0x3c8>
 800d9a6:	3d01      	subs	r5, #1
 800d9a8:	e747      	b.n	800d83a <__kernel_rem_pio2+0x292>
 800d9aa:	ec47 6b10 	vmov	d0, r6, r7
 800d9ae:	f1ca 0000 	rsb	r0, sl, #0
 800d9b2:	f000 f949 	bl	800dc48 <scalbn>
 800d9b6:	ec57 6b10 	vmov	r6, r7, d0
 800d9ba:	4ba0      	ldr	r3, [pc, #640]	; (800dc3c <__kernel_rem_pio2+0x694>)
 800d9bc:	ee10 0a10 	vmov	r0, s0
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f3 f91e 	bl	8000c04 <__aeabi_dcmpge>
 800d9c8:	b1f8      	cbz	r0, 800da0a <__kernel_rem_pio2+0x462>
 800d9ca:	4b9d      	ldr	r3, [pc, #628]	; (800dc40 <__kernel_rem_pio2+0x698>)
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	f7f2 fe91 	bl	80006f8 <__aeabi_dmul>
 800d9d6:	f7f3 f93f 	bl	8000c58 <__aeabi_d2iz>
 800d9da:	4680      	mov	r8, r0
 800d9dc:	f7f2 fe22 	bl	8000624 <__aeabi_i2d>
 800d9e0:	4b96      	ldr	r3, [pc, #600]	; (800dc3c <__kernel_rem_pio2+0x694>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f7f2 fe88 	bl	80006f8 <__aeabi_dmul>
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7f2 fcca 	bl	8000388 <__aeabi_dsub>
 800d9f4:	f7f3 f930 	bl	8000c58 <__aeabi_d2iz>
 800d9f8:	1c65      	adds	r5, r4, #1
 800d9fa:	ab0c      	add	r3, sp, #48	; 0x30
 800d9fc:	f10a 0a18 	add.w	sl, sl, #24
 800da00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800da08:	e71f      	b.n	800d84a <__kernel_rem_pio2+0x2a2>
 800da0a:	4630      	mov	r0, r6
 800da0c:	4639      	mov	r1, r7
 800da0e:	f7f3 f923 	bl	8000c58 <__aeabi_d2iz>
 800da12:	ab0c      	add	r3, sp, #48	; 0x30
 800da14:	4625      	mov	r5, r4
 800da16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da1a:	e716      	b.n	800d84a <__kernel_rem_pio2+0x2a2>
 800da1c:	ab0c      	add	r3, sp, #48	; 0x30
 800da1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800da22:	f7f2 fdff 	bl	8000624 <__aeabi_i2d>
 800da26:	4632      	mov	r2, r6
 800da28:	463b      	mov	r3, r7
 800da2a:	f7f2 fe65 	bl	80006f8 <__aeabi_dmul>
 800da2e:	4642      	mov	r2, r8
 800da30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800da34:	464b      	mov	r3, r9
 800da36:	4630      	mov	r0, r6
 800da38:	4639      	mov	r1, r7
 800da3a:	f7f2 fe5d 	bl	80006f8 <__aeabi_dmul>
 800da3e:	3c01      	subs	r4, #1
 800da40:	4606      	mov	r6, r0
 800da42:	460f      	mov	r7, r1
 800da44:	e713      	b.n	800d86e <__kernel_rem_pio2+0x2c6>
 800da46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800da4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800da4e:	f7f2 fe53 	bl	80006f8 <__aeabi_dmul>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4648      	mov	r0, r9
 800da58:	4651      	mov	r1, sl
 800da5a:	f7f2 fc97 	bl	800038c <__adddf3>
 800da5e:	3701      	adds	r7, #1
 800da60:	4681      	mov	r9, r0
 800da62:	468a      	mov	sl, r1
 800da64:	9b00      	ldr	r3, [sp, #0]
 800da66:	429f      	cmp	r7, r3
 800da68:	dc02      	bgt.n	800da70 <__kernel_rem_pio2+0x4c8>
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	429f      	cmp	r7, r3
 800da6e:	ddea      	ble.n	800da46 <__kernel_rem_pio2+0x49e>
 800da70:	9a06      	ldr	r2, [sp, #24]
 800da72:	ab48      	add	r3, sp, #288	; 0x120
 800da74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800da78:	e9c6 9a00 	strd	r9, sl, [r6]
 800da7c:	3c01      	subs	r4, #1
 800da7e:	e6fa      	b.n	800d876 <__kernel_rem_pio2+0x2ce>
 800da80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800da82:	2b02      	cmp	r3, #2
 800da84:	dc0b      	bgt.n	800da9e <__kernel_rem_pio2+0x4f6>
 800da86:	2b00      	cmp	r3, #0
 800da88:	dc39      	bgt.n	800dafe <__kernel_rem_pio2+0x556>
 800da8a:	d05d      	beq.n	800db48 <__kernel_rem_pio2+0x5a0>
 800da8c:	9b02      	ldr	r3, [sp, #8]
 800da8e:	f003 0007 	and.w	r0, r3, #7
 800da92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800da96:	ecbd 8b02 	vpop	{d8}
 800da9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d1f3      	bne.n	800da8c <__kernel_rem_pio2+0x4e4>
 800daa4:	9b05      	ldr	r3, [sp, #20]
 800daa6:	9500      	str	r5, [sp, #0]
 800daa8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800daac:	eb0d 0403 	add.w	r4, sp, r3
 800dab0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800dab4:	46a2      	mov	sl, r4
 800dab6:	9b00      	ldr	r3, [sp, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f1aa 0a08 	sub.w	sl, sl, #8
 800dabe:	dc69      	bgt.n	800db94 <__kernel_rem_pio2+0x5ec>
 800dac0:	46aa      	mov	sl, r5
 800dac2:	f1ba 0f01 	cmp.w	sl, #1
 800dac6:	f1a4 0408 	sub.w	r4, r4, #8
 800daca:	f300 8083 	bgt.w	800dbd4 <__kernel_rem_pio2+0x62c>
 800dace:	9c05      	ldr	r4, [sp, #20]
 800dad0:	ab48      	add	r3, sp, #288	; 0x120
 800dad2:	441c      	add	r4, r3
 800dad4:	2000      	movs	r0, #0
 800dad6:	2100      	movs	r1, #0
 800dad8:	2d01      	cmp	r5, #1
 800dada:	f300 809a 	bgt.w	800dc12 <__kernel_rem_pio2+0x66a>
 800dade:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800dae2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dae6:	f1bb 0f00 	cmp.w	fp, #0
 800daea:	f040 8098 	bne.w	800dc1e <__kernel_rem_pio2+0x676>
 800daee:	9b04      	ldr	r3, [sp, #16]
 800daf0:	e9c3 7800 	strd	r7, r8, [r3]
 800daf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800daf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dafc:	e7c6      	b.n	800da8c <__kernel_rem_pio2+0x4e4>
 800dafe:	9e05      	ldr	r6, [sp, #20]
 800db00:	ab48      	add	r3, sp, #288	; 0x120
 800db02:	441e      	add	r6, r3
 800db04:	462c      	mov	r4, r5
 800db06:	2000      	movs	r0, #0
 800db08:	2100      	movs	r1, #0
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	da33      	bge.n	800db76 <__kernel_rem_pio2+0x5ce>
 800db0e:	f1bb 0f00 	cmp.w	fp, #0
 800db12:	d036      	beq.n	800db82 <__kernel_rem_pio2+0x5da>
 800db14:	4602      	mov	r2, r0
 800db16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db1a:	9c04      	ldr	r4, [sp, #16]
 800db1c:	e9c4 2300 	strd	r2, r3, [r4]
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800db28:	f7f2 fc2e 	bl	8000388 <__aeabi_dsub>
 800db2c:	ae4a      	add	r6, sp, #296	; 0x128
 800db2e:	2401      	movs	r4, #1
 800db30:	42a5      	cmp	r5, r4
 800db32:	da29      	bge.n	800db88 <__kernel_rem_pio2+0x5e0>
 800db34:	f1bb 0f00 	cmp.w	fp, #0
 800db38:	d002      	beq.n	800db40 <__kernel_rem_pio2+0x598>
 800db3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db3e:	4619      	mov	r1, r3
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800db46:	e7a1      	b.n	800da8c <__kernel_rem_pio2+0x4e4>
 800db48:	9c05      	ldr	r4, [sp, #20]
 800db4a:	ab48      	add	r3, sp, #288	; 0x120
 800db4c:	441c      	add	r4, r3
 800db4e:	2000      	movs	r0, #0
 800db50:	2100      	movs	r1, #0
 800db52:	2d00      	cmp	r5, #0
 800db54:	da09      	bge.n	800db6a <__kernel_rem_pio2+0x5c2>
 800db56:	f1bb 0f00 	cmp.w	fp, #0
 800db5a:	d002      	beq.n	800db62 <__kernel_rem_pio2+0x5ba>
 800db5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db60:	4619      	mov	r1, r3
 800db62:	9b04      	ldr	r3, [sp, #16]
 800db64:	e9c3 0100 	strd	r0, r1, [r3]
 800db68:	e790      	b.n	800da8c <__kernel_rem_pio2+0x4e4>
 800db6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db6e:	f7f2 fc0d 	bl	800038c <__adddf3>
 800db72:	3d01      	subs	r5, #1
 800db74:	e7ed      	b.n	800db52 <__kernel_rem_pio2+0x5aa>
 800db76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800db7a:	f7f2 fc07 	bl	800038c <__adddf3>
 800db7e:	3c01      	subs	r4, #1
 800db80:	e7c3      	b.n	800db0a <__kernel_rem_pio2+0x562>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	e7c8      	b.n	800db1a <__kernel_rem_pio2+0x572>
 800db88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800db8c:	f7f2 fbfe 	bl	800038c <__adddf3>
 800db90:	3401      	adds	r4, #1
 800db92:	e7cd      	b.n	800db30 <__kernel_rem_pio2+0x588>
 800db94:	e9da 8900 	ldrd	r8, r9, [sl]
 800db98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	4632      	mov	r2, r6
 800dba4:	463b      	mov	r3, r7
 800dba6:	4640      	mov	r0, r8
 800dba8:	4649      	mov	r1, r9
 800dbaa:	f7f2 fbef 	bl	800038c <__adddf3>
 800dbae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	4649      	mov	r1, r9
 800dbba:	f7f2 fbe5 	bl	8000388 <__aeabi_dsub>
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	463b      	mov	r3, r7
 800dbc2:	f7f2 fbe3 	bl	800038c <__adddf3>
 800dbc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dbca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbce:	ed8a 7b00 	vstr	d7, [sl]
 800dbd2:	e770      	b.n	800dab6 <__kernel_rem_pio2+0x50e>
 800dbd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dbd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4632      	mov	r2, r6
 800dbe0:	463b      	mov	r3, r7
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	f7f2 fbd2 	bl	800038c <__adddf3>
 800dbe8:	e9cd 0100 	strd	r0, r1, [sp]
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4640      	mov	r0, r8
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	f7f2 fbc8 	bl	8000388 <__aeabi_dsub>
 800dbf8:	4632      	mov	r2, r6
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	f7f2 fbc6 	bl	800038c <__adddf3>
 800dc00:	ed9d 7b00 	vldr	d7, [sp]
 800dc04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc08:	ed84 7b00 	vstr	d7, [r4]
 800dc0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc10:	e757      	b.n	800dac2 <__kernel_rem_pio2+0x51a>
 800dc12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc16:	f7f2 fbb9 	bl	800038c <__adddf3>
 800dc1a:	3d01      	subs	r5, #1
 800dc1c:	e75c      	b.n	800dad8 <__kernel_rem_pio2+0x530>
 800dc1e:	9b04      	ldr	r3, [sp, #16]
 800dc20:	9a04      	ldr	r2, [sp, #16]
 800dc22:	601f      	str	r7, [r3, #0]
 800dc24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800dc28:	605c      	str	r4, [r3, #4]
 800dc2a:	609d      	str	r5, [r3, #8]
 800dc2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dc30:	60d3      	str	r3, [r2, #12]
 800dc32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc36:	6110      	str	r0, [r2, #16]
 800dc38:	6153      	str	r3, [r2, #20]
 800dc3a:	e727      	b.n	800da8c <__kernel_rem_pio2+0x4e4>
 800dc3c:	41700000 	.word	0x41700000
 800dc40:	3e700000 	.word	0x3e700000
 800dc44:	00000000 	.word	0x00000000

0800dc48 <scalbn>:
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	ec55 4b10 	vmov	r4, r5, d0
 800dc4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dc52:	4606      	mov	r6, r0
 800dc54:	462b      	mov	r3, r5
 800dc56:	b999      	cbnz	r1, 800dc80 <scalbn+0x38>
 800dc58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc5c:	4323      	orrs	r3, r4
 800dc5e:	d03f      	beq.n	800dce0 <scalbn+0x98>
 800dc60:	4b35      	ldr	r3, [pc, #212]	; (800dd38 <scalbn+0xf0>)
 800dc62:	4629      	mov	r1, r5
 800dc64:	ee10 0a10 	vmov	r0, s0
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f2 fd45 	bl	80006f8 <__aeabi_dmul>
 800dc6e:	4b33      	ldr	r3, [pc, #204]	; (800dd3c <scalbn+0xf4>)
 800dc70:	429e      	cmp	r6, r3
 800dc72:	4604      	mov	r4, r0
 800dc74:	460d      	mov	r5, r1
 800dc76:	da10      	bge.n	800dc9a <scalbn+0x52>
 800dc78:	a327      	add	r3, pc, #156	; (adr r3, 800dd18 <scalbn+0xd0>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	e01f      	b.n	800dcc0 <scalbn+0x78>
 800dc80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dc84:	4291      	cmp	r1, r2
 800dc86:	d10c      	bne.n	800dca2 <scalbn+0x5a>
 800dc88:	ee10 2a10 	vmov	r2, s0
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7f2 fb7c 	bl	800038c <__adddf3>
 800dc94:	4604      	mov	r4, r0
 800dc96:	460d      	mov	r5, r1
 800dc98:	e022      	b.n	800dce0 <scalbn+0x98>
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dca0:	3936      	subs	r1, #54	; 0x36
 800dca2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800dca6:	4296      	cmp	r6, r2
 800dca8:	dd0d      	ble.n	800dcc6 <scalbn+0x7e>
 800dcaa:	2d00      	cmp	r5, #0
 800dcac:	a11c      	add	r1, pc, #112	; (adr r1, 800dd20 <scalbn+0xd8>)
 800dcae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcb2:	da02      	bge.n	800dcba <scalbn+0x72>
 800dcb4:	a11c      	add	r1, pc, #112	; (adr r1, 800dd28 <scalbn+0xe0>)
 800dcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcba:	a319      	add	r3, pc, #100	; (adr r3, 800dd20 <scalbn+0xd8>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fd1a 	bl	80006f8 <__aeabi_dmul>
 800dcc4:	e7e6      	b.n	800dc94 <scalbn+0x4c>
 800dcc6:	1872      	adds	r2, r6, r1
 800dcc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dccc:	428a      	cmp	r2, r1
 800dcce:	dcec      	bgt.n	800dcaa <scalbn+0x62>
 800dcd0:	2a00      	cmp	r2, #0
 800dcd2:	dd08      	ble.n	800dce6 <scalbn+0x9e>
 800dcd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dce0:	ec45 4b10 	vmov	d0, r4, r5
 800dce4:	bd70      	pop	{r4, r5, r6, pc}
 800dce6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dcea:	da08      	bge.n	800dcfe <scalbn+0xb6>
 800dcec:	2d00      	cmp	r5, #0
 800dcee:	a10a      	add	r1, pc, #40	; (adr r1, 800dd18 <scalbn+0xd0>)
 800dcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcf4:	dac0      	bge.n	800dc78 <scalbn+0x30>
 800dcf6:	a10e      	add	r1, pc, #56	; (adr r1, 800dd30 <scalbn+0xe8>)
 800dcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcfc:	e7bc      	b.n	800dc78 <scalbn+0x30>
 800dcfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd02:	3236      	adds	r2, #54	; 0x36
 800dd04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4b0c      	ldr	r3, [pc, #48]	; (800dd40 <scalbn+0xf8>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	e7d5      	b.n	800dcc0 <scalbn+0x78>
 800dd14:	f3af 8000 	nop.w
 800dd18:	c2f8f359 	.word	0xc2f8f359
 800dd1c:	01a56e1f 	.word	0x01a56e1f
 800dd20:	8800759c 	.word	0x8800759c
 800dd24:	7e37e43c 	.word	0x7e37e43c
 800dd28:	8800759c 	.word	0x8800759c
 800dd2c:	fe37e43c 	.word	0xfe37e43c
 800dd30:	c2f8f359 	.word	0xc2f8f359
 800dd34:	81a56e1f 	.word	0x81a56e1f
 800dd38:	43500000 	.word	0x43500000
 800dd3c:	ffff3cb0 	.word	0xffff3cb0
 800dd40:	3c900000 	.word	0x3c900000
 800dd44:	00000000 	.word	0x00000000

0800dd48 <floor>:
 800dd48:	ec51 0b10 	vmov	r0, r1, d0
 800dd4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800dd58:	2e13      	cmp	r6, #19
 800dd5a:	ee10 5a10 	vmov	r5, s0
 800dd5e:	ee10 8a10 	vmov	r8, s0
 800dd62:	460c      	mov	r4, r1
 800dd64:	dc31      	bgt.n	800ddca <floor+0x82>
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	da14      	bge.n	800dd94 <floor+0x4c>
 800dd6a:	a333      	add	r3, pc, #204	; (adr r3, 800de38 <floor+0xf0>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 fb0c 	bl	800038c <__adddf3>
 800dd74:	2200      	movs	r2, #0
 800dd76:	2300      	movs	r3, #0
 800dd78:	f7f2 ff4e 	bl	8000c18 <__aeabi_dcmpgt>
 800dd7c:	b138      	cbz	r0, 800dd8e <floor+0x46>
 800dd7e:	2c00      	cmp	r4, #0
 800dd80:	da53      	bge.n	800de2a <floor+0xe2>
 800dd82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800dd86:	4325      	orrs	r5, r4
 800dd88:	d052      	beq.n	800de30 <floor+0xe8>
 800dd8a:	4c2d      	ldr	r4, [pc, #180]	; (800de40 <floor+0xf8>)
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	e024      	b.n	800ddde <floor+0x96>
 800dd94:	4f2b      	ldr	r7, [pc, #172]	; (800de44 <floor+0xfc>)
 800dd96:	4137      	asrs	r7, r6
 800dd98:	ea01 0307 	and.w	r3, r1, r7
 800dd9c:	4303      	orrs	r3, r0
 800dd9e:	d01e      	beq.n	800ddde <floor+0x96>
 800dda0:	a325      	add	r3, pc, #148	; (adr r3, 800de38 <floor+0xf0>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 faf1 	bl	800038c <__adddf3>
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2300      	movs	r3, #0
 800ddae:	f7f2 ff33 	bl	8000c18 <__aeabi_dcmpgt>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d0eb      	beq.n	800dd8e <floor+0x46>
 800ddb6:	2c00      	cmp	r4, #0
 800ddb8:	bfbe      	ittt	lt
 800ddba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ddbe:	4133      	asrlt	r3, r6
 800ddc0:	18e4      	addlt	r4, r4, r3
 800ddc2:	ea24 0407 	bic.w	r4, r4, r7
 800ddc6:	2500      	movs	r5, #0
 800ddc8:	e7e1      	b.n	800dd8e <floor+0x46>
 800ddca:	2e33      	cmp	r6, #51	; 0x33
 800ddcc:	dd0b      	ble.n	800dde6 <floor+0x9e>
 800ddce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ddd2:	d104      	bne.n	800ddde <floor+0x96>
 800ddd4:	ee10 2a10 	vmov	r2, s0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	f7f2 fad7 	bl	800038c <__adddf3>
 800ddde:	ec41 0b10 	vmov	d0, r0, r1
 800dde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ddea:	f04f 37ff 	mov.w	r7, #4294967295
 800ddee:	40df      	lsrs	r7, r3
 800ddf0:	4238      	tst	r0, r7
 800ddf2:	d0f4      	beq.n	800ddde <floor+0x96>
 800ddf4:	a310      	add	r3, pc, #64	; (adr r3, 800de38 <floor+0xf0>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	f7f2 fac7 	bl	800038c <__adddf3>
 800ddfe:	2200      	movs	r2, #0
 800de00:	2300      	movs	r3, #0
 800de02:	f7f2 ff09 	bl	8000c18 <__aeabi_dcmpgt>
 800de06:	2800      	cmp	r0, #0
 800de08:	d0c1      	beq.n	800dd8e <floor+0x46>
 800de0a:	2c00      	cmp	r4, #0
 800de0c:	da0a      	bge.n	800de24 <floor+0xdc>
 800de0e:	2e14      	cmp	r6, #20
 800de10:	d101      	bne.n	800de16 <floor+0xce>
 800de12:	3401      	adds	r4, #1
 800de14:	e006      	b.n	800de24 <floor+0xdc>
 800de16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800de1a:	2301      	movs	r3, #1
 800de1c:	40b3      	lsls	r3, r6
 800de1e:	441d      	add	r5, r3
 800de20:	45a8      	cmp	r8, r5
 800de22:	d8f6      	bhi.n	800de12 <floor+0xca>
 800de24:	ea25 0507 	bic.w	r5, r5, r7
 800de28:	e7b1      	b.n	800dd8e <floor+0x46>
 800de2a:	2500      	movs	r5, #0
 800de2c:	462c      	mov	r4, r5
 800de2e:	e7ae      	b.n	800dd8e <floor+0x46>
 800de30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800de34:	e7ab      	b.n	800dd8e <floor+0x46>
 800de36:	bf00      	nop
 800de38:	8800759c 	.word	0x8800759c
 800de3c:	7e37e43c 	.word	0x7e37e43c
 800de40:	bff00000 	.word	0xbff00000
 800de44:	000fffff 	.word	0x000fffff

0800de48 <_init>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr

0800de54 <_fini>:
 800de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de56:	bf00      	nop
 800de58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5a:	bc08      	pop	{r3}
 800de5c:	469e      	mov	lr, r3
 800de5e:	4770      	bx	lr
